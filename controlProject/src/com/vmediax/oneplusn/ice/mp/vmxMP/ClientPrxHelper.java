// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ClientPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.vmediax.oneplusn.ice.mp.vmxMP;

/**
 * Client是一个客户端在服务器端的虚拟代理，用于设置终端的信息然后加入[Conference]会议对象进行多点会议， 客户端可能是323终端，或者sip终端等.
 * 
 * <br><br>属性列表<br>
 * 
 * <b>所有类型客户端的属性列表:</b><br>
 * <ul>remote: 客户端的IP地址(如果是rtsp客户端，则为rtsp的uri, 没有默认值, 属性名对应的定义为[PropertyIpAddr].                                                                   </ul>
 * <ul>bandwidth: 带宽, 默认值为"2048", 属性名对应的定义为[PropertyBandwidth].                                                                           </ul>
 * <ul>audioCodec: 音频编解码类型, 默认值为"auto", 即自动协商，可以选择"auto/G711/G722/G722.1/G722.1C/G723.1/G728/G729", 属性名对应的定义为[PropertyAudioCodec].     </ul>
 * <ul>videoCodec: 视频编解码类型, 默认值为"auto", 即自动协商, 可以选择"auto/H264/H263", 属性名对应的定义为[PropertyVideoCodec]                                      </ul>
 * <ul>videoReceiveSize: 服务器发送到客户端的视频图像大小, 默认值为"720p", 可以选择"qcif/cif/4cif/XGA/720p/1080p", 属性名对应的定义为[PropertyVideoRxSize].     </ul>
 * <ul>videoTransmitSize: 客户端发送到服务器的视频图像大小, 默认值为"720p", 可以选择"qcif/cif/4cif/XGA/720p/1080p", 属性名对应的定义为[PropertyVideoTxSize].    </ul>
 * 
 * <b>323类型客户端的属性列表:</b></p>                                                                                                            
 * <ul>port: 323协议栈的端口, 默认值为"1332", 属性名对应的定义为[PropertyPort].                                                                                          </ul>
 * <ul>h323: h323 name, 无默认值, 属性名对应的定义为[PropertyH323Name].                                                                                                      </ul>
 * <ul>e164: e164 name, 无默认值, 属性名对应的定义为[PropertyE164].                                                                                                      </ul>
 * <ul>videoExtCodec: 视频辅流的编解码类型, 默认值是"auto", 即自动协商, 可以选择"auto/H264/H263", 属性名对应的定义为[PropertyVideoExtCodec]                                       </ul>
 * <ul>videoExtSizeRx: 视频辅流的服务器发送到客户端的视频图像大小, 默认值为"XGA", 可以选择"qcif/cif/4cif/XGA/720p/1080p", 属性名对应的定义为[PropertyVideoExtSizeRx].                      </ul>
 * <ul>videoExtSizeTx: 视频辅流的客户端发送的服务器的视频大小, 默认值是"XGA", 可以选择"qcif/cif/4cif/XGA/720p/1080p", 属性名对应的定义为[PropertyVideoExtSizeTx].                         </ul>
 * <ul>allowSendExtVideo: 允许客户端发送视频辅流, 默认值是"false", 可以选择"true/false", 属性名对应的定义为[PropertyAllowSendExtVideo]                                         </ul>
 * 
 * <b>sip类型客户端的属性列表:</b></p>                                                                                                          
 * <ul>userName：注册到SIP服务器的用户名，无默认值.                                                                                       </ul>
 * <ul>domain：注册的域，无默认值.                                                                                       </ul>
 * <ul>authName：注册时的授权名，无默认值.                                                                                       </ul>
 * <ul>passWord：密码，无默认值.                                                                                       </ul>
 * <ul>sipServerIP：SIP注册服务器的地址，无默认值.                                                                                     </ul>    
 * 
 * <b>flash类型客户端的属性列表:</b></p>                                                                                                    
 * <ul>rtmpDownStreamName：下行媒体流的名字,属性名对应的定义为[PropertyRtmpDownStreamName].                                                                                       </ul>
 * <ul>rtmpUpStreamName：上行行媒体流的名字,属性名对应的定义为[PropertyRtmpUpStreamName].                                                                                       </ul>
 * <ul>rtmpDownExtStreamName：辅流媒体流的名字,属性名对应的定义为[PropertyRtmpDownExtStreamName].                                                                                     </ul>
 * <ul>rtmpUpExtStreamName：辅流媒体流的名字,属性名对应的定义为[PropertyRtmpUpExtStreamName].                                                                                     </ul>
 * <ul>rtmpAppName：rtmp程序名,属性名对应的定义为[PropertyRtmpAppName].                                                                                               </ul>
 * 
 * <b>rtsp类型客户端的属性列表:</b></p>                                                                                                                                                                                            </ul>
 * <ul>protocols：传输协议的类型，默认值是udp，可以选择"udp/tcp/http".                                                                                       </ul>    
 * <ul>latency：缓冲的时间，默认值是"0".                                                                                       </ul>    
 * 
 * @see Conference
 * @see ClientMgr
 **/
public final class ClientPrxHelper extends Ice.ObjectPrxHelperBase implements ClientPrx
{
    /**
     * 枚举资源对象接受输入的节点列表.
     * 
     * @param list 媒体流节点的ID及流类型列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumInputNode(vmxICE.MediaNodeListHolder list)
    {
        return enumInputNode(list, null, false);
    }

    /**
     * 枚举资源对象接受输入的节点列表.
     * 
     * @param list 媒体流节点的ID及流类型列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumInputNode(vmxICE.MediaNodeListHolder list, java.util.Map<String, String> __ctx)
    {
        return enumInputNode(list, __ctx, true);
    }

    private int
    enumInputNode(vmxICE.MediaNodeListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumInputNode");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.enumInputNode(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumInputNode_name = "enumInputNode";

    /**
     * 枚举资源对象接受输入的节点列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumInputNode()
    {
        return begin_enumInputNode(null, false, null);
    }

    /**
     * 枚举资源对象接受输入的节点列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumInputNode(java.util.Map<String, String> __ctx)
    {
        return begin_enumInputNode(__ctx, true, null);
    }

    /**
     * 枚举资源对象接受输入的节点列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumInputNode(Ice.Callback __cb)
    {
        return begin_enumInputNode(null, false, __cb);
    }

    /**
     * 枚举资源对象接受输入的节点列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumInputNode(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumInputNode(__ctx, true, __cb);
    }

    /**
     * 枚举资源对象接受输入的节点列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumInputNode(vmxICE.Callback_Resource_enumInputNode __cb)
    {
        return begin_enumInputNode(null, false, __cb);
    }

    /**
     * 枚举资源对象接受输入的节点列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumInputNode(java.util.Map<String, String> __ctx, vmxICE.Callback_Resource_enumInputNode __cb)
    {
        return begin_enumInputNode(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumInputNode(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumInputNode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumInputNode_name, __cb);
        try
        {
            __result.__prepare(__enumInputNode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 媒体流节点的ID及流类型列表.
     * 
     **/
    public int end_enumInputNode(vmxICE.MediaNodeListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumInputNode_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = vmxICE.MediaNodeListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举资源对象提供输出的节点列表.
     * 
     * @param list 媒体流节点的ID及流类型列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumOutputNode(vmxICE.MediaNodeListHolder list)
    {
        return enumOutputNode(list, null, false);
    }

    /**
     * 枚举资源对象提供输出的节点列表.
     * 
     * @param list 媒体流节点的ID及流类型列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumOutputNode(vmxICE.MediaNodeListHolder list, java.util.Map<String, String> __ctx)
    {
        return enumOutputNode(list, __ctx, true);
    }

    private int
    enumOutputNode(vmxICE.MediaNodeListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumOutputNode");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.enumOutputNode(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumOutputNode_name = "enumOutputNode";

    /**
     * 枚举资源对象提供输出的节点列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumOutputNode()
    {
        return begin_enumOutputNode(null, false, null);
    }

    /**
     * 枚举资源对象提供输出的节点列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumOutputNode(java.util.Map<String, String> __ctx)
    {
        return begin_enumOutputNode(__ctx, true, null);
    }

    /**
     * 枚举资源对象提供输出的节点列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumOutputNode(Ice.Callback __cb)
    {
        return begin_enumOutputNode(null, false, __cb);
    }

    /**
     * 枚举资源对象提供输出的节点列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumOutputNode(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumOutputNode(__ctx, true, __cb);
    }

    /**
     * 枚举资源对象提供输出的节点列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumOutputNode(vmxICE.Callback_Resource_enumOutputNode __cb)
    {
        return begin_enumOutputNode(null, false, __cb);
    }

    /**
     * 枚举资源对象提供输出的节点列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumOutputNode(java.util.Map<String, String> __ctx, vmxICE.Callback_Resource_enumOutputNode __cb)
    {
        return begin_enumOutputNode(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumOutputNode(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumOutputNode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumOutputNode_name, __cb);
        try
        {
            __result.__prepare(__enumOutputNode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 媒体流节点的ID及流类型列表.
     * 
     **/
    public int end_enumOutputNode(vmxICE.MediaNodeListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumOutputNode_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = vmxICE.MediaNodeListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumMessageList(vmxICE.MsgDescListHolder msgList)
    {
        return enumMessageList(msgList, null, false);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumMessageList(vmxICE.MsgDescListHolder msgList, java.util.Map<String, String> __ctx)
    {
        return enumMessageList(msgList, __ctx, true);
    }

    private int
    enumMessageList(vmxICE.MsgDescListHolder msgList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumMessageList");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.enumMessageList(msgList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumMessageList_name = "enumMessageList";

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumMessageList()
    {
        return begin_enumMessageList(null, false, null);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx)
    {
        return begin_enumMessageList(__ctx, true, null);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumMessageList(Ice.Callback __cb)
    {
        return begin_enumMessageList(null, false, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumMessageList(__ctx, true, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumMessageList(vmxICE.Callback_VMXObject_enumMessageList __cb)
    {
        return begin_enumMessageList(null, false, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_enumMessageList __cb)
    {
        return begin_enumMessageList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumMessageList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumMessageList_name, __cb);
        try
        {
            __result.__prepare(__enumMessageList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     **/
    public int end_enumMessageList(vmxICE.MsgDescListHolder msgList, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumMessageList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        msgList.value = vmxICE.MsgDescListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param info 属性信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumProperty(String name, vmxICE.PropertyInfoHolder info)
    {
        return enumProperty(name, info, null, false);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param info 属性信息
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumProperty(String name, vmxICE.PropertyInfoHolder info, java.util.Map<String, String> __ctx)
    {
        return enumProperty(name, info, __ctx, true);
    }

    private int
    enumProperty(String name, vmxICE.PropertyInfoHolder info, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumProperty");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.enumProperty(name, info, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumProperty_name = "enumProperty";

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_enumProperty(String name)
    {
        return begin_enumProperty(name, null, false, null);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx)
    {
        return begin_enumProperty(name, __ctx, true, null);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_enumProperty(String name, Ice.Callback __cb)
    {
        return begin_enumProperty(name, null, false, __cb);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumProperty(name, __ctx, true, __cb);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_enumProperty(String name, vmxICE.Callback_VMXObject_enumProperty __cb)
    {
        return begin_enumProperty(name, null, false, __cb);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_enumProperty __cb)
    {
        return begin_enumProperty(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumProperty_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumProperty_name, __cb);
        try
        {
            __result.__prepare(__enumProperty_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param info 属性信息
     * 
     **/
    public int end_enumProperty(vmxICE.PropertyInfoHolder info, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumProperty_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        info.value = new vmxICE.PropertyInfo();
        info.value.__read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param list 属性信息列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumPropertyList(vmxICE.PropertyInfoListHolder list)
    {
        return enumPropertyList(list, null, false);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param list 属性信息列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumPropertyList(vmxICE.PropertyInfoListHolder list, java.util.Map<String, String> __ctx)
    {
        return enumPropertyList(list, __ctx, true);
    }

    private int
    enumPropertyList(vmxICE.PropertyInfoListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumPropertyList");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.enumPropertyList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumPropertyList_name = "enumPropertyList";

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPropertyList()
    {
        return begin_enumPropertyList(null, false, null);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx)
    {
        return begin_enumPropertyList(__ctx, true, null);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(Ice.Callback __cb)
    {
        return begin_enumPropertyList(null, false, __cb);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumPropertyList(__ctx, true, __cb);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(vmxICE.Callback_VMXObject_enumPropertyList __cb)
    {
        return begin_enumPropertyList(null, false, __cb);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_enumPropertyList __cb)
    {
        return begin_enumPropertyList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumPropertyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumPropertyList_name, __cb);
        try
        {
            __result.__prepare(__enumPropertyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 属性信息列表
     * 
     **/
    public int end_enumPropertyList(vmxICE.PropertyInfoListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumPropertyList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = vmxICE.PropertyInfoListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @return 返回对象的ICE ID.
     * 
     **/
    public String
    getID()
    {
        return getID(null, false);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的ICE ID.
     * 
     **/
    public String
    getID(java.util.Map<String, String> __ctx)
    {
        return getID(__ctx, true);
    }

    private String
    getID(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getID");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.getID(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getID_name = "getID";

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getID()
    {
        return begin_getID(null, false, null);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx)
    {
        return begin_getID(__ctx, true, null);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getID(Ice.Callback __cb)
    {
        return begin_getID(null, false, __cb);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getID(__ctx, true, __cb);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getID(vmxICE.Callback_VMXObject_getID __cb)
    {
        return begin_getID(null, false, __cb);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getID __cb)
    {
        return begin_getID(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getID_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getID_name, __cb);
        try
        {
            __result.__prepare(__getID_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的ICE ID.
     * 
     **/
    public String end_getID(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getID_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象名称.
     * 
     * @return 返回对象的名称.
     * 
     **/
    public String
    getName()
    {
        return getName(null, false);
    }

    /**
     * 获取对象名称.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的名称.
     * 
     **/
    public String
    getName(java.util.Map<String, String> __ctx)
    {
        return getName(__ctx, true);
    }

    private String
    getName(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getName");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.getName(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getName_name = "getName";

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getName()
    {
        return begin_getName(null, false, null);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx)
    {
        return begin_getName(__ctx, true, null);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getName(Ice.Callback __cb)
    {
        return begin_getName(null, false, __cb);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getName(__ctx, true, __cb);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getName(vmxICE.Callback_VMXObject_getName __cb)
    {
        return begin_getName(null, false, __cb);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getName __cb)
    {
        return begin_getName(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getName_name, __cb);
        try
        {
            __result.__prepare(__getName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的名称.
     * 
     **/
    public String end_getName(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getName_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象类型特征。
     * 
     * @return 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int
    getObjectType()
    {
        return getObjectType(null, false);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int
    getObjectType(java.util.Map<String, String> __ctx)
    {
        return getObjectType(__ctx, true);
    }

    private int
    getObjectType(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getObjectType");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.getObjectType(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getObjectType_name = "getObjectType";

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getObjectType()
    {
        return begin_getObjectType(null, false, null);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx)
    {
        return begin_getObjectType(__ctx, true, null);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getObjectType(Ice.Callback __cb)
    {
        return begin_getObjectType(null, false, __cb);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getObjectType(__ctx, true, __cb);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getObjectType(vmxICE.Callback_VMXObject_getObjectType __cb)
    {
        return begin_getObjectType(null, false, __cb);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getObjectType __cb)
    {
        return begin_getObjectType(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getObjectType_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getObjectType_name, __cb);
        try
        {
            __result.__prepare(__getObjectType_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int end_getObjectType(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getObjectType_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的所有者。
     * 
     * @return 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String
    getParent()
    {
        return getParent(null, false);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String
    getParent(java.util.Map<String, String> __ctx)
    {
        return getParent(__ctx, true);
    }

    private String
    getParent(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getParent");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.getParent(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getParent_name = "getParent";

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getParent()
    {
        return begin_getParent(null, false, null);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx)
    {
        return begin_getParent(__ctx, true, null);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getParent(Ice.Callback __cb)
    {
        return begin_getParent(null, false, __cb);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getParent(__ctx, true, __cb);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getParent(vmxICE.Callback_VMXObject_getParent __cb)
    {
        return begin_getParent(null, false, __cb);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getParent __cb)
    {
        return begin_getParent(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getParent_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getParent_name, __cb);
        try
        {
            __result.__prepare(__getParent_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String end_getParent(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getParent_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getProperty(String name, Ice.StringHolder value)
    {
        return getProperty(name, value, null, false);
    }

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getProperty(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx)
    {
        return getProperty(name, value, __ctx, true);
    }

    private int
    getProperty(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getProperty");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.getProperty(name, value, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getProperty_name = "getProperty";

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_getProperty(String name)
    {
        return begin_getProperty(name, null, false, null);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx)
    {
        return begin_getProperty(name, __ctx, true, null);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_getProperty(String name, Ice.Callback __cb)
    {
        return begin_getProperty(name, null, false, __cb);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getProperty(name, __ctx, true, __cb);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_getProperty(String name, vmxICE.Callback_VMXObject_getProperty __cb)
    {
        return begin_getProperty(name, null, false, __cb);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getProperty __cb)
    {
        return begin_getProperty(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getProperty_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getProperty_name, __cb);
        try
        {
            __result.__prepare(__getProperty_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param value 属性值
     * 
     **/
    public int end_getProperty(Ice.StringHolder value, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getProperty_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        value.value = __is.readString();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getPropertyList(vmxICE.PropertyListHolder list)
    {
        return getPropertyList(list, null, false);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getPropertyList(vmxICE.PropertyListHolder list, java.util.Map<String, String> __ctx)
    {
        return getPropertyList(list, __ctx, true);
    }

    private int
    getPropertyList(vmxICE.PropertyListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPropertyList");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.getPropertyList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getPropertyList_name = "getPropertyList";

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPropertyList()
    {
        return begin_getPropertyList(null, false, null);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx)
    {
        return begin_getPropertyList(__ctx, true, null);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPropertyList(Ice.Callback __cb)
    {
        return begin_getPropertyList(null, false, __cb);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPropertyList(__ctx, true, __cb);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPropertyList(vmxICE.Callback_VMXObject_getPropertyList __cb)
    {
        return begin_getPropertyList(null, false, __cb);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getPropertyList __cb)
    {
        return begin_getPropertyList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPropertyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPropertyList_name, __cb);
        try
        {
            __result.__prepare(__getPropertyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     **/
    public int end_getPropertyList(vmxICE.PropertyListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPropertyList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = vmxICE.PropertyListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getState(vmxICE.ObjectStateHolder state)
    {
        return getState(state, null, false);
    }

    /**
     * 获取对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getState(vmxICE.ObjectStateHolder state, java.util.Map<String, String> __ctx)
    {
        return getState(state, __ctx, true);
    }

    private int
    getState(vmxICE.ObjectStateHolder state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getState");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.getState(state, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getState_name = "getState";

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getState()
    {
        return begin_getState(null, false, null);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx)
    {
        return begin_getState(__ctx, true, null);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getState(Ice.Callback __cb)
    {
        return begin_getState(null, false, __cb);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getState(__ctx, true, __cb);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getState(vmxICE.Callback_VMXObject_getState __cb)
    {
        return begin_getState(null, false, __cb);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getState __cb)
    {
        return begin_getState(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getState_name, __cb);
        try
        {
            __result.__prepare(__getState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param state 状态值.
     * 
     **/
    public int end_getState(vmxICE.ObjectStateHolder state, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getState_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        state.value = vmxICE.ObjectState.__read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param info 格式化的统计信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getStatistics(vmxICE.StatisticsListHolder info)
    {
        return getStatistics(info, null, false);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param info 格式化的统计信息
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getStatistics(vmxICE.StatisticsListHolder info, java.util.Map<String, String> __ctx)
    {
        return getStatistics(info, __ctx, true);
    }

    private int
    getStatistics(vmxICE.StatisticsListHolder info, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStatistics");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.getStatistics(info, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getStatistics_name = "getStatistics";

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatistics()
    {
        return begin_getStatistics(null, false, null);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx)
    {
        return begin_getStatistics(__ctx, true, null);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatistics(Ice.Callback __cb)
    {
        return begin_getStatistics(null, false, __cb);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getStatistics(__ctx, true, __cb);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatistics(vmxICE.Callback_VMXObject_getStatistics __cb)
    {
        return begin_getStatistics(null, false, __cb);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getStatistics __cb)
    {
        return begin_getStatistics(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getStatistics_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getStatistics_name, __cb);
        try
        {
            __result.__prepare(__getStatistics_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param info 格式化的统计信息
     * 
     **/
    public int end_getStatistics(vmxICE.StatisticsListHolder info, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getStatistics_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        info.value = vmxICE.StatisticsListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    recvMessage(byte[] msg)
    {
        return recvMessage(msg, null, false);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    recvMessage(byte[] msg, java.util.Map<String, String> __ctx)
    {
        return recvMessage(msg, __ctx, true);
    }

    private int
    recvMessage(byte[] msg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("recvMessage");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.recvMessage(msg, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __recvMessage_name = "recvMessage";

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg)
    {
        return begin_recvMessage(msg, null, false, null);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx)
    {
        return begin_recvMessage(msg, __ctx, true, null);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, Ice.Callback __cb)
    {
        return begin_recvMessage(msg, null, false, __cb);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_recvMessage(msg, __ctx, true, __cb);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, vmxICE.Callback_VMXObject_recvMessage __cb)
    {
        return begin_recvMessage(msg, null, false, __cb);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_recvMessage __cb)
    {
        return begin_recvMessage(msg, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__recvMessage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __recvMessage_name, __cb);
        try
        {
            __result.__prepare(__recvMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            vmxICE.ByteSeqHelper.write(__os, msg);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_recvMessage(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __recvMessage_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsg(int msgID, String ObjectID)
    {
        return registerMsg(msgID, ObjectID, null, false);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return registerMsg(msgID, ObjectID, __ctx, true);
    }

    private int
    registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("registerMsg");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.registerMsg(msgID, ObjectID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __registerMsg_name = "registerMsg";

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID)
    {
        return begin_registerMsg(msgID, ObjectID, null, false, null);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return begin_registerMsg(msgID, ObjectID, __ctx, true, null);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, Ice.Callback __cb)
    {
        return begin_registerMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_registerMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, vmxICE.Callback_VMXObject_registerMsg __cb)
    {
        return begin_registerMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_registerMsg __cb)
    {
        return begin_registerMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__registerMsg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __registerMsg_name, __cb);
        try
        {
            __result.__prepare(__registerMsg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_registerMsg(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __registerMsg_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return registerMsgWithLocator(msgID, ObjectID, locator, null, false);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true);
    }

    private int
    registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("registerMsgWithLocator");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.registerMsgWithLocator(msgID, ObjectID, locator, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __registerMsgWithLocator_name = "registerMsgWithLocator";

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, null, false, null);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true, null);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, Ice.Callback __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, vmxICE.Callback_VMXObject_registerMsgWithLocator __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_registerMsgWithLocator __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__registerMsgWithLocator_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __registerMsgWithLocator_name, __cb);
        try
        {
            __result.__prepare(__registerMsgWithLocator_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.writeString(locator);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_registerMsgWithLocator(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __registerMsgWithLocator_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setParent(String parent)
    {
        return setParent(parent, null, false);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setParent(String parent, java.util.Map<String, String> __ctx)
    {
        return setParent(parent, __ctx, true);
    }

    private int
    setParent(String parent, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setParent");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.setParent(parent, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setParent_name = "setParent";

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_setParent(String parent)
    {
        return begin_setParent(parent, null, false, null);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx)
    {
        return begin_setParent(parent, __ctx, true, null);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_setParent(String parent, Ice.Callback __cb)
    {
        return begin_setParent(parent, null, false, __cb);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setParent(parent, __ctx, true, __cb);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_setParent(String parent, vmxICE.Callback_VMXObject_setParent __cb)
    {
        return begin_setParent(parent, null, false, __cb);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_setParent __cb)
    {
        return begin_setParent(parent, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setParent_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setParent_name, __cb);
        try
        {
            __result.__prepare(__setParent_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(parent);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setParent(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setParent_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setProperty(String name, String value)
    {
        return setProperty(name, value, null, false);
    }

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setProperty(String name, String value, java.util.Map<String, String> __ctx)
    {
        return setProperty(name, value, __ctx, true);
    }

    private int
    setProperty(String name, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setProperty");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.setProperty(name, value, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setProperty_name = "setProperty";

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value)
    {
        return begin_setProperty(name, value, null, false, null);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx)
    {
        return begin_setProperty(name, value, __ctx, true, null);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, Ice.Callback __cb)
    {
        return begin_setProperty(name, value, null, false, __cb);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setProperty(name, value, __ctx, true, __cb);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, vmxICE.Callback_VMXObject_setProperty __cb)
    {
        return begin_setProperty(name, value, null, false, __cb);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_setProperty __cb)
    {
        return begin_setProperty(name, value, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setProperty_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setProperty_name, __cb);
        try
        {
            __result.__prepare(__setProperty_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.writeString(value);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setProperty(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setProperty_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list)
    {
        return setPropertyList(list, null, false);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx)
    {
        return setPropertyList(list, __ctx, true);
    }

    private int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPropertyList");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.setPropertyList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setPropertyList_name = "setPropertyList";

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list)
    {
        return begin_setPropertyList(list, null, false, null);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx)
    {
        return begin_setPropertyList(list, __ctx, true, null);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, Ice.Callback __cb)
    {
        return begin_setPropertyList(list, null, false, __cb);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPropertyList(list, __ctx, true, __cb);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, vmxICE.Callback_VMXObject_setPropertyList __cb)
    {
        return begin_setPropertyList(list, null, false, __cb);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_setPropertyList __cb)
    {
        return begin_setPropertyList(list, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setPropertyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPropertyList_name, __cb);
        try
        {
            __result.__prepare(__setPropertyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            vmxICE.PropertyListHelper.write(__os, list);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setPropertyList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setPropertyList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setState(vmxICE.ObjectState state)
    {
        return setState(state, null, false);
    }

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setState(vmxICE.ObjectState state, java.util.Map<String, String> __ctx)
    {
        return setState(state, __ctx, true);
    }

    private int
    setState(vmxICE.ObjectState state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setState");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.setState(state, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setState_name = "setState";

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     **/
    public Ice.AsyncResult begin_setState(vmxICE.ObjectState state)
    {
        return begin_setState(state, null, false, null);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setState(vmxICE.ObjectState state, java.util.Map<String, String> __ctx)
    {
        return begin_setState(state, __ctx, true, null);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     **/
    public Ice.AsyncResult begin_setState(vmxICE.ObjectState state, Ice.Callback __cb)
    {
        return begin_setState(state, null, false, __cb);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setState(vmxICE.ObjectState state, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setState(state, __ctx, true, __cb);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     **/
    public Ice.AsyncResult begin_setState(vmxICE.ObjectState state, vmxICE.Callback_VMXObject_setState __cb)
    {
        return begin_setState(state, null, false, __cb);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setState(vmxICE.ObjectState state, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_setState __cb)
    {
        return begin_setState(state, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setState(vmxICE.ObjectState state, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setState_name, __cb);
        try
        {
            __result.__prepare(__setState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            state.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setState(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setState_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要取消接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsg(int msgID, String ObjectID)
    {
        return unregisterMsg(msgID, ObjectID, null, false);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要取消接收消息的对象的ICE ID。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return unregisterMsg(msgID, ObjectID, __ctx, true);
    }

    private int
    unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("unregisterMsg");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.unregisterMsg(msgID, ObjectID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __unregisterMsg_name = "unregisterMsg";

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID)
    {
        return begin_unregisterMsg(msgID, ObjectID, null, false, null);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return begin_unregisterMsg(msgID, ObjectID, __ctx, true, null);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, Ice.Callback __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, vmxICE.Callback_VMXObject_unregisterMsg __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_unregisterMsg __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__unregisterMsg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __unregisterMsg_name, __cb);
        try
        {
            __result.__prepare(__unregisterMsg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_unregisterMsg(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __unregisterMsg_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return unregisterMsgWithLocator(msgID, ObjectID, locator, null, false);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true);
    }

    private int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("unregisterMsgWithLocator");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __unregisterMsgWithLocator_name = "unregisterMsgWithLocator";

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, null, false, null);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true, null);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, Ice.Callback __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, vmxICE.Callback_VMXObject_unregisterMsgWithLocator __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_unregisterMsgWithLocator __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__unregisterMsgWithLocator_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __unregisterMsgWithLocator_name, __cb);
        try
        {
            __result.__prepare(__unregisterMsgWithLocator_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.writeString(locator);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_unregisterMsgWithLocator(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __unregisterMsgWithLocator_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 关闭客户端对象, 所有的资源都将被释放或者重置. 用于重置客户端对象使其可以连接一个新的终端.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    close()
    {
        return close(null, false);
    }

    /**
     * 关闭客户端对象, 所有的资源都将被释放或者重置. 用于重置客户端对象使其可以连接一个新的终端.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    close(java.util.Map<String, String> __ctx)
    {
        return close(__ctx, true);
    }

    private int
    close(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("close");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.close(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __close_name = "close";

    /**
     * 关闭客户端对象, 所有的资源都将被释放或者重置. 用于重置客户端对象使其可以连接一个新的终端.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_close()
    {
        return begin_close(null, false, null);
    }

    /**
     * 关闭客户端对象, 所有的资源都将被释放或者重置. 用于重置客户端对象使其可以连接一个新的终端.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_close(java.util.Map<String, String> __ctx)
    {
        return begin_close(__ctx, true, null);
    }

    /**
     * 关闭客户端对象, 所有的资源都将被释放或者重置. 用于重置客户端对象使其可以连接一个新的终端.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_close(Ice.Callback __cb)
    {
        return begin_close(null, false, __cb);
    }

    /**
     * 关闭客户端对象, 所有的资源都将被释放或者重置. 用于重置客户端对象使其可以连接一个新的终端.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_close(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_close(__ctx, true, __cb);
    }

    /**
     * 关闭客户端对象, 所有的资源都将被释放或者重置. 用于重置客户端对象使其可以连接一个新的终端.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_close(Callback_Client_close __cb)
    {
        return begin_close(null, false, __cb);
    }

    /**
     * 关闭客户端对象, 所有的资源都将被释放或者重置. 用于重置客户端对象使其可以连接一个新的终端.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_close(java.util.Map<String, String> __ctx, Callback_Client_close __cb)
    {
        return begin_close(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_close(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__close_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __close_name, __cb);
        try
        {
            __result.__prepare(__close_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_close(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __close_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 连接客户端,在调用该函数成功之后,客户端的状态会立即转换为[ConnectStateConnecting],但是该函数成功不代表连接已经成功,调用者需要根据连接成功的消息才能确定该客户端真正建立连接.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    connect()
    {
        return connect(null, false);
    }

    /**
     * 连接客户端,在调用该函数成功之后,客户端的状态会立即转换为[ConnectStateConnecting],但是该函数成功不代表连接已经成功,调用者需要根据连接成功的消息才能确定该客户端真正建立连接.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    connect(java.util.Map<String, String> __ctx)
    {
        return connect(__ctx, true);
    }

    private int
    connect(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("connect");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.connect(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __connect_name = "connect";

    /**
     * 连接客户端,在调用该函数成功之后,客户端的状态会立即转换为[ConnectStateConnecting],但是该函数成功不代表连接已经成功,调用者需要根据连接成功的消息才能确定该客户端真正建立连接.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_connect()
    {
        return begin_connect(null, false, null);
    }

    /**
     * 连接客户端,在调用该函数成功之后,客户端的状态会立即转换为[ConnectStateConnecting],但是该函数成功不代表连接已经成功,调用者需要根据连接成功的消息才能确定该客户端真正建立连接.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_connect(java.util.Map<String, String> __ctx)
    {
        return begin_connect(__ctx, true, null);
    }

    /**
     * 连接客户端,在调用该函数成功之后,客户端的状态会立即转换为[ConnectStateConnecting],但是该函数成功不代表连接已经成功,调用者需要根据连接成功的消息才能确定该客户端真正建立连接.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_connect(Ice.Callback __cb)
    {
        return begin_connect(null, false, __cb);
    }

    /**
     * 连接客户端,在调用该函数成功之后,客户端的状态会立即转换为[ConnectStateConnecting],但是该函数成功不代表连接已经成功,调用者需要根据连接成功的消息才能确定该客户端真正建立连接.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_connect(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_connect(__ctx, true, __cb);
    }

    /**
     * 连接客户端,在调用该函数成功之后,客户端的状态会立即转换为[ConnectStateConnecting],但是该函数成功不代表连接已经成功,调用者需要根据连接成功的消息才能确定该客户端真正建立连接.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_connect(Callback_Client_connect __cb)
    {
        return begin_connect(null, false, __cb);
    }

    /**
     * 连接客户端,在调用该函数成功之后,客户端的状态会立即转换为[ConnectStateConnecting],但是该函数成功不代表连接已经成功,调用者需要根据连接成功的消息才能确定该客户端真正建立连接.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_connect(java.util.Map<String, String> __ctx, Callback_Client_connect __cb)
    {
        return begin_connect(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_connect(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__connect_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __connect_name, __cb);
        try
        {
            __result.__prepare(__connect_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_connect(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __connect_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 中断和客户端的连接,如果客户端在会议中是发言者,调用该接口之前必须取消其发言者身份,否则会导致其它观看发言者的客户端收到的图像静止在挂断之前.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    disconnect()
    {
        return disconnect(null, false);
    }

    /**
     * 中断和客户端的连接,如果客户端在会议中是发言者,调用该接口之前必须取消其发言者身份,否则会导致其它观看发言者的客户端收到的图像静止在挂断之前.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    disconnect(java.util.Map<String, String> __ctx)
    {
        return disconnect(__ctx, true);
    }

    private int
    disconnect(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("disconnect");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.disconnect(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __disconnect_name = "disconnect";

    /**
     * 中断和客户端的连接,如果客户端在会议中是发言者,调用该接口之前必须取消其发言者身份,否则会导致其它观看发言者的客户端收到的图像静止在挂断之前.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_disconnect()
    {
        return begin_disconnect(null, false, null);
    }

    /**
     * 中断和客户端的连接,如果客户端在会议中是发言者,调用该接口之前必须取消其发言者身份,否则会导致其它观看发言者的客户端收到的图像静止在挂断之前.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_disconnect(java.util.Map<String, String> __ctx)
    {
        return begin_disconnect(__ctx, true, null);
    }

    /**
     * 中断和客户端的连接,如果客户端在会议中是发言者,调用该接口之前必须取消其发言者身份,否则会导致其它观看发言者的客户端收到的图像静止在挂断之前.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_disconnect(Ice.Callback __cb)
    {
        return begin_disconnect(null, false, __cb);
    }

    /**
     * 中断和客户端的连接,如果客户端在会议中是发言者,调用该接口之前必须取消其发言者身份,否则会导致其它观看发言者的客户端收到的图像静止在挂断之前.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_disconnect(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_disconnect(__ctx, true, __cb);
    }

    /**
     * 中断和客户端的连接,如果客户端在会议中是发言者,调用该接口之前必须取消其发言者身份,否则会导致其它观看发言者的客户端收到的图像静止在挂断之前.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_disconnect(Callback_Client_disconnect __cb)
    {
        return begin_disconnect(null, false, __cb);
    }

    /**
     * 中断和客户端的连接,如果客户端在会议中是发言者,调用该接口之前必须取消其发言者身份,否则会导致其它观看发言者的客户端收到的图像静止在挂断之前.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_disconnect(java.util.Map<String, String> __ctx, Callback_Client_disconnect __cb)
    {
        return begin_disconnect(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_disconnect(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__disconnect_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __disconnect_name, __cb);
        try
        {
            __result.__prepare(__disconnect_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_disconnect(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __disconnect_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举客户端支持的命令列表.
     * 
     * @param list 命令列表，包括命令名称及说明.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumSupportCommand(CommandListHolder list)
    {
        return enumSupportCommand(list, null, false);
    }

    /**
     * 枚举客户端支持的命令列表.
     * 
     * @param list 命令列表，包括命令名称及说明.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumSupportCommand(CommandListHolder list, java.util.Map<String, String> __ctx)
    {
        return enumSupportCommand(list, __ctx, true);
    }

    private int
    enumSupportCommand(CommandListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumSupportCommand");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.enumSupportCommand(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumSupportCommand_name = "enumSupportCommand";

    /**
     * 枚举客户端支持的命令列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumSupportCommand()
    {
        return begin_enumSupportCommand(null, false, null);
    }

    /**
     * 枚举客户端支持的命令列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumSupportCommand(java.util.Map<String, String> __ctx)
    {
        return begin_enumSupportCommand(__ctx, true, null);
    }

    /**
     * 枚举客户端支持的命令列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumSupportCommand(Ice.Callback __cb)
    {
        return begin_enumSupportCommand(null, false, __cb);
    }

    /**
     * 枚举客户端支持的命令列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumSupportCommand(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumSupportCommand(__ctx, true, __cb);
    }

    /**
     * 枚举客户端支持的命令列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumSupportCommand(Callback_Client_enumSupportCommand __cb)
    {
        return begin_enumSupportCommand(null, false, __cb);
    }

    /**
     * 枚举客户端支持的命令列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumSupportCommand(java.util.Map<String, String> __ctx, Callback_Client_enumSupportCommand __cb)
    {
        return begin_enumSupportCommand(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumSupportCommand(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumSupportCommand_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumSupportCommand_name, __cb);
        try
        {
            __result.__prepare(__enumSupportCommand_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 命令列表，包括命令名称及说明.
     * 
     **/
    public int end_enumSupportCommand(CommandListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumSupportCommand_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = CommandListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 执行客户端支持的某个命令.
     * 
     * @param cmd 命令结构，包含命令的类型及值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    execCommand(Command cmd)
    {
        return execCommand(cmd, null, false);
    }

    /**
     * 执行客户端支持的某个命令.
     * 
     * @param cmd 命令结构，包含命令的类型及值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    execCommand(Command cmd, java.util.Map<String, String> __ctx)
    {
        return execCommand(cmd, __ctx, true);
    }

    private int
    execCommand(Command cmd, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("execCommand");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.execCommand(cmd, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __execCommand_name = "execCommand";

    /**
     * 执行客户端支持的某个命令.
     * 
     * @param __cb The callback object for the operation.
     * @param cmd 命令结构，包含命令的类型及值.
     * 
     **/
    public Ice.AsyncResult begin_execCommand(Command cmd)
    {
        return begin_execCommand(cmd, null, false, null);
    }

    /**
     * 执行客户端支持的某个命令.
     * 
     * @param __cb The callback object for the operation.
     * @param cmd 命令结构，包含命令的类型及值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_execCommand(Command cmd, java.util.Map<String, String> __ctx)
    {
        return begin_execCommand(cmd, __ctx, true, null);
    }

    /**
     * 执行客户端支持的某个命令.
     * 
     * @param __cb The callback object for the operation.
     * @param cmd 命令结构，包含命令的类型及值.
     * 
     **/
    public Ice.AsyncResult begin_execCommand(Command cmd, Ice.Callback __cb)
    {
        return begin_execCommand(cmd, null, false, __cb);
    }

    /**
     * 执行客户端支持的某个命令.
     * 
     * @param __cb The callback object for the operation.
     * @param cmd 命令结构，包含命令的类型及值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_execCommand(Command cmd, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_execCommand(cmd, __ctx, true, __cb);
    }

    /**
     * 执行客户端支持的某个命令.
     * 
     * @param __cb The callback object for the operation.
     * @param cmd 命令结构，包含命令的类型及值.
     * 
     **/
    public Ice.AsyncResult begin_execCommand(Command cmd, Callback_Client_execCommand __cb)
    {
        return begin_execCommand(cmd, null, false, __cb);
    }

    /**
     * 执行客户端支持的某个命令.
     * 
     * @param __cb The callback object for the operation.
     * @param cmd 命令结构，包含命令的类型及值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_execCommand(Command cmd, java.util.Map<String, String> __ctx, Callback_Client_execCommand __cb)
    {
        return begin_execCommand(cmd, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_execCommand(Command cmd, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__execCommand_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __execCommand_name, __cb);
        try
        {
            __result.__prepare(__execCommand_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            cmd.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_execCommand(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __execCommand_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取客户端名称.
     * 
     * @param name 输出客户端名称
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getClientName(Ice.StringHolder name)
    {
        return getClientName(name, null, false);
    }

    /**
     * 获取客户端名称.
     * 
     * @param name 输出客户端名称
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getClientName(Ice.StringHolder name, java.util.Map<String, String> __ctx)
    {
        return getClientName(name, __ctx, true);
    }

    private int
    getClientName(Ice.StringHolder name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getClientName");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.getClientName(name, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getClientName_name = "getClientName";

    /**
     * 获取客户端名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getClientName()
    {
        return begin_getClientName(null, false, null);
    }

    /**
     * 获取客户端名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientName(java.util.Map<String, String> __ctx)
    {
        return begin_getClientName(__ctx, true, null);
    }

    /**
     * 获取客户端名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getClientName(Ice.Callback __cb)
    {
        return begin_getClientName(null, false, __cb);
    }

    /**
     * 获取客户端名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientName(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getClientName(__ctx, true, __cb);
    }

    /**
     * 获取客户端名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getClientName(Callback_Client_getClientName __cb)
    {
        return begin_getClientName(null, false, __cb);
    }

    /**
     * 获取客户端名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientName(java.util.Map<String, String> __ctx, Callback_Client_getClientName __cb)
    {
        return begin_getClientName(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getClientName(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getClientName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getClientName_name, __cb);
        try
        {
            __result.__prepare(__getClientName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param name 输出客户端名称
     * 
     **/
    public int end_getClientName(Ice.StringHolder name, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getClientName_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        name.value = __is.readString();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取客户端的类型.
     * 
     * @param type 客户端的类型，参考[ClientType].
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getClientType(ClientTypeHolder type)
    {
        return getClientType(type, null, false);
    }

    /**
     * 获取客户端的类型.
     * 
     * @param type 客户端的类型，参考[ClientType].
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getClientType(ClientTypeHolder type, java.util.Map<String, String> __ctx)
    {
        return getClientType(type, __ctx, true);
    }

    private int
    getClientType(ClientTypeHolder type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getClientType");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.getClientType(type, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getClientType_name = "getClientType";

    /**
     * 获取客户端的类型.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getClientType()
    {
        return begin_getClientType(null, false, null);
    }

    /**
     * 获取客户端的类型.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientType(java.util.Map<String, String> __ctx)
    {
        return begin_getClientType(__ctx, true, null);
    }

    /**
     * 获取客户端的类型.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getClientType(Ice.Callback __cb)
    {
        return begin_getClientType(null, false, __cb);
    }

    /**
     * 获取客户端的类型.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientType(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getClientType(__ctx, true, __cb);
    }

    /**
     * 获取客户端的类型.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getClientType(Callback_Client_getClientType __cb)
    {
        return begin_getClientType(null, false, __cb);
    }

    /**
     * 获取客户端的类型.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientType(java.util.Map<String, String> __ctx, Callback_Client_getClientType __cb)
    {
        return begin_getClientType(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getClientType(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getClientType_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getClientType_name, __cb);
        try
        {
            __result.__prepare(__getClientType_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param type 客户端的类型，参考[ClientType].
     * 
     **/
    public int end_getClientType(ClientTypeHolder type, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getClientType_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        type.value = ClientType.__read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取客户端的连接模式.
     * 
     * @param mode 连接模式，参考[ClientConnectMode].
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getConnectMode(ClientConnectModeHolder mode)
    {
        return getConnectMode(mode, null, false);
    }

    /**
     * 获取客户端的连接模式.
     * 
     * @param mode 连接模式，参考[ClientConnectMode].
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getConnectMode(ClientConnectModeHolder mode, java.util.Map<String, String> __ctx)
    {
        return getConnectMode(mode, __ctx, true);
    }

    private int
    getConnectMode(ClientConnectModeHolder mode, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getConnectMode");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.getConnectMode(mode, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getConnectMode_name = "getConnectMode";

    /**
     * 获取客户端的连接模式.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConnectMode()
    {
        return begin_getConnectMode(null, false, null);
    }

    /**
     * 获取客户端的连接模式.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConnectMode(java.util.Map<String, String> __ctx)
    {
        return begin_getConnectMode(__ctx, true, null);
    }

    /**
     * 获取客户端的连接模式.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConnectMode(Ice.Callback __cb)
    {
        return begin_getConnectMode(null, false, __cb);
    }

    /**
     * 获取客户端的连接模式.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConnectMode(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConnectMode(__ctx, true, __cb);
    }

    /**
     * 获取客户端的连接模式.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConnectMode(Callback_Client_getConnectMode __cb)
    {
        return begin_getConnectMode(null, false, __cb);
    }

    /**
     * 获取客户端的连接模式.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConnectMode(java.util.Map<String, String> __ctx, Callback_Client_getConnectMode __cb)
    {
        return begin_getConnectMode(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConnectMode(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConnectMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConnectMode_name, __cb);
        try
        {
            __result.__prepare(__getConnectMode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param mode 连接模式，参考[ClientConnectMode].
     * 
     **/
    public int end_getConnectMode(ClientConnectModeHolder mode, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConnectMode_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        mode.value = ClientConnectMode.__read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取客户端的连接状态.
     * 
     * @param state 连接状态，参考枚举[ClientConnectState].
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getConnectState(ClientConnectStateHolder state)
    {
        return getConnectState(state, null, false);
    }

    /**
     * 获取客户端的连接状态.
     * 
     * @param state 连接状态，参考枚举[ClientConnectState].
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getConnectState(ClientConnectStateHolder state, java.util.Map<String, String> __ctx)
    {
        return getConnectState(state, __ctx, true);
    }

    private int
    getConnectState(ClientConnectStateHolder state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getConnectState");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.getConnectState(state, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getConnectState_name = "getConnectState";

    /**
     * 获取客户端的连接状态.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConnectState()
    {
        return begin_getConnectState(null, false, null);
    }

    /**
     * 获取客户端的连接状态.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConnectState(java.util.Map<String, String> __ctx)
    {
        return begin_getConnectState(__ctx, true, null);
    }

    /**
     * 获取客户端的连接状态.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConnectState(Ice.Callback __cb)
    {
        return begin_getConnectState(null, false, __cb);
    }

    /**
     * 获取客户端的连接状态.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConnectState(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConnectState(__ctx, true, __cb);
    }

    /**
     * 获取客户端的连接状态.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConnectState(Callback_Client_getConnectState __cb)
    {
        return begin_getConnectState(null, false, __cb);
    }

    /**
     * 获取客户端的连接状态.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConnectState(java.util.Map<String, String> __ctx, Callback_Client_getConnectState __cb)
    {
        return begin_getConnectState(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConnectState(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConnectState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConnectState_name, __cb);
        try
        {
            __result.__prepare(__getConnectState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param state 连接状态，参考枚举[ClientConnectState].
     * 
     **/
    public int end_getConnectState(ClientConnectStateHolder state, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConnectState_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        state.value = ClientConnectState.__read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置客户端名称.
     * 
     * @param name 客户端名称
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * <ul> [ErrInvalidParameter] - 客户端名称为空. </ul>
     * 
     **/
    public int
    setClientName(String name)
    {
        return setClientName(name, null, false);
    }

    /**
     * 设置客户端名称.
     * 
     * @param name 客户端名称
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * <ul> [ErrInvalidParameter] - 客户端名称为空. </ul>
     * 
     **/
    public int
    setClientName(String name, java.util.Map<String, String> __ctx)
    {
        return setClientName(name, __ctx, true);
    }

    private int
    setClientName(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setClientName");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.setClientName(name, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setClientName_name = "setClientName";

    /**
     * 设置客户端名称.
     * 
     * @param __cb The callback object for the operation.
     * @param name 客户端名称
     * 
     **/
    public Ice.AsyncResult begin_setClientName(String name)
    {
        return begin_setClientName(name, null, false, null);
    }

    /**
     * 设置客户端名称.
     * 
     * @param __cb The callback object for the operation.
     * @param name 客户端名称
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientName(String name, java.util.Map<String, String> __ctx)
    {
        return begin_setClientName(name, __ctx, true, null);
    }

    /**
     * 设置客户端名称.
     * 
     * @param __cb The callback object for the operation.
     * @param name 客户端名称
     * 
     **/
    public Ice.AsyncResult begin_setClientName(String name, Ice.Callback __cb)
    {
        return begin_setClientName(name, null, false, __cb);
    }

    /**
     * 设置客户端名称.
     * 
     * @param __cb The callback object for the operation.
     * @param name 客户端名称
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientName(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setClientName(name, __ctx, true, __cb);
    }

    /**
     * 设置客户端名称.
     * 
     * @param __cb The callback object for the operation.
     * @param name 客户端名称
     * 
     **/
    public Ice.AsyncResult begin_setClientName(String name, Callback_Client_setClientName __cb)
    {
        return begin_setClientName(name, null, false, __cb);
    }

    /**
     * 设置客户端名称.
     * 
     * @param __cb The callback object for the operation.
     * @param name 客户端名称
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientName(String name, java.util.Map<String, String> __ctx, Callback_Client_setClientName __cb)
    {
        return begin_setClientName(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setClientName(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setClientName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setClientName_name, __cb);
        try
        {
            __result.__prepare(__setClientName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * <ul> [ErrInvalidParameter] - 客户端名称为空. </ul>
     * 
     **/
    public int end_setClientName(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setClientName_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置客户端的连接模式.
     * 
     * @param mode 连接模式，参考[ClientConnectMode].
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setConnectMode(ClientConnectMode mode)
    {
        return setConnectMode(mode, null, false);
    }

    /**
     * 设置客户端的连接模式.
     * 
     * @param mode 连接模式，参考[ClientConnectMode].
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setConnectMode(ClientConnectMode mode, java.util.Map<String, String> __ctx)
    {
        return setConnectMode(mode, __ctx, true);
    }

    private int
    setConnectMode(ClientConnectMode mode, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setConnectMode");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.setConnectMode(mode, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setConnectMode_name = "setConnectMode";

    /**
     * 设置客户端的连接模式.
     * 
     * @param __cb The callback object for the operation.
     * @param mode 连接模式，参考[ClientConnectMode].
     * 
     **/
    public Ice.AsyncResult begin_setConnectMode(ClientConnectMode mode)
    {
        return begin_setConnectMode(mode, null, false, null);
    }

    /**
     * 设置客户端的连接模式.
     * 
     * @param __cb The callback object for the operation.
     * @param mode 连接模式，参考[ClientConnectMode].
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setConnectMode(ClientConnectMode mode, java.util.Map<String, String> __ctx)
    {
        return begin_setConnectMode(mode, __ctx, true, null);
    }

    /**
     * 设置客户端的连接模式.
     * 
     * @param __cb The callback object for the operation.
     * @param mode 连接模式，参考[ClientConnectMode].
     * 
     **/
    public Ice.AsyncResult begin_setConnectMode(ClientConnectMode mode, Ice.Callback __cb)
    {
        return begin_setConnectMode(mode, null, false, __cb);
    }

    /**
     * 设置客户端的连接模式.
     * 
     * @param __cb The callback object for the operation.
     * @param mode 连接模式，参考[ClientConnectMode].
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setConnectMode(ClientConnectMode mode, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setConnectMode(mode, __ctx, true, __cb);
    }

    /**
     * 设置客户端的连接模式.
     * 
     * @param __cb The callback object for the operation.
     * @param mode 连接模式，参考[ClientConnectMode].
     * 
     **/
    public Ice.AsyncResult begin_setConnectMode(ClientConnectMode mode, Callback_Client_setConnectMode __cb)
    {
        return begin_setConnectMode(mode, null, false, __cb);
    }

    /**
     * 设置客户端的连接模式.
     * 
     * @param __cb The callback object for the operation.
     * @param mode 连接模式，参考[ClientConnectMode].
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setConnectMode(ClientConnectMode mode, java.util.Map<String, String> __ctx, Callback_Client_setConnectMode __cb)
    {
        return begin_setConnectMode(mode, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setConnectMode(ClientConnectMode mode, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setConnectMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setConnectMode_name, __cb);
        try
        {
            __result.__prepare(__setConnectMode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            mode.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setConnectMode(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setConnectMode_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 重新协商码流的能力集.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    updateMediaCapability()
    {
        return updateMediaCapability(null, false);
    }

    /**
     * 重新协商码流的能力集.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    updateMediaCapability(java.util.Map<String, String> __ctx)
    {
        return updateMediaCapability(__ctx, true);
    }

    private int
    updateMediaCapability(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("updateMediaCapability");
                __delBase = __getDelegate(false);
                _ClientDel __del = (_ClientDel)__delBase;
                return __del.updateMediaCapability(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __updateMediaCapability_name = "updateMediaCapability";

    /**
     * 重新协商码流的能力集.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_updateMediaCapability()
    {
        return begin_updateMediaCapability(null, false, null);
    }

    /**
     * 重新协商码流的能力集.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_updateMediaCapability(java.util.Map<String, String> __ctx)
    {
        return begin_updateMediaCapability(__ctx, true, null);
    }

    /**
     * 重新协商码流的能力集.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_updateMediaCapability(Ice.Callback __cb)
    {
        return begin_updateMediaCapability(null, false, __cb);
    }

    /**
     * 重新协商码流的能力集.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_updateMediaCapability(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateMediaCapability(__ctx, true, __cb);
    }

    /**
     * 重新协商码流的能力集.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_updateMediaCapability(Callback_Client_updateMediaCapability __cb)
    {
        return begin_updateMediaCapability(null, false, __cb);
    }

    /**
     * 重新协商码流的能力集.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_updateMediaCapability(java.util.Map<String, String> __ctx, Callback_Client_updateMediaCapability __cb)
    {
        return begin_updateMediaCapability(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_updateMediaCapability(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateMediaCapability_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __updateMediaCapability_name, __cb);
        try
        {
            __result.__prepare(__updateMediaCapability_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_updateMediaCapability(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __updateMediaCapability_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public static ClientPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        ClientPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ClientPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ClientPrxHelper __h = new ClientPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ClientPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ClientPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ClientPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ClientPrxHelper __h = new ClientPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ClientPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ClientPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ClientPrxHelper __h = new ClientPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ClientPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ClientPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ClientPrxHelper __h = new ClientPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ClientPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        ClientPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ClientPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                ClientPrxHelper __h = new ClientPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ClientPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ClientPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ClientPrxHelper __h = new ClientPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::vmxICE::Resource",
        "::vmxICE::VMXObject",
        "::vmxMP::Client"
    };

    public static String
    ice_staticId()
    {
        return __ids[3];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _ClientDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _ClientDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, ClientPrx v)
    {
        __os.writeProxy(v);
    }

    public static ClientPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ClientPrxHelper result = new ClientPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
