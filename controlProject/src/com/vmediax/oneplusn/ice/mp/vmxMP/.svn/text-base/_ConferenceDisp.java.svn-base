// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_ConferenceDisp.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.vmediax.oneplusn.ice.mp.vmxMP;

/**
 * Conference是会议的抽象化对象.
 * <br><br>属性列表<br>
 * <ul>cycleInterval: 分屏为轮询模式时的轮询时间间隔,单位为秒,默认值为5s. </ul>
 * <ul>name: 会议的名称. </ul>
 * <ul>ID: 会议的ID. </ul>
 * <ul>password: 会议的密码. </ul>
 * 
 **/
public abstract class _ConferenceDisp extends Ice.ObjectImpl implements Conference
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::vmxICE::VMXObject",
        "::vmxMP::Conference"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[2];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[2];
    }

    public static String
    ice_staticId()
    {
        return __ids[2];
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    enumMessageList(vmxICE.MsgDescListHolder msgList)
    {
        return enumMessageList(msgList, null);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param info 属性信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    enumProperty(String name, vmxICE.PropertyInfoHolder info)
    {
        return enumProperty(name, info, null);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param list 属性信息列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    enumPropertyList(vmxICE.PropertyInfoListHolder list)
    {
        return enumPropertyList(list, null);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @return 返回对象的ICE ID.
     * 
     **/
    public final String
    getID()
    {
        return getID(null);
    }

    /**
     * 获取对象名称.
     * 
     * @return 返回对象的名称.
     * 
     **/
    public final String
    getName()
    {
        return getName(null);
    }

    /**
     * 获取对象类型特征。
     * 
     * @return 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public final int
    getObjectType()
    {
        return getObjectType(null);
    }

    /**
     * 获取对象的所有者。
     * 
     * @return 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public final String
    getParent()
    {
        return getParent(null);
    }

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getProperty(String name, Ice.StringHolder value)
    {
        return getProperty(name, value, null);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getPropertyList(vmxICE.PropertyListHolder list)
    {
        return getPropertyList(list, null);
    }

    /**
     * 获取对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getState(vmxICE.ObjectStateHolder state)
    {
        return getState(state, null);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param info 格式化的统计信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getStatistics(vmxICE.StatisticsListHolder info)
    {
        return getStatistics(info, null);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    recvMessage(byte[] msg)
    {
        return recvMessage(msg, null);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    registerMsg(int msgID, String ObjectID)
    {
        return registerMsg(msgID, ObjectID, null);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    registerMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return registerMsgWithLocator(msgID, ObjectID, locator, null);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setParent(String parent)
    {
        return setParent(parent, null);
    }

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setProperty(String name, String value)
    {
        return setProperty(name, value, null);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list)
    {
        return setPropertyList(list, null);
    }

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setState(vmxICE.ObjectState state)
    {
        return setState(state, null);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要取消接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    unregisterMsg(int msgID, String ObjectID)
    {
        return unregisterMsg(msgID, ObjectID, null);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return unregisterMsgWithLocator(msgID, ObjectID, locator, null);
    }

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    addClient(String ID)
    {
        return addClient(ID, null);
    }

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    addClientList(String[] list)
    {
        return addClientList(list, null);
    }

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    addClientListToChairScreen(String[] list)
    {
        return addClientListToChairScreen(list, null);
    }

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    addClientListToSubScreen(int screenID, String[] list)
    {
        return addClientListToSubScreen(screenID, list, null);
    }

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    addClientToChairScreen(String ID)
    {
        return addClientToChairScreen(ID, null);
    }

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端的ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    addClientToSubScreen(int screenID, String ID)
    {
        return addClientToSubScreen(screenID, ID, null);
    }

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param text 文本字符串.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    addTextToSubtitle(int subtitleID, String text)
    {
        return addTextToSubtitle(subtitleID, text, null);
    }

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    connectAllClient()
    {
        return connectAllClient(null);
    }

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    deleteAllSubtitle()
    {
        return deleteAllSubtitle(null);
    }

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    deleteSubtitle(int subtitleID)
    {
        return deleteSubtitle(subtitleID, null);
    }

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    disconnectAllClient()
    {
        return disconnectAllClient(null);
    }

    /**
     * 获取主席客户端的ID.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getChairClientID(Ice.StringHolder ID)
    {
        return getChairClientID(ID, null);
    }

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param clientId 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getClientIDFromSubScreen(int screenID, Ice.StringHolder clientID)
    {
        return getClientIDFromSubScreen(screenID, clientID, null);
    }

    /**
     * 获取会议中的客户端列表.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getClientList(ClientIDListHolder list)
    {
        return getClientList(list, null);
    }

    /**
     * 列出分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getClientListFromSubScreen(int screenID, ClientIDListHolder list)
    {
        return getClientListFromSubScreen(screenID, list, null);
    }

    /**
     * 获取会议的状态.
     * 
     * @param state 会议的状态.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getConferenceState(ConferenceStateHolder state)
    {
        return getConferenceState(state, null);
    }

    /**
     * 获取会议视频的fps.
     * 
     * @param fps The conference video fps.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getConferenceVideoFPS(Ice.IntHolder fps)
    {
        return getConferenceVideoFPS(fps, null);
    }

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getExtScreenSize(Ice.IntHolder width, Ice.IntHolder height)
    {
        return getExtScreenSize(width, height, null);
    }

    /**
     * 获取发言者的ID.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getLecturer(Ice.StringHolder ID)
    {
        return getLecturer(ID, null);
    }

    /**
     * 获取会议的视频画面大小.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getScreenSize(Ice.IntHolder width, Ice.IntHolder height)
    {
        return getScreenSize(width, height, null);
    }

    /**
     * 获取分屏模式.
     * 
     * @param mode 分屏模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getScreenSplitMode(ScreenSplitModeHolder mode)
    {
        return getScreenSplitMode(mode, null);
    }

    /**
     * 获取子屏幕的模式.
     * 
     * @param screenID 某个分屏的索引.
     * @param mode 子屏幕模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getSubScreenMode(int screenID, SubScreenModeHolder mode)
    {
        return getSubScreenMode(screenID, mode, null);
    }

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param direction 游标移动方向.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    moveSubScreenMember(int screenID, SubScreenMoveDirection direction)
    {
        return moveSubScreenMember(screenID, direction, null);
    }

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    moveSubScreenMemberById(int screenID, String ID)
    {
        return moveSubScreenMemberById(screenID, ID, null);
    }

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    muteAllMicrophone(boolean mute)
    {
        return muteAllMicrophone(mute, null);
    }

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    muteAllSpeaker(boolean mute)
    {
        return muteAllSpeaker(mute, null);
    }

    /**
     * 将客户端的麦克静音
     * 
     * @param ID 客户端ID.
     * @param mute 如果为true，则静音，为false，则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    muteClientMicrophone(String ID, boolean mute)
    {
        return muteClientMicrophone(ID, mute, null);
    }

    /**
     * 将客户端的扬声器静音
     * 
     * @param ID 客户端ID.
     * @param mute 如果为true，则静音，为false，则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    muteClientSpeaker(String ID, boolean mute)
    {
        return muteClientSpeaker(ID, mute, null);
    }

    /**
     * 创建一个字幕对象.
     * 
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @param subtitleID 输出创建的字幕对象ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    newSubtitle(SubtitlesStyle style, Ice.IntHolder subtitleID)
    {
        return newSubtitle(style, subtitleID, null);
    }

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    removeAllClient()
    {
        return removeAllClient(null);
    }

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    removeAllClientInChairScreen()
    {
        return removeAllClientInChairScreen(null);
    }

    /**
     * 删除分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    removeAllClientInSubScreen(int screenID)
    {
        return removeAllClientInSubScreen(screenID, null);
    }

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    removeClient(String ID)
    {
        return removeClient(ID, null);
    }

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    removeClientFromChairScreen(String ID)
    {
        return removeClientFromChairScreen(ID, null);
    }

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端的ID，如果ID为空("")，则表示一处该分屏上所有终端.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    removeClientFromSubScreen(int screenID, String ID)
    {
        return removeClientFromSubScreen(screenID, ID, null);
    }

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    removeClientList(String[] list)
    {
        return removeClientList(list, null);
    }

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    removeClientListFromChairScreen(String[] list)
    {
        return removeClientListFromChairScreen(list, null);
    }

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    removeClientListFromSubScreen(int screenID, String[] list)
    {
        return removeClientListFromSubScreen(screenID, list, null);
    }

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param mode 屏幕的模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setChairScreenMode(SubScreenMode mode)
    {
        return setChairScreenMode(mode, null);
    }

    /**
     * 设置一个客户端为主席.
     * 
     * @param ID 客户端ID.
     * @param enable 如果为true则设置为主席，否则取消主席设置.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setClientAsChair(String ID, boolean enable)
    {
        return setClientAsChair(ID, enable, null);
    }

    /**
     * 设置多个客户端为主席.
     * 
     * @param list 客户端ID列表.
     * @param enable 如果为true则设置为主席，否则取消主席设置.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setClientListAsChair(String[] list, boolean enable)
    {
        return setClientListAsChair(list, enable, null);
    }

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param pos 位置枚举.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setClientNamePos(ClientNamePos pos)
    {
        return setClientNamePos(pos, null);
    }

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setClientNameStyle(SubtitlesStyle style)
    {
        return setClientNameStyle(style, null);
    }

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param fps The conference video fps want to set.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setConferenceVideoFPS(int fps)
    {
        return setConferenceVideoFPS(fps, null);
    }

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setExtScreenSize(int width, int height)
    {
        return setExtScreenSize(width, height, null);
    }

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setLecturer(String ID)
    {
        return setLecturer(ID, null);
    }

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setScreenSize(int width, int height)
    {
        return setScreenSize(width, height, null);
    }

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param mode 分屏模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setScreenSplitMode(ScreenSplitMode mode)
    {
        return setScreenSplitMode(mode, null);
    }

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param screenID 某个分屏的索引.
     * @param mode 子屏幕模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setSubScreenMode(int screenID, SubScreenMode mode)
    {
        return setSubScreenMode(screenID, mode, null);
    }

    /**
     * 设置字幕对象的动作.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param action 格式化的字符串，定义在VMix_Subtitles_Move_Attr中, ZDQ should fix it, use ice structure instead.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setSubtitleAction(int subtitleID, SubtitlesAction action)
    {
        return setSubtitleAction(subtitleID, action, null);
    }

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    showAllClientName(boolean show)
    {
        return showAllClientName(show, null);
    }

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param show 如果为true，则显示，否则隐藏.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    showSubtitle(int subtitleID, boolean show)
    {
        return showSubtitle(subtitleID, show, null);
    }

    /**
     * 开始会议.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    start()
    {
        return start(null);
    }

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    stop()
    {
        return stop(null);
    }

    public static Ice.DispatchStatus
    ___getConferenceState(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        ConferenceStateHolder state = new ConferenceStateHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getConferenceState(state, __current);
        state.value.__write(__os);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getScreenSplitMode(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        ScreenSplitModeHolder mode = new ScreenSplitModeHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getScreenSplitMode(mode, __current);
        mode.value.__write(__os);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setScreenSplitMode(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        ScreenSplitMode mode;
        mode = ScreenSplitMode.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setScreenSplitMode(mode, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setSubScreenMode(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int screenID;
        screenID = __is.readInt();
        SubScreenMode mode;
        mode = SubScreenMode.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setSubScreenMode(screenID, mode, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getSubScreenMode(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int screenID;
        screenID = __is.readInt();
        __is.endReadEncaps();
        SubScreenModeHolder mode = new SubScreenModeHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getSubScreenMode(screenID, mode, __current);
        mode.value.__write(__os);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___addClientToSubScreen(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int screenID;
        screenID = __is.readInt();
        String ID;
        ID = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.addClientToSubScreen(screenID, ID, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___removeClientFromSubScreen(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int screenID;
        screenID = __is.readInt();
        String ID;
        ID = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.removeClientFromSubScreen(screenID, ID, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___addClientListToSubScreen(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int screenID;
        screenID = __is.readInt();
        String[] list;
        list = ClientIDListHelper.read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.addClientListToSubScreen(screenID, list, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___removeClientListFromSubScreen(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int screenID;
        screenID = __is.readInt();
        String[] list;
        list = ClientIDListHelper.read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.removeClientListFromSubScreen(screenID, list, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getClientListFromSubScreen(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int screenID;
        screenID = __is.readInt();
        __is.endReadEncaps();
        ClientIDListHolder list = new ClientIDListHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getClientListFromSubScreen(screenID, list, __current);
        ClientIDListHelper.write(__os, list.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getClientIDFromSubScreen(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int screenID;
        screenID = __is.readInt();
        __is.endReadEncaps();
        Ice.StringHolder clientID = new Ice.StringHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getClientIDFromSubScreen(screenID, clientID, __current);
        __os.writeString(clientID.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___removeAllClientInSubScreen(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int screenID;
        screenID = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.removeAllClientInSubScreen(screenID, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___moveSubScreenMember(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int screenID;
        screenID = __is.readInt();
        SubScreenMoveDirection direction;
        direction = SubScreenMoveDirection.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.moveSubScreenMember(screenID, direction, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___moveSubScreenMemberById(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int screenID;
        screenID = __is.readInt();
        String ID;
        ID = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.moveSubScreenMemberById(screenID, ID, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___showAllClientName(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        boolean show;
        show = __is.readBool();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.showAllClientName(show, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setClientNameStyle(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        SubtitlesStyle style;
        style = new SubtitlesStyle();
        style.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setClientNameStyle(style, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setClientNamePos(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        ClientNamePos pos;
        pos = ClientNamePos.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setClientNamePos(pos, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___newSubtitle(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        SubtitlesStyle style;
        style = new SubtitlesStyle();
        style.__read(__is);
        __is.endReadEncaps();
        Ice.IntHolder subtitleID = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.newSubtitle(style, subtitleID, __current);
        __os.writeInt(subtitleID.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___addTextToSubtitle(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int subtitleID;
        subtitleID = __is.readInt();
        String text;
        text = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.addTextToSubtitle(subtitleID, text, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setSubtitleAction(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int subtitleID;
        subtitleID = __is.readInt();
        SubtitlesAction action;
        action = new SubtitlesAction();
        action.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setSubtitleAction(subtitleID, action, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___showSubtitle(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int subtitleID;
        subtitleID = __is.readInt();
        boolean show;
        show = __is.readBool();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.showSubtitle(subtitleID, show, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___deleteSubtitle(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int subtitleID;
        subtitleID = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.deleteSubtitle(subtitleID, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___deleteAllSubtitle(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.deleteAllSubtitle(__current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setScreenSize(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int width;
        width = __is.readInt();
        int height;
        height = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setScreenSize(width, height, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getScreenSize(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder width = new Ice.IntHolder();
        Ice.IntHolder height = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getScreenSize(width, height, __current);
        __os.writeInt(width.value);
        __os.writeInt(height.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setExtScreenSize(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int width;
        width = __is.readInt();
        int height;
        height = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setExtScreenSize(width, height, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getExtScreenSize(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder width = new Ice.IntHolder();
        Ice.IntHolder height = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getExtScreenSize(width, height, __current);
        __os.writeInt(width.value);
        __os.writeInt(height.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setConferenceVideoFPS(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int fps;
        fps = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setConferenceVideoFPS(fps, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getConferenceVideoFPS(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.IntHolder fps = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getConferenceVideoFPS(fps, __current);
        __os.writeInt(fps.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___addClient(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String ID;
        ID = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.addClient(ID, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___removeClient(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String ID;
        ID = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.removeClient(ID, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___addClientList(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String[] list;
        list = ClientIDListHelper.read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.addClientList(list, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___removeClientList(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String[] list;
        list = ClientIDListHelper.read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.removeClientList(list, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___removeAllClient(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.removeAllClient(__current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getClientList(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        ClientIDListHolder list = new ClientIDListHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getClientList(list, __current);
        ClientIDListHelper.write(__os, list.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___disconnectAllClient(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.disconnectAllClient(__current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___connectAllClient(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.connectAllClient(__current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setClientAsChair(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String ID;
        ID = __is.readString();
        boolean enable;
        enable = __is.readBool();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setClientAsChair(ID, enable, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getChairClientID(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.StringHolder ID = new Ice.StringHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getChairClientID(ID, __current);
        __os.writeString(ID.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setClientListAsChair(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String[] list;
        list = ClientIDListHelper.read(__is);
        boolean enable;
        enable = __is.readBool();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setClientListAsChair(list, enable, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setChairScreenMode(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        SubScreenMode mode;
        mode = SubScreenMode.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setChairScreenMode(mode, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___addClientToChairScreen(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String ID;
        ID = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.addClientToChairScreen(ID, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___removeClientFromChairScreen(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String ID;
        ID = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.removeClientFromChairScreen(ID, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___addClientListToChairScreen(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String[] list;
        list = ClientIDListHelper.read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.addClientListToChairScreen(list, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___removeClientListFromChairScreen(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String[] list;
        list = ClientIDListHelper.read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.removeClientListFromChairScreen(list, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___removeAllClientInChairScreen(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.removeAllClientInChairScreen(__current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setLecturer(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String ID;
        ID = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setLecturer(ID, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getLecturer(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.StringHolder ID = new Ice.StringHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getLecturer(ID, __current);
        __os.writeString(ID.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___muteClientMicrophone(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String ID;
        ID = __is.readString();
        boolean mute;
        mute = __is.readBool();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.muteClientMicrophone(ID, mute, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___muteClientSpeaker(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String ID;
        ID = __is.readString();
        boolean mute;
        mute = __is.readBool();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.muteClientSpeaker(ID, mute, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___muteAllSpeaker(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        boolean mute;
        mute = __is.readBool();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.muteAllSpeaker(mute, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___muteAllMicrophone(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        boolean mute;
        mute = __is.readBool();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.muteAllMicrophone(mute, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___start(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.start(__current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___stop(Conference __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.stop(__current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "addClient",
        "addClientList",
        "addClientListToChairScreen",
        "addClientListToSubScreen",
        "addClientToChairScreen",
        "addClientToSubScreen",
        "addTextToSubtitle",
        "connectAllClient",
        "deleteAllSubtitle",
        "deleteSubtitle",
        "disconnectAllClient",
        "enumMessageList",
        "enumProperty",
        "enumPropertyList",
        "getChairClientID",
        "getClientIDFromSubScreen",
        "getClientList",
        "getClientListFromSubScreen",
        "getConferenceState",
        "getConferenceVideoFPS",
        "getExtScreenSize",
        "getID",
        "getLecturer",
        "getName",
        "getObjectType",
        "getParent",
        "getProperty",
        "getPropertyList",
        "getScreenSize",
        "getScreenSplitMode",
        "getState",
        "getStatistics",
        "getSubScreenMode",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "moveSubScreenMember",
        "moveSubScreenMemberById",
        "muteAllMicrophone",
        "muteAllSpeaker",
        "muteClientMicrophone",
        "muteClientSpeaker",
        "newSubtitle",
        "recvMessage",
        "registerMsg",
        "registerMsgWithLocator",
        "removeAllClient",
        "removeAllClientInChairScreen",
        "removeAllClientInSubScreen",
        "removeClient",
        "removeClientFromChairScreen",
        "removeClientFromSubScreen",
        "removeClientList",
        "removeClientListFromChairScreen",
        "removeClientListFromSubScreen",
        "setChairScreenMode",
        "setClientAsChair",
        "setClientListAsChair",
        "setClientNamePos",
        "setClientNameStyle",
        "setConferenceVideoFPS",
        "setExtScreenSize",
        "setLecturer",
        "setParent",
        "setProperty",
        "setPropertyList",
        "setScreenSize",
        "setScreenSplitMode",
        "setState",
        "setSubScreenMode",
        "setSubtitleAction",
        "showAllClientName",
        "showSubtitle",
        "start",
        "stop",
        "unregisterMsg",
        "unregisterMsgWithLocator"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___addClient(this, in, __current);
            }
            case 1:
            {
                return ___addClientList(this, in, __current);
            }
            case 2:
            {
                return ___addClientListToChairScreen(this, in, __current);
            }
            case 3:
            {
                return ___addClientListToSubScreen(this, in, __current);
            }
            case 4:
            {
                return ___addClientToChairScreen(this, in, __current);
            }
            case 5:
            {
                return ___addClientToSubScreen(this, in, __current);
            }
            case 6:
            {
                return ___addTextToSubtitle(this, in, __current);
            }
            case 7:
            {
                return ___connectAllClient(this, in, __current);
            }
            case 8:
            {
                return ___deleteAllSubtitle(this, in, __current);
            }
            case 9:
            {
                return ___deleteSubtitle(this, in, __current);
            }
            case 10:
            {
                return ___disconnectAllClient(this, in, __current);
            }
            case 11:
            {
                return vmxICE._VMXObjectDisp.___enumMessageList(this, in, __current);
            }
            case 12:
            {
                return vmxICE._VMXObjectDisp.___enumProperty(this, in, __current);
            }
            case 13:
            {
                return vmxICE._VMXObjectDisp.___enumPropertyList(this, in, __current);
            }
            case 14:
            {
                return ___getChairClientID(this, in, __current);
            }
            case 15:
            {
                return ___getClientIDFromSubScreen(this, in, __current);
            }
            case 16:
            {
                return ___getClientList(this, in, __current);
            }
            case 17:
            {
                return ___getClientListFromSubScreen(this, in, __current);
            }
            case 18:
            {
                return ___getConferenceState(this, in, __current);
            }
            case 19:
            {
                return ___getConferenceVideoFPS(this, in, __current);
            }
            case 20:
            {
                return ___getExtScreenSize(this, in, __current);
            }
            case 21:
            {
                return vmxICE._VMXObjectDisp.___getID(this, in, __current);
            }
            case 22:
            {
                return ___getLecturer(this, in, __current);
            }
            case 23:
            {
                return vmxICE._VMXObjectDisp.___getName(this, in, __current);
            }
            case 24:
            {
                return vmxICE._VMXObjectDisp.___getObjectType(this, in, __current);
            }
            case 25:
            {
                return vmxICE._VMXObjectDisp.___getParent(this, in, __current);
            }
            case 26:
            {
                return vmxICE._VMXObjectDisp.___getProperty(this, in, __current);
            }
            case 27:
            {
                return vmxICE._VMXObjectDisp.___getPropertyList(this, in, __current);
            }
            case 28:
            {
                return ___getScreenSize(this, in, __current);
            }
            case 29:
            {
                return ___getScreenSplitMode(this, in, __current);
            }
            case 30:
            {
                return vmxICE._VMXObjectDisp.___getState(this, in, __current);
            }
            case 31:
            {
                return vmxICE._VMXObjectDisp.___getStatistics(this, in, __current);
            }
            case 32:
            {
                return ___getSubScreenMode(this, in, __current);
            }
            case 33:
            {
                return ___ice_id(this, in, __current);
            }
            case 34:
            {
                return ___ice_ids(this, in, __current);
            }
            case 35:
            {
                return ___ice_isA(this, in, __current);
            }
            case 36:
            {
                return ___ice_ping(this, in, __current);
            }
            case 37:
            {
                return ___moveSubScreenMember(this, in, __current);
            }
            case 38:
            {
                return ___moveSubScreenMemberById(this, in, __current);
            }
            case 39:
            {
                return ___muteAllMicrophone(this, in, __current);
            }
            case 40:
            {
                return ___muteAllSpeaker(this, in, __current);
            }
            case 41:
            {
                return ___muteClientMicrophone(this, in, __current);
            }
            case 42:
            {
                return ___muteClientSpeaker(this, in, __current);
            }
            case 43:
            {
                return ___newSubtitle(this, in, __current);
            }
            case 44:
            {
                return vmxICE._VMXObjectDisp.___recvMessage(this, in, __current);
            }
            case 45:
            {
                return vmxICE._VMXObjectDisp.___registerMsg(this, in, __current);
            }
            case 46:
            {
                return vmxICE._VMXObjectDisp.___registerMsgWithLocator(this, in, __current);
            }
            case 47:
            {
                return ___removeAllClient(this, in, __current);
            }
            case 48:
            {
                return ___removeAllClientInChairScreen(this, in, __current);
            }
            case 49:
            {
                return ___removeAllClientInSubScreen(this, in, __current);
            }
            case 50:
            {
                return ___removeClient(this, in, __current);
            }
            case 51:
            {
                return ___removeClientFromChairScreen(this, in, __current);
            }
            case 52:
            {
                return ___removeClientFromSubScreen(this, in, __current);
            }
            case 53:
            {
                return ___removeClientList(this, in, __current);
            }
            case 54:
            {
                return ___removeClientListFromChairScreen(this, in, __current);
            }
            case 55:
            {
                return ___removeClientListFromSubScreen(this, in, __current);
            }
            case 56:
            {
                return ___setChairScreenMode(this, in, __current);
            }
            case 57:
            {
                return ___setClientAsChair(this, in, __current);
            }
            case 58:
            {
                return ___setClientListAsChair(this, in, __current);
            }
            case 59:
            {
                return ___setClientNamePos(this, in, __current);
            }
            case 60:
            {
                return ___setClientNameStyle(this, in, __current);
            }
            case 61:
            {
                return ___setConferenceVideoFPS(this, in, __current);
            }
            case 62:
            {
                return ___setExtScreenSize(this, in, __current);
            }
            case 63:
            {
                return ___setLecturer(this, in, __current);
            }
            case 64:
            {
                return vmxICE._VMXObjectDisp.___setParent(this, in, __current);
            }
            case 65:
            {
                return vmxICE._VMXObjectDisp.___setProperty(this, in, __current);
            }
            case 66:
            {
                return vmxICE._VMXObjectDisp.___setPropertyList(this, in, __current);
            }
            case 67:
            {
                return ___setScreenSize(this, in, __current);
            }
            case 68:
            {
                return ___setScreenSplitMode(this, in, __current);
            }
            case 69:
            {
                return vmxICE._VMXObjectDisp.___setState(this, in, __current);
            }
            case 70:
            {
                return ___setSubScreenMode(this, in, __current);
            }
            case 71:
            {
                return ___setSubtitleAction(this, in, __current);
            }
            case 72:
            {
                return ___showAllClientName(this, in, __current);
            }
            case 73:
            {
                return ___showSubtitle(this, in, __current);
            }
            case 74:
            {
                return ___start(this, in, __current);
            }
            case 75:
            {
                return ___stop(this, in, __current);
            }
            case 76:
            {
                return vmxICE._VMXObjectDisp.___unregisterMsg(this, in, __current);
            }
            case 77:
            {
                return vmxICE._VMXObjectDisp.___unregisterMsgWithLocator(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type vmxMP::Conference was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type vmxMP::Conference was not generated with stream support";
        throw ex;
    }
}
