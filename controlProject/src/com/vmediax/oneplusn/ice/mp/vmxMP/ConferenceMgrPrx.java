// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ConferenceMgrPrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.vmediax.oneplusn.ice.mp.vmxMP;

/**
 * ConferenceMgr对象包含多个会议[Conference]对象，是多个会议对象的集合.
 * 
 **/
public interface ConferenceMgrPrx extends vmxICE.ObjectMgrPrx
{
    /**
     * 获取会议对象的句柄.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * 
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public ConferencePrx getConference(int index);

    /**
     * 获取会议对象的句柄.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public ConferencePrx getConference(int index, java.util.Map<String, String> __ctx);

    /**
     * 获取会议对象的句柄.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConference(int index);

    /**
     * 获取会议对象的句柄.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConference(int index, java.util.Map<String, String> __ctx);

    /**
     * 获取会议对象的句柄.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConference(int index, Ice.Callback __cb);

    /**
     * 获取会议对象的句柄.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConference(int index, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取会议对象的句柄.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConference(int index, Callback_ConferenceMgr_getConference __cb);

    /**
     * 获取会议对象的句柄.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConference(int index, java.util.Map<String, String> __ctx, Callback_ConferenceMgr_getConference __cb);

    /**
     * 获取会议对象的句柄.
     * 
     * @param __result The asynchronous result object.
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public ConferencePrx end_getConference(Ice.AsyncResult __result);

    /**
     * 获取会议端对象的ID.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * @param ID 会议对象的ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getConferenceID(int index, Ice.StringHolder ID);

    /**
     * 获取会议端对象的ID.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * @param ID 会议对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getConferenceID(int index, Ice.StringHolder ID, java.util.Map<String, String> __ctx);

    /**
     * 获取会议端对象的ID.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceID(int index);

    /**
     * 获取会议端对象的ID.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceID(int index, java.util.Map<String, String> __ctx);

    /**
     * 获取会议端对象的ID.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceID(int index, Ice.Callback __cb);

    /**
     * 获取会议端对象的ID.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceID(int index, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取会议端对象的ID.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceID(int index, Callback_ConferenceMgr_getConferenceID __cb);

    /**
     * 获取会议端对象的ID.
     * 
     * @param index 用户想要获取的会议对象的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceID(int index, java.util.Map<String, String> __ctx, Callback_ConferenceMgr_getConferenceID __cb);

    /**
     * 获取会议端对象的ID.
     * 
     * @param ID 会议对象的ID.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getConferenceID(Ice.StringHolder ID, Ice.AsyncResult __result);

    /**
     * 获取集合中的会议数量.
     * 
     * @param count 输出参数，输出会议的数量.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getConferenceCount(Ice.IntHolder count);

    /**
     * 获取集合中的会议数量.
     * 
     * @param count 输出参数，输出会议的数量.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getConferenceCount(Ice.IntHolder count, java.util.Map<String, String> __ctx);

    /**
     * 获取集合中的会议数量.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceCount();

    /**
     * 获取集合中的会议数量.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceCount(java.util.Map<String, String> __ctx);

    /**
     * 获取集合中的会议数量.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceCount(Ice.Callback __cb);

    /**
     * 获取集合中的会议数量.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceCount(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取集合中的会议数量.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceCount(Callback_ConferenceMgr_getConferenceCount __cb);

    /**
     * 获取集合中的会议数量.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceCount(java.util.Map<String, String> __ctx, Callback_ConferenceMgr_getConferenceCount __cb);

    /**
     * 获取集合中的会议数量.
     * 
     * @param count 输出参数，输出会议的数量.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getConferenceCount(Ice.IntHolder count, Ice.AsyncResult __result);
}
