// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ConferencePrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.vmediax.oneplusn.ice.mp.vmxMP;

/**
 * Conference是会议的抽象化对象.
 * <br><br>属性列表<br>
 * <ul>cycleInterval: 分屏为轮询模式时的轮询时间间隔,单位为秒,默认值为5s. </ul>
 * <ul>name: 会议的名称. </ul>
 * <ul>ID: 会议的ID. </ul>
 * <ul>password: 会议的密码. </ul>
 * 
 **/
public interface ConferencePrx extends vmxICE.VMXObjectPrx
{
    /**
     * 获取会议的状态.
     * 
     * @param state 会议的状态.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getConferenceState(ConferenceStateHolder state);

    /**
     * 获取会议的状态.
     * 
     * @param state 会议的状态.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getConferenceState(ConferenceStateHolder state, java.util.Map<String, String> __ctx);

    /**
     * 获取会议的状态.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceState();

    /**
     * 获取会议的状态.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceState(java.util.Map<String, String> __ctx);

    /**
     * 获取会议的状态.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceState(Ice.Callback __cb);

    /**
     * 获取会议的状态.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceState(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取会议的状态.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceState(Callback_Conference_getConferenceState __cb);

    /**
     * 获取会议的状态.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceState(java.util.Map<String, String> __ctx, Callback_Conference_getConferenceState __cb);

    /**
     * 获取会议的状态.
     * 
     * @param state 会议的状态.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getConferenceState(ConferenceStateHolder state, Ice.AsyncResult __result);

    /**
     * 获取分屏模式.
     * 
     * @param mode 分屏模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getScreenSplitMode(ScreenSplitModeHolder mode);

    /**
     * 获取分屏模式.
     * 
     * @param mode 分屏模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getScreenSplitMode(ScreenSplitModeHolder mode, java.util.Map<String, String> __ctx);

    /**
     * 获取分屏模式.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScreenSplitMode();

    /**
     * 获取分屏模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScreenSplitMode(java.util.Map<String, String> __ctx);

    /**
     * 获取分屏模式.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScreenSplitMode(Ice.Callback __cb);

    /**
     * 获取分屏模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScreenSplitMode(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取分屏模式.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScreenSplitMode(Callback_Conference_getScreenSplitMode __cb);

    /**
     * 获取分屏模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScreenSplitMode(java.util.Map<String, String> __ctx, Callback_Conference_getScreenSplitMode __cb);

    /**
     * 获取分屏模式.
     * 
     * @param mode 分屏模式.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getScreenSplitMode(ScreenSplitModeHolder mode, Ice.AsyncResult __result);

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param mode 分屏模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setScreenSplitMode(ScreenSplitMode mode);

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param mode 分屏模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setScreenSplitMode(ScreenSplitMode mode, java.util.Map<String, String> __ctx);

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param mode 分屏模式.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setScreenSplitMode(ScreenSplitMode mode);

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param mode 分屏模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setScreenSplitMode(ScreenSplitMode mode, java.util.Map<String, String> __ctx);

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param mode 分屏模式.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setScreenSplitMode(ScreenSplitMode mode, Ice.Callback __cb);

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param mode 分屏模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setScreenSplitMode(ScreenSplitMode mode, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param mode 分屏模式.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setScreenSplitMode(ScreenSplitMode mode, Callback_Conference_setScreenSplitMode __cb);

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param mode 分屏模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setScreenSplitMode(ScreenSplitMode mode, java.util.Map<String, String> __ctx, Callback_Conference_setScreenSplitMode __cb);

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setScreenSplitMode(Ice.AsyncResult __result);

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param screenID 某个分屏的索引.
     * @param mode 子屏幕模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setSubScreenMode(int screenID, SubScreenMode mode);

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param screenID 某个分屏的索引.
     * @param mode 子屏幕模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setSubScreenMode(int screenID, SubScreenMode mode, java.util.Map<String, String> __ctx);

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param screenID 某个分屏的索引.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSubScreenMode(int screenID, SubScreenMode mode);

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSubScreenMode(int screenID, SubScreenMode mode, java.util.Map<String, String> __ctx);

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSubScreenMode(int screenID, SubScreenMode mode, Ice.Callback __cb);

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSubScreenMode(int screenID, SubScreenMode mode, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSubScreenMode(int screenID, SubScreenMode mode, Callback_Conference_setSubScreenMode __cb);

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSubScreenMode(int screenID, SubScreenMode mode, java.util.Map<String, String> __ctx, Callback_Conference_setSubScreenMode __cb);

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setSubScreenMode(Ice.AsyncResult __result);

    /**
     * 获取子屏幕的模式.
     * 
     * @param screenID 某个分屏的索引.
     * @param mode 子屏幕模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getSubScreenMode(int screenID, SubScreenModeHolder mode);

    /**
     * 获取子屏幕的模式.
     * 
     * @param screenID 某个分屏的索引.
     * @param mode 子屏幕模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getSubScreenMode(int screenID, SubScreenModeHolder mode, java.util.Map<String, String> __ctx);

    /**
     * 获取子屏幕的模式.
     * 
     * @param screenID 某个分屏的索引.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSubScreenMode(int screenID);

    /**
     * 获取子屏幕的模式.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSubScreenMode(int screenID, java.util.Map<String, String> __ctx);

    /**
     * 获取子屏幕的模式.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSubScreenMode(int screenID, Ice.Callback __cb);

    /**
     * 获取子屏幕的模式.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSubScreenMode(int screenID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取子屏幕的模式.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSubScreenMode(int screenID, Callback_Conference_getSubScreenMode __cb);

    /**
     * 获取子屏幕的模式.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSubScreenMode(int screenID, java.util.Map<String, String> __ctx, Callback_Conference_getSubScreenMode __cb);

    /**
     * 获取子屏幕的模式.
     * 
     * @param mode 子屏幕模式.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getSubScreenMode(SubScreenModeHolder mode, Ice.AsyncResult __result);

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端的ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addClientToSubScreen(int screenID, String ID);

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addClientToSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx);

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientToSubScreen(int screenID, String ID);

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientToSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx);

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientToSubScreen(int screenID, String ID, Ice.Callback __cb);

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientToSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientToSubScreen(int screenID, String ID, Callback_Conference_addClientToSubScreen __cb);

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientToSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx, Callback_Conference_addClientToSubScreen __cb);

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addClientToSubScreen(Ice.AsyncResult __result);

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端的ID，如果ID为空("")，则表示一处该分屏上所有终端.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeClientFromSubScreen(int screenID, String ID);

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端的ID，如果ID为空("")，则表示一处该分屏上所有终端.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeClientFromSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx);

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientFromSubScreen(int screenID, String ID);

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientFromSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx);

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientFromSubScreen(int screenID, String ID, Ice.Callback __cb);

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientFromSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientFromSubScreen(int screenID, String ID, Callback_Conference_removeClientFromSubScreen __cb);

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientFromSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx, Callback_Conference_removeClientFromSubScreen __cb);

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeClientFromSubScreen(Ice.AsyncResult __result);

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addClientListToSubScreen(int screenID, String[] list);

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addClientListToSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx);

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientListToSubScreen(int screenID, String[] list);

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientListToSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx);

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientListToSubScreen(int screenID, String[] list, Ice.Callback __cb);

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientListToSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientListToSubScreen(int screenID, String[] list, Callback_Conference_addClientListToSubScreen __cb);

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientListToSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx, Callback_Conference_addClientListToSubScreen __cb);

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addClientListToSubScreen(Ice.AsyncResult __result);

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeClientListFromSubScreen(int screenID, String[] list);

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeClientListFromSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx);

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientListFromSubScreen(int screenID, String[] list);

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientListFromSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx);

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientListFromSubScreen(int screenID, String[] list, Ice.Callback __cb);

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientListFromSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientListFromSubScreen(int screenID, String[] list, Callback_Conference_removeClientListFromSubScreen __cb);

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientListFromSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx, Callback_Conference_removeClientListFromSubScreen __cb);

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeClientListFromSubScreen(Ice.AsyncResult __result);

    /**
     * 列出分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getClientListFromSubScreen(int screenID, ClientIDListHolder list);

    /**
     * 列出分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getClientListFromSubScreen(int screenID, ClientIDListHolder list, java.util.Map<String, String> __ctx);

    /**
     * 列出分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientListFromSubScreen(int screenID);

    /**
     * 列出分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientListFromSubScreen(int screenID, java.util.Map<String, String> __ctx);

    /**
     * 列出分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientListFromSubScreen(int screenID, Ice.Callback __cb);

    /**
     * 列出分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientListFromSubScreen(int screenID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 列出分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientListFromSubScreen(int screenID, Callback_Conference_getClientListFromSubScreen __cb);

    /**
     * 列出分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientListFromSubScreen(int screenID, java.util.Map<String, String> __ctx, Callback_Conference_getClientListFromSubScreen __cb);

    /**
     * 列出分屏上所有客户端.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getClientListFromSubScreen(ClientIDListHolder list, Ice.AsyncResult __result);

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param clientId 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getClientIDFromSubScreen(int screenID, Ice.StringHolder clientID);

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param clientId 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getClientIDFromSubScreen(int screenID, Ice.StringHolder clientID, java.util.Map<String, String> __ctx);

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientIDFromSubScreen(int screenID);

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientIDFromSubScreen(int screenID, java.util.Map<String, String> __ctx);

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientIDFromSubScreen(int screenID, Ice.Callback __cb);

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientIDFromSubScreen(int screenID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientIDFromSubScreen(int screenID, Callback_Conference_getClientIDFromSubScreen __cb);

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientIDFromSubScreen(int screenID, java.util.Map<String, String> __ctx, Callback_Conference_getClientIDFromSubScreen __cb);

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getClientIDFromSubScreen(Ice.StringHolder clientID, Ice.AsyncResult __result);

    /**
     * 删除分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeAllClientInSubScreen(int screenID);

    /**
     * 删除分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeAllClientInSubScreen(int screenID, java.util.Map<String, String> __ctx);

    /**
     * 删除分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClientInSubScreen(int screenID);

    /**
     * 删除分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClientInSubScreen(int screenID, java.util.Map<String, String> __ctx);

    /**
     * 删除分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClientInSubScreen(int screenID, Ice.Callback __cb);

    /**
     * 删除分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClientInSubScreen(int screenID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 删除分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClientInSubScreen(int screenID, Callback_Conference_removeAllClientInSubScreen __cb);

    /**
     * 删除分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClientInSubScreen(int screenID, java.util.Map<String, String> __ctx, Callback_Conference_removeAllClientInSubScreen __cb);

    /**
     * 删除分屏上所有客户端.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeAllClientInSubScreen(Ice.AsyncResult __result);

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param direction 游标移动方向.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int moveSubScreenMember(int screenID, SubScreenMoveDirection direction);

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param direction 游标移动方向.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int moveSubScreenMember(int screenID, SubScreenMoveDirection direction, java.util.Map<String, String> __ctx);

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_moveSubScreenMember(int screenID, SubScreenMoveDirection direction);

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_moveSubScreenMember(int screenID, SubScreenMoveDirection direction, java.util.Map<String, String> __ctx);

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_moveSubScreenMember(int screenID, SubScreenMoveDirection direction, Ice.Callback __cb);

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_moveSubScreenMember(int screenID, SubScreenMoveDirection direction, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_moveSubScreenMember(int screenID, SubScreenMoveDirection direction, Callback_Conference_moveSubScreenMember __cb);

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_moveSubScreenMember(int screenID, SubScreenMoveDirection direction, java.util.Map<String, String> __ctx, Callback_Conference_moveSubScreenMember __cb);

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_moveSubScreenMember(Ice.AsyncResult __result);

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int moveSubScreenMemberById(int screenID, String ID);

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int moveSubScreenMemberById(int screenID, String ID, java.util.Map<String, String> __ctx);

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_moveSubScreenMemberById(int screenID, String ID);

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_moveSubScreenMemberById(int screenID, String ID, java.util.Map<String, String> __ctx);

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_moveSubScreenMemberById(int screenID, String ID, Ice.Callback __cb);

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_moveSubScreenMemberById(int screenID, String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_moveSubScreenMemberById(int screenID, String ID, Callback_Conference_moveSubScreenMemberById __cb);

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_moveSubScreenMemberById(int screenID, String ID, java.util.Map<String, String> __ctx, Callback_Conference_moveSubScreenMemberById __cb);

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_moveSubScreenMemberById(Ice.AsyncResult __result);

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int showAllClientName(boolean show);

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int showAllClientName(boolean show, java.util.Map<String, String> __ctx);

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_showAllClientName(boolean show);

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_showAllClientName(boolean show, java.util.Map<String, String> __ctx);

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_showAllClientName(boolean show, Ice.Callback __cb);

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_showAllClientName(boolean show, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_showAllClientName(boolean show, Callback_Conference_showAllClientName __cb);

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_showAllClientName(boolean show, java.util.Map<String, String> __ctx, Callback_Conference_showAllClientName __cb);

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_showAllClientName(Ice.AsyncResult __result);

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setClientNameStyle(SubtitlesStyle style);

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setClientNameStyle(SubtitlesStyle style, java.util.Map<String, String> __ctx);

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientNameStyle(SubtitlesStyle style);

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientNameStyle(SubtitlesStyle style, java.util.Map<String, String> __ctx);

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientNameStyle(SubtitlesStyle style, Ice.Callback __cb);

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientNameStyle(SubtitlesStyle style, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientNameStyle(SubtitlesStyle style, Callback_Conference_setClientNameStyle __cb);

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientNameStyle(SubtitlesStyle style, java.util.Map<String, String> __ctx, Callback_Conference_setClientNameStyle __cb);

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setClientNameStyle(Ice.AsyncResult __result);

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param pos 位置枚举.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setClientNamePos(ClientNamePos pos);

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param pos 位置枚举.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setClientNamePos(ClientNamePos pos, java.util.Map<String, String> __ctx);

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param pos 位置枚举.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientNamePos(ClientNamePos pos);

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param pos 位置枚举.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientNamePos(ClientNamePos pos, java.util.Map<String, String> __ctx);

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param pos 位置枚举.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientNamePos(ClientNamePos pos, Ice.Callback __cb);

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param pos 位置枚举.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientNamePos(ClientNamePos pos, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param pos 位置枚举.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientNamePos(ClientNamePos pos, Callback_Conference_setClientNamePos __cb);

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param pos 位置枚举.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientNamePos(ClientNamePos pos, java.util.Map<String, String> __ctx, Callback_Conference_setClientNamePos __cb);

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setClientNamePos(Ice.AsyncResult __result);

    /**
     * 创建一个字幕对象.
     * 
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @param subtitleID 输出创建的字幕对象ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int newSubtitle(SubtitlesStyle style, Ice.IntHolder subtitleID);

    /**
     * 创建一个字幕对象.
     * 
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @param subtitleID 输出创建的字幕对象ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int newSubtitle(SubtitlesStyle style, Ice.IntHolder subtitleID, java.util.Map<String, String> __ctx);

    /**
     * 创建一个字幕对象.
     * 
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_newSubtitle(SubtitlesStyle style);

    /**
     * 创建一个字幕对象.
     * 
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_newSubtitle(SubtitlesStyle style, java.util.Map<String, String> __ctx);

    /**
     * 创建一个字幕对象.
     * 
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_newSubtitle(SubtitlesStyle style, Ice.Callback __cb);

    /**
     * 创建一个字幕对象.
     * 
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_newSubtitle(SubtitlesStyle style, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 创建一个字幕对象.
     * 
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_newSubtitle(SubtitlesStyle style, Callback_Conference_newSubtitle __cb);

    /**
     * 创建一个字幕对象.
     * 
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_newSubtitle(SubtitlesStyle style, java.util.Map<String, String> __ctx, Callback_Conference_newSubtitle __cb);

    /**
     * 创建一个字幕对象.
     * 
     * @param subtitleID 输出创建的字幕对象ID.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_newSubtitle(Ice.IntHolder subtitleID, Ice.AsyncResult __result);

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param text 文本字符串.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addTextToSubtitle(int subtitleID, String text);

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param text 文本字符串.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addTextToSubtitle(int subtitleID, String text, java.util.Map<String, String> __ctx);

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param subtitleID 字幕对象的ID.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addTextToSubtitle(int subtitleID, String text);

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addTextToSubtitle(int subtitleID, String text, java.util.Map<String, String> __ctx);

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addTextToSubtitle(int subtitleID, String text, Ice.Callback __cb);

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addTextToSubtitle(int subtitleID, String text, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addTextToSubtitle(int subtitleID, String text, Callback_Conference_addTextToSubtitle __cb);

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addTextToSubtitle(int subtitleID, String text, java.util.Map<String, String> __ctx, Callback_Conference_addTextToSubtitle __cb);

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addTextToSubtitle(Ice.AsyncResult __result);

    /**
     * 设置字幕对象的动作.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param action 格式化的字符串，定义在VMix_Subtitles_Move_Attr中, ZDQ should fix it, use ice structure instead.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setSubtitleAction(int subtitleID, SubtitlesAction action);

    /**
     * 设置字幕对象的动作.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param action 格式化的字符串，定义在VMix_Subtitles_Move_Attr中, ZDQ should fix it, use ice structure instead.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setSubtitleAction(int subtitleID, SubtitlesAction action, java.util.Map<String, String> __ctx);

    /**
     * 设置字幕对象的动作.
     * 
     * @param subtitleID 字幕对象的ID.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSubtitleAction(int subtitleID, SubtitlesAction action);

    /**
     * 设置字幕对象的动作.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSubtitleAction(int subtitleID, SubtitlesAction action, java.util.Map<String, String> __ctx);

    /**
     * 设置字幕对象的动作.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSubtitleAction(int subtitleID, SubtitlesAction action, Ice.Callback __cb);

    /**
     * 设置字幕对象的动作.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSubtitleAction(int subtitleID, SubtitlesAction action, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置字幕对象的动作.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSubtitleAction(int subtitleID, SubtitlesAction action, Callback_Conference_setSubtitleAction __cb);

    /**
     * 设置字幕对象的动作.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSubtitleAction(int subtitleID, SubtitlesAction action, java.util.Map<String, String> __ctx, Callback_Conference_setSubtitleAction __cb);

    /**
     * 设置字幕对象的动作.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setSubtitleAction(Ice.AsyncResult __result);

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param show 如果为true，则显示，否则隐藏.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int showSubtitle(int subtitleID, boolean show);

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param show 如果为true，则显示，否则隐藏.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int showSubtitle(int subtitleID, boolean show, java.util.Map<String, String> __ctx);

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_showSubtitle(int subtitleID, boolean show);

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_showSubtitle(int subtitleID, boolean show, java.util.Map<String, String> __ctx);

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_showSubtitle(int subtitleID, boolean show, Ice.Callback __cb);

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_showSubtitle(int subtitleID, boolean show, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_showSubtitle(int subtitleID, boolean show, Callback_Conference_showSubtitle __cb);

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_showSubtitle(int subtitleID, boolean show, java.util.Map<String, String> __ctx, Callback_Conference_showSubtitle __cb);

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_showSubtitle(Ice.AsyncResult __result);

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int deleteSubtitle(int subtitleID);

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int deleteSubtitle(int subtitleID, java.util.Map<String, String> __ctx);

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_deleteSubtitle(int subtitleID);

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_deleteSubtitle(int subtitleID, java.util.Map<String, String> __ctx);

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_deleteSubtitle(int subtitleID, Ice.Callback __cb);

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_deleteSubtitle(int subtitleID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_deleteSubtitle(int subtitleID, Callback_Conference_deleteSubtitle __cb);

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_deleteSubtitle(int subtitleID, java.util.Map<String, String> __ctx, Callback_Conference_deleteSubtitle __cb);

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_deleteSubtitle(Ice.AsyncResult __result);

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int deleteAllSubtitle();

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int deleteAllSubtitle(java.util.Map<String, String> __ctx);

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_deleteAllSubtitle();

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_deleteAllSubtitle(java.util.Map<String, String> __ctx);

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_deleteAllSubtitle(Ice.Callback __cb);

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_deleteAllSubtitle(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_deleteAllSubtitle(Callback_Conference_deleteAllSubtitle __cb);

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_deleteAllSubtitle(java.util.Map<String, String> __ctx, Callback_Conference_deleteAllSubtitle __cb);

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_deleteAllSubtitle(Ice.AsyncResult __result);

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setScreenSize(int width, int height);

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setScreenSize(int width, int height, java.util.Map<String, String> __ctx);

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param width 宽.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setScreenSize(int width, int height);

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param width 宽.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setScreenSize(int width, int height, java.util.Map<String, String> __ctx);

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param width 宽.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setScreenSize(int width, int height, Ice.Callback __cb);

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param width 宽.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setScreenSize(int width, int height, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param width 宽.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setScreenSize(int width, int height, Callback_Conference_setScreenSize __cb);

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param width 宽.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setScreenSize(int width, int height, java.util.Map<String, String> __ctx, Callback_Conference_setScreenSize __cb);

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setScreenSize(Ice.AsyncResult __result);

    /**
     * 获取会议的视频画面大小.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getScreenSize(Ice.IntHolder width, Ice.IntHolder height);

    /**
     * 获取会议的视频画面大小.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getScreenSize(Ice.IntHolder width, Ice.IntHolder height, java.util.Map<String, String> __ctx);

    /**
     * 获取会议的视频画面大小.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScreenSize();

    /**
     * 获取会议的视频画面大小.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScreenSize(java.util.Map<String, String> __ctx);

    /**
     * 获取会议的视频画面大小.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScreenSize(Ice.Callback __cb);

    /**
     * 获取会议的视频画面大小.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScreenSize(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取会议的视频画面大小.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScreenSize(Callback_Conference_getScreenSize __cb);

    /**
     * 获取会议的视频画面大小.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getScreenSize(java.util.Map<String, String> __ctx, Callback_Conference_getScreenSize __cb);

    /**
     * 获取会议的视频画面大小.
     * 
     * @param width 宽.
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getScreenSize(Ice.IntHolder width, Ice.IntHolder height, Ice.AsyncResult __result);

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setExtScreenSize(int width, int height);

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setExtScreenSize(int width, int height, java.util.Map<String, String> __ctx);

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param width 宽.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setExtScreenSize(int width, int height);

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param width 宽.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setExtScreenSize(int width, int height, java.util.Map<String, String> __ctx);

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param width 宽.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setExtScreenSize(int width, int height, Ice.Callback __cb);

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param width 宽.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setExtScreenSize(int width, int height, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param width 宽.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setExtScreenSize(int width, int height, Callback_Conference_setExtScreenSize __cb);

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param width 宽.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setExtScreenSize(int width, int height, java.util.Map<String, String> __ctx, Callback_Conference_setExtScreenSize __cb);

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setExtScreenSize(Ice.AsyncResult __result);

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getExtScreenSize(Ice.IntHolder width, Ice.IntHolder height);

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getExtScreenSize(Ice.IntHolder width, Ice.IntHolder height, java.util.Map<String, String> __ctx);

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getExtScreenSize();

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getExtScreenSize(java.util.Map<String, String> __ctx);

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getExtScreenSize(Ice.Callback __cb);

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getExtScreenSize(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getExtScreenSize(Callback_Conference_getExtScreenSize __cb);

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getExtScreenSize(java.util.Map<String, String> __ctx, Callback_Conference_getExtScreenSize __cb);

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param width 宽.
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getExtScreenSize(Ice.IntHolder width, Ice.IntHolder height, Ice.AsyncResult __result);

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param fps The conference video fps want to set.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setConferenceVideoFPS(int fps);

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param fps The conference video fps want to set.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setConferenceVideoFPS(int fps, java.util.Map<String, String> __ctx);

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param fps The conference video fps want to set.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConferenceVideoFPS(int fps);

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param fps The conference video fps want to set.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConferenceVideoFPS(int fps, java.util.Map<String, String> __ctx);

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param fps The conference video fps want to set.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConferenceVideoFPS(int fps, Ice.Callback __cb);

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param fps The conference video fps want to set.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConferenceVideoFPS(int fps, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param fps The conference video fps want to set.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConferenceVideoFPS(int fps, Callback_Conference_setConferenceVideoFPS __cb);

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param fps The conference video fps want to set.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConferenceVideoFPS(int fps, java.util.Map<String, String> __ctx, Callback_Conference_setConferenceVideoFPS __cb);

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setConferenceVideoFPS(Ice.AsyncResult __result);

    /**
     * 获取会议视频的fps.
     * 
     * @param fps The conference video fps.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getConferenceVideoFPS(Ice.IntHolder fps);

    /**
     * 获取会议视频的fps.
     * 
     * @param fps The conference video fps.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getConferenceVideoFPS(Ice.IntHolder fps, java.util.Map<String, String> __ctx);

    /**
     * 获取会议视频的fps.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceVideoFPS();

    /**
     * 获取会议视频的fps.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceVideoFPS(java.util.Map<String, String> __ctx);

    /**
     * 获取会议视频的fps.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceVideoFPS(Ice.Callback __cb);

    /**
     * 获取会议视频的fps.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceVideoFPS(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取会议视频的fps.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceVideoFPS(Callback_Conference_getConferenceVideoFPS __cb);

    /**
     * 获取会议视频的fps.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConferenceVideoFPS(java.util.Map<String, String> __ctx, Callback_Conference_getConferenceVideoFPS __cb);

    /**
     * 获取会议视频的fps.
     * 
     * @param fps The conference video fps.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getConferenceVideoFPS(Ice.IntHolder fps, Ice.AsyncResult __result);

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addClient(String ID);

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addClient(String ID, java.util.Map<String, String> __ctx);

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param ID 客户端ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClient(String ID);

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClient(String ID, java.util.Map<String, String> __ctx);

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param ID 客户端ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClient(String ID, Ice.Callback __cb);

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClient(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param ID 客户端ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClient(String ID, Callback_Conference_addClient __cb);

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClient(String ID, java.util.Map<String, String> __ctx, Callback_Conference_addClient __cb);

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addClient(Ice.AsyncResult __result);

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeClient(String ID);

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeClient(String ID, java.util.Map<String, String> __ctx);

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param ID 客户端ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClient(String ID);

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClient(String ID, java.util.Map<String, String> __ctx);

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param ID 客户端ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClient(String ID, Ice.Callback __cb);

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClient(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param ID 客户端ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClient(String ID, Callback_Conference_removeClient __cb);

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClient(String ID, java.util.Map<String, String> __ctx, Callback_Conference_removeClient __cb);

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeClient(Ice.AsyncResult __result);

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addClientList(String[] list);

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addClientList(String[] list, java.util.Map<String, String> __ctx);

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param list 客户端ID列表.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientList(String[] list);

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientList(String[] list, java.util.Map<String, String> __ctx);

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientList(String[] list, Ice.Callback __cb);

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientList(String[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientList(String[] list, Callback_Conference_addClientList __cb);

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientList(String[] list, java.util.Map<String, String> __ctx, Callback_Conference_addClientList __cb);

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addClientList(Ice.AsyncResult __result);

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeClientList(String[] list);

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeClientList(String[] list, java.util.Map<String, String> __ctx);

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param list 客户端ID列表.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientList(String[] list);

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientList(String[] list, java.util.Map<String, String> __ctx);

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientList(String[] list, Ice.Callback __cb);

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientList(String[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientList(String[] list, Callback_Conference_removeClientList __cb);

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientList(String[] list, java.util.Map<String, String> __ctx, Callback_Conference_removeClientList __cb);

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeClientList(Ice.AsyncResult __result);

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeAllClient();

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeAllClient(java.util.Map<String, String> __ctx);

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClient();

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClient(java.util.Map<String, String> __ctx);

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClient(Ice.Callback __cb);

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClient(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClient(Callback_Conference_removeAllClient __cb);

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClient(java.util.Map<String, String> __ctx, Callback_Conference_removeAllClient __cb);

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeAllClient(Ice.AsyncResult __result);

    /**
     * 获取会议中的客户端列表.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getClientList(ClientIDListHolder list);

    /**
     * 获取会议中的客户端列表.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getClientList(ClientIDListHolder list, java.util.Map<String, String> __ctx);

    /**
     * 获取会议中的客户端列表.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientList();

    /**
     * 获取会议中的客户端列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientList(java.util.Map<String, String> __ctx);

    /**
     * 获取会议中的客户端列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientList(Ice.Callback __cb);

    /**
     * 获取会议中的客户端列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取会议中的客户端列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientList(Callback_Conference_getClientList __cb);

    /**
     * 获取会议中的客户端列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientList(java.util.Map<String, String> __ctx, Callback_Conference_getClientList __cb);

    /**
     * 获取会议中的客户端列表.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getClientList(ClientIDListHolder list, Ice.AsyncResult __result);

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int disconnectAllClient();

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int disconnectAllClient(java.util.Map<String, String> __ctx);

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_disconnectAllClient();

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_disconnectAllClient(java.util.Map<String, String> __ctx);

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_disconnectAllClient(Ice.Callback __cb);

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_disconnectAllClient(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_disconnectAllClient(Callback_Conference_disconnectAllClient __cb);

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_disconnectAllClient(java.util.Map<String, String> __ctx, Callback_Conference_disconnectAllClient __cb);

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_disconnectAllClient(Ice.AsyncResult __result);

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int connectAllClient();

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int connectAllClient(java.util.Map<String, String> __ctx);

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_connectAllClient();

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_connectAllClient(java.util.Map<String, String> __ctx);

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_connectAllClient(Ice.Callback __cb);

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_connectAllClient(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_connectAllClient(Callback_Conference_connectAllClient __cb);

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_connectAllClient(java.util.Map<String, String> __ctx, Callback_Conference_connectAllClient __cb);

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_connectAllClient(Ice.AsyncResult __result);

    /**
     * 设置一个客户端为主席.
     * 
     * @param ID 客户端ID.
     * @param enable 如果为true则设置为主席，否则取消主席设置.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setClientAsChair(String ID, boolean enable);

    /**
     * 设置一个客户端为主席.
     * 
     * @param ID 客户端ID.
     * @param enable 如果为true则设置为主席，否则取消主席设置.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setClientAsChair(String ID, boolean enable, java.util.Map<String, String> __ctx);

    /**
     * 设置一个客户端为主席.
     * 
     * @param ID 客户端ID.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientAsChair(String ID, boolean enable);

    /**
     * 设置一个客户端为主席.
     * 
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientAsChair(String ID, boolean enable, java.util.Map<String, String> __ctx);

    /**
     * 设置一个客户端为主席.
     * 
     * @param ID 客户端ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientAsChair(String ID, boolean enable, Ice.Callback __cb);

    /**
     * 设置一个客户端为主席.
     * 
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientAsChair(String ID, boolean enable, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置一个客户端为主席.
     * 
     * @param ID 客户端ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientAsChair(String ID, boolean enable, Callback_Conference_setClientAsChair __cb);

    /**
     * 设置一个客户端为主席.
     * 
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientAsChair(String ID, boolean enable, java.util.Map<String, String> __ctx, Callback_Conference_setClientAsChair __cb);

    /**
     * 设置一个客户端为主席.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setClientAsChair(Ice.AsyncResult __result);

    /**
     * 获取主席客户端的ID.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getChairClientID(Ice.StringHolder ID);

    /**
     * 获取主席客户端的ID.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getChairClientID(Ice.StringHolder ID, java.util.Map<String, String> __ctx);

    /**
     * 获取主席客户端的ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChairClientID();

    /**
     * 获取主席客户端的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChairClientID(java.util.Map<String, String> __ctx);

    /**
     * 获取主席客户端的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChairClientID(Ice.Callback __cb);

    /**
     * 获取主席客户端的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChairClientID(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取主席客户端的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChairClientID(Callback_Conference_getChairClientID __cb);

    /**
     * 获取主席客户端的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChairClientID(java.util.Map<String, String> __ctx, Callback_Conference_getChairClientID __cb);

    /**
     * 获取主席客户端的ID.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getChairClientID(Ice.StringHolder ID, Ice.AsyncResult __result);

    /**
     * 设置多个客户端为主席.
     * 
     * @param list 客户端ID列表.
     * @param enable 如果为true则设置为主席，否则取消主席设置.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setClientListAsChair(String[] list, boolean enable);

    /**
     * 设置多个客户端为主席.
     * 
     * @param list 客户端ID列表.
     * @param enable 如果为true则设置为主席，否则取消主席设置.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setClientListAsChair(String[] list, boolean enable, java.util.Map<String, String> __ctx);

    /**
     * 设置多个客户端为主席.
     * 
     * @param list 客户端ID列表.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientListAsChair(String[] list, boolean enable);

    /**
     * 设置多个客户端为主席.
     * 
     * @param list 客户端ID列表.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientListAsChair(String[] list, boolean enable, java.util.Map<String, String> __ctx);

    /**
     * 设置多个客户端为主席.
     * 
     * @param list 客户端ID列表.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientListAsChair(String[] list, boolean enable, Ice.Callback __cb);

    /**
     * 设置多个客户端为主席.
     * 
     * @param list 客户端ID列表.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientListAsChair(String[] list, boolean enable, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置多个客户端为主席.
     * 
     * @param list 客户端ID列表.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientListAsChair(String[] list, boolean enable, Callback_Conference_setClientListAsChair __cb);

    /**
     * 设置多个客户端为主席.
     * 
     * @param list 客户端ID列表.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setClientListAsChair(String[] list, boolean enable, java.util.Map<String, String> __ctx, Callback_Conference_setClientListAsChair __cb);

    /**
     * 设置多个客户端为主席.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setClientListAsChair(Ice.AsyncResult __result);

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param mode 屏幕的模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setChairScreenMode(SubScreenMode mode);

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param mode 屏幕的模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setChairScreenMode(SubScreenMode mode, java.util.Map<String, String> __ctx);

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param mode 屏幕的模式.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setChairScreenMode(SubScreenMode mode);

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param mode 屏幕的模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setChairScreenMode(SubScreenMode mode, java.util.Map<String, String> __ctx);

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param mode 屏幕的模式.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setChairScreenMode(SubScreenMode mode, Ice.Callback __cb);

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param mode 屏幕的模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setChairScreenMode(SubScreenMode mode, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param mode 屏幕的模式.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setChairScreenMode(SubScreenMode mode, Callback_Conference_setChairScreenMode __cb);

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param mode 屏幕的模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setChairScreenMode(SubScreenMode mode, java.util.Map<String, String> __ctx, Callback_Conference_setChairScreenMode __cb);

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setChairScreenMode(Ice.AsyncResult __result);

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addClientToChairScreen(String ID);

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addClientToChairScreen(String ID, java.util.Map<String, String> __ctx);

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param ID 客户端ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientToChairScreen(String ID);

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientToChairScreen(String ID, java.util.Map<String, String> __ctx);

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param ID 客户端ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientToChairScreen(String ID, Ice.Callback __cb);

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientToChairScreen(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param ID 客户端ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientToChairScreen(String ID, Callback_Conference_addClientToChairScreen __cb);

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientToChairScreen(String ID, java.util.Map<String, String> __ctx, Callback_Conference_addClientToChairScreen __cb);

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addClientToChairScreen(Ice.AsyncResult __result);

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeClientFromChairScreen(String ID);

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeClientFromChairScreen(String ID, java.util.Map<String, String> __ctx);

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param ID 客户端ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientFromChairScreen(String ID);

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientFromChairScreen(String ID, java.util.Map<String, String> __ctx);

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param ID 客户端ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientFromChairScreen(String ID, Ice.Callback __cb);

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientFromChairScreen(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param ID 客户端ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientFromChairScreen(String ID, Callback_Conference_removeClientFromChairScreen __cb);

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientFromChairScreen(String ID, java.util.Map<String, String> __ctx, Callback_Conference_removeClientFromChairScreen __cb);

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeClientFromChairScreen(Ice.AsyncResult __result);

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addClientListToChairScreen(String[] list);

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addClientListToChairScreen(String[] list, java.util.Map<String, String> __ctx);

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param list 客户端ID列表.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientListToChairScreen(String[] list);

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientListToChairScreen(String[] list, java.util.Map<String, String> __ctx);

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientListToChairScreen(String[] list, Ice.Callback __cb);

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientListToChairScreen(String[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientListToChairScreen(String[] list, Callback_Conference_addClientListToChairScreen __cb);

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addClientListToChairScreen(String[] list, java.util.Map<String, String> __ctx, Callback_Conference_addClientListToChairScreen __cb);

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addClientListToChairScreen(Ice.AsyncResult __result);

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeClientListFromChairScreen(String[] list);

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeClientListFromChairScreen(String[] list, java.util.Map<String, String> __ctx);

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param list 客户端ID列表.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientListFromChairScreen(String[] list);

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientListFromChairScreen(String[] list, java.util.Map<String, String> __ctx);

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientListFromChairScreen(String[] list, Ice.Callback __cb);

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientListFromChairScreen(String[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientListFromChairScreen(String[] list, Callback_Conference_removeClientListFromChairScreen __cb);

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeClientListFromChairScreen(String[] list, java.util.Map<String, String> __ctx, Callback_Conference_removeClientListFromChairScreen __cb);

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeClientListFromChairScreen(Ice.AsyncResult __result);

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeAllClientInChairScreen();

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeAllClientInChairScreen(java.util.Map<String, String> __ctx);

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClientInChairScreen();

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClientInChairScreen(java.util.Map<String, String> __ctx);

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClientInChairScreen(Ice.Callback __cb);

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClientInChairScreen(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClientInChairScreen(Callback_Conference_removeAllClientInChairScreen __cb);

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeAllClientInChairScreen(java.util.Map<String, String> __ctx, Callback_Conference_removeAllClientInChairScreen __cb);

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeAllClientInChairScreen(Ice.AsyncResult __result);

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setLecturer(String ID);

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setLecturer(String ID, java.util.Map<String, String> __ctx);

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setLecturer(String ID);

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setLecturer(String ID, java.util.Map<String, String> __ctx);

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setLecturer(String ID, Ice.Callback __cb);

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setLecturer(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setLecturer(String ID, Callback_Conference_setLecturer __cb);

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setLecturer(String ID, java.util.Map<String, String> __ctx, Callback_Conference_setLecturer __cb);

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setLecturer(Ice.AsyncResult __result);

    /**
     * 获取发言者的ID.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getLecturer(Ice.StringHolder ID);

    /**
     * 获取发言者的ID.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getLecturer(Ice.StringHolder ID, java.util.Map<String, String> __ctx);

    /**
     * 获取发言者的ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLecturer();

    /**
     * 获取发言者的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLecturer(java.util.Map<String, String> __ctx);

    /**
     * 获取发言者的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLecturer(Ice.Callback __cb);

    /**
     * 获取发言者的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLecturer(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取发言者的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLecturer(Callback_Conference_getLecturer __cb);

    /**
     * 获取发言者的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLecturer(java.util.Map<String, String> __ctx, Callback_Conference_getLecturer __cb);

    /**
     * 获取发言者的ID.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getLecturer(Ice.StringHolder ID, Ice.AsyncResult __result);

    /**
     * 将客户端的麦克静音
     * 
     * @param ID 客户端ID.
     * @param mute 如果为true，则静音，为false，则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int muteClientMicrophone(String ID, boolean mute);

    /**
     * 将客户端的麦克静音
     * 
     * @param ID 客户端ID.
     * @param mute 如果为true，则静音，为false，则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int muteClientMicrophone(String ID, boolean mute, java.util.Map<String, String> __ctx);

    /**
     * 将客户端的麦克静音
     * 
     * @param ID 客户端ID.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteClientMicrophone(String ID, boolean mute);

    /**
     * 将客户端的麦克静音
     * 
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteClientMicrophone(String ID, boolean mute, java.util.Map<String, String> __ctx);

    /**
     * 将客户端的麦克静音
     * 
     * @param ID 客户端ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteClientMicrophone(String ID, boolean mute, Ice.Callback __cb);

    /**
     * 将客户端的麦克静音
     * 
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteClientMicrophone(String ID, boolean mute, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 将客户端的麦克静音
     * 
     * @param ID 客户端ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteClientMicrophone(String ID, boolean mute, Callback_Conference_muteClientMicrophone __cb);

    /**
     * 将客户端的麦克静音
     * 
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteClientMicrophone(String ID, boolean mute, java.util.Map<String, String> __ctx, Callback_Conference_muteClientMicrophone __cb);

    /**
     * 将客户端的麦克静音
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_muteClientMicrophone(Ice.AsyncResult __result);

    /**
     * 将客户端的扬声器静音
     * 
     * @param ID 客户端ID.
     * @param mute 如果为true，则静音，为false，则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int muteClientSpeaker(String ID, boolean mute);

    /**
     * 将客户端的扬声器静音
     * 
     * @param ID 客户端ID.
     * @param mute 如果为true，则静音，为false，则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int muteClientSpeaker(String ID, boolean mute, java.util.Map<String, String> __ctx);

    /**
     * 将客户端的扬声器静音
     * 
     * @param ID 客户端ID.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteClientSpeaker(String ID, boolean mute);

    /**
     * 将客户端的扬声器静音
     * 
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteClientSpeaker(String ID, boolean mute, java.util.Map<String, String> __ctx);

    /**
     * 将客户端的扬声器静音
     * 
     * @param ID 客户端ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteClientSpeaker(String ID, boolean mute, Ice.Callback __cb);

    /**
     * 将客户端的扬声器静音
     * 
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteClientSpeaker(String ID, boolean mute, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 将客户端的扬声器静音
     * 
     * @param ID 客户端ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteClientSpeaker(String ID, boolean mute, Callback_Conference_muteClientSpeaker __cb);

    /**
     * 将客户端的扬声器静音
     * 
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteClientSpeaker(String ID, boolean mute, java.util.Map<String, String> __ctx, Callback_Conference_muteClientSpeaker __cb);

    /**
     * 将客户端的扬声器静音
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_muteClientSpeaker(Ice.AsyncResult __result);

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int muteAllSpeaker(boolean mute);

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int muteAllSpeaker(boolean mute, java.util.Map<String, String> __ctx);

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteAllSpeaker(boolean mute);

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteAllSpeaker(boolean mute, java.util.Map<String, String> __ctx);

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteAllSpeaker(boolean mute, Ice.Callback __cb);

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteAllSpeaker(boolean mute, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteAllSpeaker(boolean mute, Callback_Conference_muteAllSpeaker __cb);

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteAllSpeaker(boolean mute, java.util.Map<String, String> __ctx, Callback_Conference_muteAllSpeaker __cb);

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_muteAllSpeaker(Ice.AsyncResult __result);

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int muteAllMicrophone(boolean mute);

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int muteAllMicrophone(boolean mute, java.util.Map<String, String> __ctx);

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteAllMicrophone(boolean mute);

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteAllMicrophone(boolean mute, java.util.Map<String, String> __ctx);

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteAllMicrophone(boolean mute, Ice.Callback __cb);

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteAllMicrophone(boolean mute, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteAllMicrophone(boolean mute, Callback_Conference_muteAllMicrophone __cb);

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_muteAllMicrophone(boolean mute, java.util.Map<String, String> __ctx, Callback_Conference_muteAllMicrophone __cb);

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_muteAllMicrophone(Ice.AsyncResult __result);

    /**
     * 开始会议.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int start();

    /**
     * 开始会议.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int start(java.util.Map<String, String> __ctx);

    /**
     * 开始会议.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start();

    /**
     * 开始会议.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx);

    /**
     * 开始会议.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(Ice.Callback __cb);

    /**
     * 开始会议.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 开始会议.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(Callback_Conference_start __cb);

    /**
     * 开始会议.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, Callback_Conference_start __cb);

    /**
     * 开始会议.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_start(Ice.AsyncResult __result);

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int stop();

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int stop(java.util.Map<String, String> __ctx);

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop();

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx);

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(Ice.Callback __cb);

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(Callback_Conference_stop __cb);

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, Callback_Conference_stop __cb);

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_stop(Ice.AsyncResult __result);
}
