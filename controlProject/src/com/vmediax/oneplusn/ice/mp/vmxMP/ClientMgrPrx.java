// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ClientMgrPrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.vmediax.oneplusn.ice.mp.vmxMP;

/**
 * ClientMgr对象包含多个客户端对象，是多个客户端对象的集合.
 * 
 **/
public interface ClientMgrPrx extends vmxICE.ObjectMgrPrx
{
    /**
     * 获取客户端对象的句柄.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * 
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public ClientPrx getClient(int index);

    /**
     * 获取客户端对象的句柄.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public ClientPrx getClient(int index, java.util.Map<String, String> __ctx);

    /**
     * 获取客户端对象的句柄.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClient(int index);

    /**
     * 获取客户端对象的句柄.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClient(int index, java.util.Map<String, String> __ctx);

    /**
     * 获取客户端对象的句柄.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClient(int index, Ice.Callback __cb);

    /**
     * 获取客户端对象的句柄.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClient(int index, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取客户端对象的句柄.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClient(int index, Callback_ClientMgr_getClient __cb);

    /**
     * 获取客户端对象的句柄.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClient(int index, java.util.Map<String, String> __ctx, Callback_ClientMgr_getClient __cb);

    /**
     * 获取客户端对象的句柄.
     * 
     * @param __result The asynchronous result object.
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public ClientPrx end_getClient(Ice.AsyncResult __result);

    /**
     * 获取客户端对象的ID.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * @param ID 客户端对象的ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getClientID(int index, Ice.StringHolder ID);

    /**
     * 获取客户端对象的ID.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * @param ID 客户端对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getClientID(int index, Ice.StringHolder ID, java.util.Map<String, String> __ctx);

    /**
     * 获取客户端对象的ID.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientID(int index);

    /**
     * 获取客户端对象的ID.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientID(int index, java.util.Map<String, String> __ctx);

    /**
     * 获取客户端对象的ID.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientID(int index, Ice.Callback __cb);

    /**
     * 获取客户端对象的ID.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientID(int index, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取客户端对象的ID.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientID(int index, Callback_ClientMgr_getClientID __cb);

    /**
     * 获取客户端对象的ID.
     * 
     * @param index 用户想要获取的客户端对象的索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientID(int index, java.util.Map<String, String> __ctx, Callback_ClientMgr_getClientID __cb);

    /**
     * 获取客户端对象的ID.
     * 
     * @param ID 客户端对象的ID.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getClientID(Ice.StringHolder ID, Ice.AsyncResult __result);

    /**
     * 获取集合中的客户端数量.
     * 
     * @param count 输出参数，输出客户端的数量.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getClientCount(Ice.IntHolder count);

    /**
     * 获取集合中的客户端数量.
     * 
     * @param count 输出参数，输出客户端的数量.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getClientCount(Ice.IntHolder count, java.util.Map<String, String> __ctx);

    /**
     * 获取集合中的客户端数量.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientCount();

    /**
     * 获取集合中的客户端数量.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientCount(java.util.Map<String, String> __ctx);

    /**
     * 获取集合中的客户端数量.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientCount(Ice.Callback __cb);

    /**
     * 获取集合中的客户端数量.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientCount(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取集合中的客户端数量.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientCount(Callback_ClientMgr_getClientCount __cb);

    /**
     * 获取集合中的客户端数量.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientCount(java.util.Map<String, String> __ctx, Callback_ClientMgr_getClientCount __cb);

    /**
     * 获取集合中的客户端数量.
     * 
     * @param count 输出参数，输出客户端的数量.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getClientCount(Ice.IntHolder count, Ice.AsyncResult __result);

    /**
     * 获取集合中包含的客户端的类型.
     * 
     * @param type 客户端的类型，参考[ClientType].
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getClientType(ClientTypeHolder type);

    /**
     * 获取集合中包含的客户端的类型.
     * 
     * @param type 客户端的类型，参考[ClientType].
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getClientType(ClientTypeHolder type, java.util.Map<String, String> __ctx);

    /**
     * 获取集合中包含的客户端的类型.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientType();

    /**
     * 获取集合中包含的客户端的类型.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientType(java.util.Map<String, String> __ctx);

    /**
     * 获取集合中包含的客户端的类型.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientType(Ice.Callback __cb);

    /**
     * 获取集合中包含的客户端的类型.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientType(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取集合中包含的客户端的类型.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientType(Callback_ClientMgr_getClientType __cb);

    /**
     * 获取集合中包含的客户端的类型.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getClientType(java.util.Map<String, String> __ctx, Callback_ClientMgr_getClientType __cb);

    /**
     * 获取集合中包含的客户端的类型.
     * 
     * @param type 客户端的类型，参考[ClientType].
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getClientType(ClientTypeHolder type, Ice.AsyncResult __result);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param ID 客户端的ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getIdleClient(Ice.StringHolder ID);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param ID 客户端的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getIdleClient(Ice.StringHolder ID, java.util.Map<String, String> __ctx);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleClient();

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleClient(java.util.Map<String, String> __ctx);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleClient(Ice.Callback __cb);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleClient(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleClient(Callback_ClientMgr_getIdleClient __cb);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleClient(java.util.Map<String, String> __ctx, Callback_ClientMgr_getIdleClient __cb);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param ID 客户端的ID.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getIdleClient(Ice.StringHolder ID, Ice.AsyncResult __result);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param num 用户想要获取的客户端对象的数量.
     * @param list 客户端的ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getIdleClientList(int num, ClientIDListHolder list);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param num 用户想要获取的客户端对象的数量.
     * @param list 客户端的ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getIdleClientList(int num, ClientIDListHolder list, java.util.Map<String, String> __ctx);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param num 用户想要获取的客户端对象的数量.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleClientList(int num);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param num 用户想要获取的客户端对象的数量.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleClientList(int num, java.util.Map<String, String> __ctx);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param num 用户想要获取的客户端对象的数量.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleClientList(int num, Ice.Callback __cb);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param num 用户想要获取的客户端对象的数量.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleClientList(int num, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param num 用户想要获取的客户端对象的数量.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleClientList(int num, Callback_ClientMgr_getIdleClientList __cb);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param num 用户想要获取的客户端对象的数量.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleClientList(int num, java.util.Map<String, String> __ctx, Callback_ClientMgr_getIdleClientList __cb);

    /**
     * 获取空闲的客户端对象的ID.
     * 
     * @param list 客户端的ID列表.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getIdleClientList(ClientIDListHolder list, Ice.AsyncResult __result);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param ID 用户想要释放的客户端对象的ID.
     * 
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public int freeClient(String ID);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param ID 用户想要释放的客户端对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public int freeClient(String ID, java.util.Map<String, String> __ctx);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param ID 用户想要释放的客户端对象的ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeClient(String ID);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param ID 用户想要释放的客户端对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeClient(String ID, java.util.Map<String, String> __ctx);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param ID 用户想要释放的客户端对象的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeClient(String ID, Ice.Callback __cb);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param ID 用户想要释放的客户端对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeClient(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param ID 用户想要释放的客户端对象的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeClient(String ID, Callback_ClientMgr_freeClient __cb);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param ID 用户想要释放的客户端对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeClient(String ID, java.util.Map<String, String> __ctx, Callback_ClientMgr_freeClient __cb);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param __result The asynchronous result object.
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public int end_freeClient(Ice.AsyncResult __result);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param list 用户想要释放的客户端对象的ID列表.
     * 
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public int freeClientList(String[] list);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param list 用户想要释放的客户端对象的ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public int freeClientList(String[] list, java.util.Map<String, String> __ctx);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param list 用户想要释放的客户端对象的ID列表.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeClientList(String[] list);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param list 用户想要释放的客户端对象的ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeClientList(String[] list, java.util.Map<String, String> __ctx);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param list 用户想要释放的客户端对象的ID列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeClientList(String[] list, Ice.Callback __cb);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param list 用户想要释放的客户端对象的ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeClientList(String[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param list 用户想要释放的客户端对象的ID列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeClientList(String[] list, Callback_ClientMgr_freeClientList __cb);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param list 用户想要释放的客户端对象的ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeClientList(String[] list, java.util.Map<String, String> __ctx, Callback_ClientMgr_freeClientList __cb);

    /**
     * 释放客户端对象为空闲客户端.
     * 
     * @param __result The asynchronous result object.
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public int end_freeClientList(Ice.AsyncResult __result);
}
