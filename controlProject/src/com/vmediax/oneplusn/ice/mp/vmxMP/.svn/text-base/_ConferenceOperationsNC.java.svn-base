// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_ConferenceOperationsNC.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.vmediax.oneplusn.ice.mp.vmxMP;

/**
 * Conference是会议的抽象化对象.
 * <br><br>属性列表<br>
 * <ul>cycleInterval: 分屏为轮询模式时的轮询时间间隔,单位为秒,默认值为5s. </ul>
 * <ul>name: 会议的名称. </ul>
 * <ul>ID: 会议的ID. </ul>
 * <ul>password: 会议的密码. </ul>
 * 
 **/
public interface _ConferenceOperationsNC extends vmxICE._VMXObjectOperationsNC
{
    /**
     * 获取会议的状态.
     * 
     * @param state 会议的状态.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int getConferenceState(ConferenceStateHolder state);

    /**
     * 获取分屏模式.
     * 
     * @param mode 分屏模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int getScreenSplitMode(ScreenSplitModeHolder mode);

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param mode 分屏模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int setScreenSplitMode(ScreenSplitMode mode);

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param screenID 某个分屏的索引.
     * @param mode 子屏幕模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int setSubScreenMode(int screenID, SubScreenMode mode);

    /**
     * 获取子屏幕的模式.
     * 
     * @param screenID 某个分屏的索引.
     * @param mode 子屏幕模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int getSubScreenMode(int screenID, SubScreenModeHolder mode);

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端的ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int addClientToSubScreen(int screenID, String ID);

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端的ID，如果ID为空("")，则表示一处该分屏上所有终端.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int removeClientFromSubScreen(int screenID, String ID);

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int addClientListToSubScreen(int screenID, String[] list);

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int removeClientListFromSubScreen(int screenID, String[] list);

    /**
     * 列出分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int getClientListFromSubScreen(int screenID, ClientIDListHolder list);

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param clientId 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int getClientIDFromSubScreen(int screenID, Ice.StringHolder clientID);

    /**
     * 删除分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int removeAllClientInSubScreen(int screenID);

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param direction 游标移动方向.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int moveSubScreenMember(int screenID, SubScreenMoveDirection direction);

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int moveSubScreenMemberById(int screenID, String ID);

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int showAllClientName(boolean show);

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int setClientNameStyle(SubtitlesStyle style);

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param pos 位置枚举.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int setClientNamePos(ClientNamePos pos);

    /**
     * 创建一个字幕对象.
     * 
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @param subtitleID 输出创建的字幕对象ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int newSubtitle(SubtitlesStyle style, Ice.IntHolder subtitleID);

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param text 文本字符串.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int addTextToSubtitle(int subtitleID, String text);

    /**
     * 设置字幕对象的动作.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param action 格式化的字符串，定义在VMix_Subtitles_Move_Attr中, ZDQ should fix it, use ice structure instead.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int setSubtitleAction(int subtitleID, SubtitlesAction action);

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param show 如果为true，则显示，否则隐藏.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int showSubtitle(int subtitleID, boolean show);

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int deleteSubtitle(int subtitleID);

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int deleteAllSubtitle();

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int setScreenSize(int width, int height);

    /**
     * 获取会议的视频画面大小.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int getScreenSize(Ice.IntHolder width, Ice.IntHolder height);

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int setExtScreenSize(int width, int height);

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int getExtScreenSize(Ice.IntHolder width, Ice.IntHolder height);

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param fps The conference video fps want to set.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int setConferenceVideoFPS(int fps);

    /**
     * 获取会议视频的fps.
     * 
     * @param fps The conference video fps.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int getConferenceVideoFPS(Ice.IntHolder fps);

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int addClient(String ID);

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int removeClient(String ID);

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int addClientList(String[] list);

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int removeClientList(String[] list);

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int removeAllClient();

    /**
     * 获取会议中的客户端列表.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int getClientList(ClientIDListHolder list);

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int disconnectAllClient();

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int connectAllClient();

    /**
     * 设置一个客户端为主席.
     * 
     * @param ID 客户端ID.
     * @param enable 如果为true则设置为主席，否则取消主席设置.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int setClientAsChair(String ID, boolean enable);

    /**
     * 获取主席客户端的ID.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int getChairClientID(Ice.StringHolder ID);

    /**
     * 设置多个客户端为主席.
     * 
     * @param list 客户端ID列表.
     * @param enable 如果为true则设置为主席，否则取消主席设置.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int setClientListAsChair(String[] list, boolean enable);

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param mode 屏幕的模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int setChairScreenMode(SubScreenMode mode);

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int addClientToChairScreen(String ID);

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int removeClientFromChairScreen(String ID);

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int addClientListToChairScreen(String[] list);

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int removeClientListFromChairScreen(String[] list);

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int removeAllClientInChairScreen();

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int setLecturer(String ID);

    /**
     * 获取发言者的ID.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int getLecturer(Ice.StringHolder ID);

    /**
     * 将客户端的麦克静音
     * 
     * @param ID 客户端ID.
     * @param mute 如果为true，则静音，为false，则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int muteClientMicrophone(String ID, boolean mute);

    /**
     * 将客户端的扬声器静音
     * 
     * @param ID 客户端ID.
     * @param mute 如果为true，则静音，为false，则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int muteClientSpeaker(String ID, boolean mute);

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int muteAllSpeaker(boolean mute);

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int muteAllMicrophone(boolean mute);

    /**
     * 开始会议.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int start();

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    int stop();
}
