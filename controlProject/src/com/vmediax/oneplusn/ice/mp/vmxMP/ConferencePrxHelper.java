// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ConferencePrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.vmediax.oneplusn.ice.mp.vmxMP;

/**
 * Conference是会议的抽象化对象.
 * <br><br>属性列表<br>
 * <ul>cycleInterval: 分屏为轮询模式时的轮询时间间隔,单位为秒,默认值为5s. </ul>
 * <ul>name: 会议的名称. </ul>
 * <ul>ID: 会议的ID. </ul>
 * <ul>password: 会议的密码. </ul>
 * 
 **/
public final class ConferencePrxHelper extends Ice.ObjectPrxHelperBase implements ConferencePrx
{
    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumMessageList(vmxICE.MsgDescListHolder msgList)
    {
        return enumMessageList(msgList, null, false);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumMessageList(vmxICE.MsgDescListHolder msgList, java.util.Map<String, String> __ctx)
    {
        return enumMessageList(msgList, __ctx, true);
    }

    private int
    enumMessageList(vmxICE.MsgDescListHolder msgList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumMessageList");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.enumMessageList(msgList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumMessageList_name = "enumMessageList";

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumMessageList()
    {
        return begin_enumMessageList(null, false, null);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx)
    {
        return begin_enumMessageList(__ctx, true, null);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumMessageList(Ice.Callback __cb)
    {
        return begin_enumMessageList(null, false, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumMessageList(__ctx, true, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumMessageList(vmxICE.Callback_VMXObject_enumMessageList __cb)
    {
        return begin_enumMessageList(null, false, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_enumMessageList __cb)
    {
        return begin_enumMessageList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumMessageList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumMessageList_name, __cb);
        try
        {
            __result.__prepare(__enumMessageList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     **/
    public int end_enumMessageList(vmxICE.MsgDescListHolder msgList, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumMessageList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        msgList.value = vmxICE.MsgDescListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param info 属性信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumProperty(String name, vmxICE.PropertyInfoHolder info)
    {
        return enumProperty(name, info, null, false);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param info 属性信息
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumProperty(String name, vmxICE.PropertyInfoHolder info, java.util.Map<String, String> __ctx)
    {
        return enumProperty(name, info, __ctx, true);
    }

    private int
    enumProperty(String name, vmxICE.PropertyInfoHolder info, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumProperty");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.enumProperty(name, info, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumProperty_name = "enumProperty";

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_enumProperty(String name)
    {
        return begin_enumProperty(name, null, false, null);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx)
    {
        return begin_enumProperty(name, __ctx, true, null);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_enumProperty(String name, Ice.Callback __cb)
    {
        return begin_enumProperty(name, null, false, __cb);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumProperty(name, __ctx, true, __cb);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_enumProperty(String name, vmxICE.Callback_VMXObject_enumProperty __cb)
    {
        return begin_enumProperty(name, null, false, __cb);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_enumProperty __cb)
    {
        return begin_enumProperty(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumProperty_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumProperty_name, __cb);
        try
        {
            __result.__prepare(__enumProperty_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param info 属性信息
     * 
     **/
    public int end_enumProperty(vmxICE.PropertyInfoHolder info, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumProperty_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        info.value = new vmxICE.PropertyInfo();
        info.value.__read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param list 属性信息列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumPropertyList(vmxICE.PropertyInfoListHolder list)
    {
        return enumPropertyList(list, null, false);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param list 属性信息列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumPropertyList(vmxICE.PropertyInfoListHolder list, java.util.Map<String, String> __ctx)
    {
        return enumPropertyList(list, __ctx, true);
    }

    private int
    enumPropertyList(vmxICE.PropertyInfoListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumPropertyList");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.enumPropertyList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumPropertyList_name = "enumPropertyList";

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPropertyList()
    {
        return begin_enumPropertyList(null, false, null);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx)
    {
        return begin_enumPropertyList(__ctx, true, null);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(Ice.Callback __cb)
    {
        return begin_enumPropertyList(null, false, __cb);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumPropertyList(__ctx, true, __cb);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(vmxICE.Callback_VMXObject_enumPropertyList __cb)
    {
        return begin_enumPropertyList(null, false, __cb);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_enumPropertyList __cb)
    {
        return begin_enumPropertyList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumPropertyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumPropertyList_name, __cb);
        try
        {
            __result.__prepare(__enumPropertyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 属性信息列表
     * 
     **/
    public int end_enumPropertyList(vmxICE.PropertyInfoListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumPropertyList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = vmxICE.PropertyInfoListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @return 返回对象的ICE ID.
     * 
     **/
    public String
    getID()
    {
        return getID(null, false);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的ICE ID.
     * 
     **/
    public String
    getID(java.util.Map<String, String> __ctx)
    {
        return getID(__ctx, true);
    }

    private String
    getID(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getID");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getID(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getID_name = "getID";

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getID()
    {
        return begin_getID(null, false, null);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx)
    {
        return begin_getID(__ctx, true, null);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getID(Ice.Callback __cb)
    {
        return begin_getID(null, false, __cb);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getID(__ctx, true, __cb);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getID(vmxICE.Callback_VMXObject_getID __cb)
    {
        return begin_getID(null, false, __cb);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getID __cb)
    {
        return begin_getID(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getID_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getID_name, __cb);
        try
        {
            __result.__prepare(__getID_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的ICE ID.
     * 
     **/
    public String end_getID(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getID_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象名称.
     * 
     * @return 返回对象的名称.
     * 
     **/
    public String
    getName()
    {
        return getName(null, false);
    }

    /**
     * 获取对象名称.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的名称.
     * 
     **/
    public String
    getName(java.util.Map<String, String> __ctx)
    {
        return getName(__ctx, true);
    }

    private String
    getName(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getName");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getName(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getName_name = "getName";

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getName()
    {
        return begin_getName(null, false, null);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx)
    {
        return begin_getName(__ctx, true, null);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getName(Ice.Callback __cb)
    {
        return begin_getName(null, false, __cb);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getName(__ctx, true, __cb);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getName(vmxICE.Callback_VMXObject_getName __cb)
    {
        return begin_getName(null, false, __cb);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getName __cb)
    {
        return begin_getName(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getName_name, __cb);
        try
        {
            __result.__prepare(__getName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的名称.
     * 
     **/
    public String end_getName(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getName_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象类型特征。
     * 
     * @return 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int
    getObjectType()
    {
        return getObjectType(null, false);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int
    getObjectType(java.util.Map<String, String> __ctx)
    {
        return getObjectType(__ctx, true);
    }

    private int
    getObjectType(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getObjectType");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getObjectType(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getObjectType_name = "getObjectType";

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getObjectType()
    {
        return begin_getObjectType(null, false, null);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx)
    {
        return begin_getObjectType(__ctx, true, null);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getObjectType(Ice.Callback __cb)
    {
        return begin_getObjectType(null, false, __cb);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getObjectType(__ctx, true, __cb);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getObjectType(vmxICE.Callback_VMXObject_getObjectType __cb)
    {
        return begin_getObjectType(null, false, __cb);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getObjectType __cb)
    {
        return begin_getObjectType(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getObjectType_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getObjectType_name, __cb);
        try
        {
            __result.__prepare(__getObjectType_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int end_getObjectType(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getObjectType_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的所有者。
     * 
     * @return 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String
    getParent()
    {
        return getParent(null, false);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String
    getParent(java.util.Map<String, String> __ctx)
    {
        return getParent(__ctx, true);
    }

    private String
    getParent(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getParent");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getParent(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getParent_name = "getParent";

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getParent()
    {
        return begin_getParent(null, false, null);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx)
    {
        return begin_getParent(__ctx, true, null);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getParent(Ice.Callback __cb)
    {
        return begin_getParent(null, false, __cb);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getParent(__ctx, true, __cb);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getParent(vmxICE.Callback_VMXObject_getParent __cb)
    {
        return begin_getParent(null, false, __cb);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getParent __cb)
    {
        return begin_getParent(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getParent_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getParent_name, __cb);
        try
        {
            __result.__prepare(__getParent_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String end_getParent(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getParent_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getProperty(String name, Ice.StringHolder value)
    {
        return getProperty(name, value, null, false);
    }

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getProperty(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx)
    {
        return getProperty(name, value, __ctx, true);
    }

    private int
    getProperty(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getProperty");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getProperty(name, value, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getProperty_name = "getProperty";

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_getProperty(String name)
    {
        return begin_getProperty(name, null, false, null);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx)
    {
        return begin_getProperty(name, __ctx, true, null);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_getProperty(String name, Ice.Callback __cb)
    {
        return begin_getProperty(name, null, false, __cb);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getProperty(name, __ctx, true, __cb);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_getProperty(String name, vmxICE.Callback_VMXObject_getProperty __cb)
    {
        return begin_getProperty(name, null, false, __cb);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getProperty __cb)
    {
        return begin_getProperty(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getProperty_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getProperty_name, __cb);
        try
        {
            __result.__prepare(__getProperty_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param value 属性值
     * 
     **/
    public int end_getProperty(Ice.StringHolder value, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getProperty_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        value.value = __is.readString();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getPropertyList(vmxICE.PropertyListHolder list)
    {
        return getPropertyList(list, null, false);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getPropertyList(vmxICE.PropertyListHolder list, java.util.Map<String, String> __ctx)
    {
        return getPropertyList(list, __ctx, true);
    }

    private int
    getPropertyList(vmxICE.PropertyListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPropertyList");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getPropertyList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getPropertyList_name = "getPropertyList";

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPropertyList()
    {
        return begin_getPropertyList(null, false, null);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx)
    {
        return begin_getPropertyList(__ctx, true, null);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPropertyList(Ice.Callback __cb)
    {
        return begin_getPropertyList(null, false, __cb);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPropertyList(__ctx, true, __cb);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPropertyList(vmxICE.Callback_VMXObject_getPropertyList __cb)
    {
        return begin_getPropertyList(null, false, __cb);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getPropertyList __cb)
    {
        return begin_getPropertyList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPropertyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPropertyList_name, __cb);
        try
        {
            __result.__prepare(__getPropertyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     **/
    public int end_getPropertyList(vmxICE.PropertyListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPropertyList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = vmxICE.PropertyListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getState(vmxICE.ObjectStateHolder state)
    {
        return getState(state, null, false);
    }

    /**
     * 获取对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getState(vmxICE.ObjectStateHolder state, java.util.Map<String, String> __ctx)
    {
        return getState(state, __ctx, true);
    }

    private int
    getState(vmxICE.ObjectStateHolder state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getState");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getState(state, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getState_name = "getState";

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getState()
    {
        return begin_getState(null, false, null);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx)
    {
        return begin_getState(__ctx, true, null);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getState(Ice.Callback __cb)
    {
        return begin_getState(null, false, __cb);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getState(__ctx, true, __cb);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getState(vmxICE.Callback_VMXObject_getState __cb)
    {
        return begin_getState(null, false, __cb);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getState __cb)
    {
        return begin_getState(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getState_name, __cb);
        try
        {
            __result.__prepare(__getState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param state 状态值.
     * 
     **/
    public int end_getState(vmxICE.ObjectStateHolder state, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getState_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        state.value = vmxICE.ObjectState.__read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param info 格式化的统计信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getStatistics(vmxICE.StatisticsListHolder info)
    {
        return getStatistics(info, null, false);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param info 格式化的统计信息
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getStatistics(vmxICE.StatisticsListHolder info, java.util.Map<String, String> __ctx)
    {
        return getStatistics(info, __ctx, true);
    }

    private int
    getStatistics(vmxICE.StatisticsListHolder info, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStatistics");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getStatistics(info, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getStatistics_name = "getStatistics";

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatistics()
    {
        return begin_getStatistics(null, false, null);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx)
    {
        return begin_getStatistics(__ctx, true, null);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatistics(Ice.Callback __cb)
    {
        return begin_getStatistics(null, false, __cb);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getStatistics(__ctx, true, __cb);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatistics(vmxICE.Callback_VMXObject_getStatistics __cb)
    {
        return begin_getStatistics(null, false, __cb);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_getStatistics __cb)
    {
        return begin_getStatistics(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getStatistics_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getStatistics_name, __cb);
        try
        {
            __result.__prepare(__getStatistics_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param info 格式化的统计信息
     * 
     **/
    public int end_getStatistics(vmxICE.StatisticsListHolder info, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getStatistics_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        info.value = vmxICE.StatisticsListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    recvMessage(byte[] msg)
    {
        return recvMessage(msg, null, false);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    recvMessage(byte[] msg, java.util.Map<String, String> __ctx)
    {
        return recvMessage(msg, __ctx, true);
    }

    private int
    recvMessage(byte[] msg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("recvMessage");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.recvMessage(msg, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __recvMessage_name = "recvMessage";

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg)
    {
        return begin_recvMessage(msg, null, false, null);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx)
    {
        return begin_recvMessage(msg, __ctx, true, null);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, Ice.Callback __cb)
    {
        return begin_recvMessage(msg, null, false, __cb);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_recvMessage(msg, __ctx, true, __cb);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, vmxICE.Callback_VMXObject_recvMessage __cb)
    {
        return begin_recvMessage(msg, null, false, __cb);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_recvMessage __cb)
    {
        return begin_recvMessage(msg, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__recvMessage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __recvMessage_name, __cb);
        try
        {
            __result.__prepare(__recvMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            vmxICE.ByteSeqHelper.write(__os, msg);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_recvMessage(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __recvMessage_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsg(int msgID, String ObjectID)
    {
        return registerMsg(msgID, ObjectID, null, false);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return registerMsg(msgID, ObjectID, __ctx, true);
    }

    private int
    registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("registerMsg");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.registerMsg(msgID, ObjectID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __registerMsg_name = "registerMsg";

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID)
    {
        return begin_registerMsg(msgID, ObjectID, null, false, null);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return begin_registerMsg(msgID, ObjectID, __ctx, true, null);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, Ice.Callback __cb)
    {
        return begin_registerMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_registerMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, vmxICE.Callback_VMXObject_registerMsg __cb)
    {
        return begin_registerMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_registerMsg __cb)
    {
        return begin_registerMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__registerMsg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __registerMsg_name, __cb);
        try
        {
            __result.__prepare(__registerMsg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_registerMsg(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __registerMsg_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return registerMsgWithLocator(msgID, ObjectID, locator, null, false);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true);
    }

    private int
    registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("registerMsgWithLocator");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.registerMsgWithLocator(msgID, ObjectID, locator, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __registerMsgWithLocator_name = "registerMsgWithLocator";

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, null, false, null);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true, null);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, Ice.Callback __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, vmxICE.Callback_VMXObject_registerMsgWithLocator __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_registerMsgWithLocator __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__registerMsgWithLocator_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __registerMsgWithLocator_name, __cb);
        try
        {
            __result.__prepare(__registerMsgWithLocator_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.writeString(locator);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_registerMsgWithLocator(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __registerMsgWithLocator_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setParent(String parent)
    {
        return setParent(parent, null, false);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setParent(String parent, java.util.Map<String, String> __ctx)
    {
        return setParent(parent, __ctx, true);
    }

    private int
    setParent(String parent, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setParent");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setParent(parent, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setParent_name = "setParent";

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_setParent(String parent)
    {
        return begin_setParent(parent, null, false, null);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx)
    {
        return begin_setParent(parent, __ctx, true, null);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_setParent(String parent, Ice.Callback __cb)
    {
        return begin_setParent(parent, null, false, __cb);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setParent(parent, __ctx, true, __cb);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_setParent(String parent, vmxICE.Callback_VMXObject_setParent __cb)
    {
        return begin_setParent(parent, null, false, __cb);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_setParent __cb)
    {
        return begin_setParent(parent, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setParent_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setParent_name, __cb);
        try
        {
            __result.__prepare(__setParent_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(parent);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setParent(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setParent_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setProperty(String name, String value)
    {
        return setProperty(name, value, null, false);
    }

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setProperty(String name, String value, java.util.Map<String, String> __ctx)
    {
        return setProperty(name, value, __ctx, true);
    }

    private int
    setProperty(String name, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setProperty");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setProperty(name, value, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setProperty_name = "setProperty";

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value)
    {
        return begin_setProperty(name, value, null, false, null);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx)
    {
        return begin_setProperty(name, value, __ctx, true, null);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, Ice.Callback __cb)
    {
        return begin_setProperty(name, value, null, false, __cb);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setProperty(name, value, __ctx, true, __cb);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, vmxICE.Callback_VMXObject_setProperty __cb)
    {
        return begin_setProperty(name, value, null, false, __cb);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_setProperty __cb)
    {
        return begin_setProperty(name, value, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setProperty_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setProperty_name, __cb);
        try
        {
            __result.__prepare(__setProperty_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.writeString(value);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setProperty(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setProperty_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list)
    {
        return setPropertyList(list, null, false);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx)
    {
        return setPropertyList(list, __ctx, true);
    }

    private int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPropertyList");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setPropertyList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setPropertyList_name = "setPropertyList";

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list)
    {
        return begin_setPropertyList(list, null, false, null);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx)
    {
        return begin_setPropertyList(list, __ctx, true, null);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, Ice.Callback __cb)
    {
        return begin_setPropertyList(list, null, false, __cb);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPropertyList(list, __ctx, true, __cb);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, vmxICE.Callback_VMXObject_setPropertyList __cb)
    {
        return begin_setPropertyList(list, null, false, __cb);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_setPropertyList __cb)
    {
        return begin_setPropertyList(list, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setPropertyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPropertyList_name, __cb);
        try
        {
            __result.__prepare(__setPropertyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            vmxICE.PropertyListHelper.write(__os, list);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setPropertyList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setPropertyList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setState(vmxICE.ObjectState state)
    {
        return setState(state, null, false);
    }

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setState(vmxICE.ObjectState state, java.util.Map<String, String> __ctx)
    {
        return setState(state, __ctx, true);
    }

    private int
    setState(vmxICE.ObjectState state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setState");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setState(state, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setState_name = "setState";

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     **/
    public Ice.AsyncResult begin_setState(vmxICE.ObjectState state)
    {
        return begin_setState(state, null, false, null);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setState(vmxICE.ObjectState state, java.util.Map<String, String> __ctx)
    {
        return begin_setState(state, __ctx, true, null);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     **/
    public Ice.AsyncResult begin_setState(vmxICE.ObjectState state, Ice.Callback __cb)
    {
        return begin_setState(state, null, false, __cb);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setState(vmxICE.ObjectState state, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setState(state, __ctx, true, __cb);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     **/
    public Ice.AsyncResult begin_setState(vmxICE.ObjectState state, vmxICE.Callback_VMXObject_setState __cb)
    {
        return begin_setState(state, null, false, __cb);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setState(vmxICE.ObjectState state, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_setState __cb)
    {
        return begin_setState(state, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setState(vmxICE.ObjectState state, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setState_name, __cb);
        try
        {
            __result.__prepare(__setState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            state.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setState(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setState_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要取消接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsg(int msgID, String ObjectID)
    {
        return unregisterMsg(msgID, ObjectID, null, false);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要取消接收消息的对象的ICE ID。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return unregisterMsg(msgID, ObjectID, __ctx, true);
    }

    private int
    unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("unregisterMsg");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.unregisterMsg(msgID, ObjectID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __unregisterMsg_name = "unregisterMsg";

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID)
    {
        return begin_unregisterMsg(msgID, ObjectID, null, false, null);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return begin_unregisterMsg(msgID, ObjectID, __ctx, true, null);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, Ice.Callback __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, vmxICE.Callback_VMXObject_unregisterMsg __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_unregisterMsg __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__unregisterMsg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __unregisterMsg_name, __cb);
        try
        {
            __result.__prepare(__unregisterMsg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_unregisterMsg(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __unregisterMsg_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return unregisterMsgWithLocator(msgID, ObjectID, locator, null, false);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true);
    }

    private int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("unregisterMsgWithLocator");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __unregisterMsgWithLocator_name = "unregisterMsgWithLocator";

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, null, false, null);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true, null);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, Ice.Callback __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, vmxICE.Callback_VMXObject_unregisterMsgWithLocator __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, vmxICE.Callback_VMXObject_unregisterMsgWithLocator __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__unregisterMsgWithLocator_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __unregisterMsgWithLocator_name, __cb);
        try
        {
            __result.__prepare(__unregisterMsgWithLocator_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.writeString(locator);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_unregisterMsgWithLocator(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __unregisterMsgWithLocator_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addClient(String ID)
    {
        return addClient(ID, null, false);
    }

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addClient(String ID, java.util.Map<String, String> __ctx)
    {
        return addClient(ID, __ctx, true);
    }

    private int
    addClient(String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addClient");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.addClient(ID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addClient_name = "addClient";

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     **/
    public Ice.AsyncResult begin_addClient(String ID)
    {
        return begin_addClient(ID, null, false, null);
    }

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClient(String ID, java.util.Map<String, String> __ctx)
    {
        return begin_addClient(ID, __ctx, true, null);
    }

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     **/
    public Ice.AsyncResult begin_addClient(String ID, Ice.Callback __cb)
    {
        return begin_addClient(ID, null, false, __cb);
    }

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClient(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addClient(ID, __ctx, true, __cb);
    }

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     **/
    public Ice.AsyncResult begin_addClient(String ID, Callback_Conference_addClient __cb)
    {
        return begin_addClient(ID, null, false, __cb);
    }

    /**
     * 添加一个[Client]到会议中.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClient(String ID, java.util.Map<String, String> __ctx, Callback_Conference_addClient __cb)
    {
        return begin_addClient(ID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addClient(String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addClient_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addClient_name, __cb);
        try
        {
            __result.__prepare(__addClient_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addClient(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addClient_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addClientList(String[] list)
    {
        return addClientList(list, null, false);
    }

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addClientList(String[] list, java.util.Map<String, String> __ctx)
    {
        return addClientList(list, __ctx, true);
    }

    private int
    addClientList(String[] list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addClientList");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.addClientList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addClientList_name = "addClientList";

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     **/
    public Ice.AsyncResult begin_addClientList(String[] list)
    {
        return begin_addClientList(list, null, false, null);
    }

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientList(String[] list, java.util.Map<String, String> __ctx)
    {
        return begin_addClientList(list, __ctx, true, null);
    }

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     **/
    public Ice.AsyncResult begin_addClientList(String[] list, Ice.Callback __cb)
    {
        return begin_addClientList(list, null, false, __cb);
    }

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientList(String[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addClientList(list, __ctx, true, __cb);
    }

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     **/
    public Ice.AsyncResult begin_addClientList(String[] list, Callback_Conference_addClientList __cb)
    {
        return begin_addClientList(list, null, false, __cb);
    }

    /**
     * 添加多个[Client]到会议中.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientList(String[] list, java.util.Map<String, String> __ctx, Callback_Conference_addClientList __cb)
    {
        return begin_addClientList(list, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addClientList(String[] list, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addClientList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addClientList_name, __cb);
        try
        {
            __result.__prepare(__addClientList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            ClientIDListHelper.write(__os, list);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addClientList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addClientList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addClientListToChairScreen(String[] list)
    {
        return addClientListToChairScreen(list, null, false);
    }

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addClientListToChairScreen(String[] list, java.util.Map<String, String> __ctx)
    {
        return addClientListToChairScreen(list, __ctx, true);
    }

    private int
    addClientListToChairScreen(String[] list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addClientListToChairScreen");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.addClientListToChairScreen(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addClientListToChairScreen_name = "addClientListToChairScreen";

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     **/
    public Ice.AsyncResult begin_addClientListToChairScreen(String[] list)
    {
        return begin_addClientListToChairScreen(list, null, false, null);
    }

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientListToChairScreen(String[] list, java.util.Map<String, String> __ctx)
    {
        return begin_addClientListToChairScreen(list, __ctx, true, null);
    }

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     **/
    public Ice.AsyncResult begin_addClientListToChairScreen(String[] list, Ice.Callback __cb)
    {
        return begin_addClientListToChairScreen(list, null, false, __cb);
    }

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientListToChairScreen(String[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addClientListToChairScreen(list, __ctx, true, __cb);
    }

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     **/
    public Ice.AsyncResult begin_addClientListToChairScreen(String[] list, Callback_Conference_addClientListToChairScreen __cb)
    {
        return begin_addClientListToChairScreen(list, null, false, __cb);
    }

    /**
     * 添加多个客户端到主席的分屏上.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientListToChairScreen(String[] list, java.util.Map<String, String> __ctx, Callback_Conference_addClientListToChairScreen __cb)
    {
        return begin_addClientListToChairScreen(list, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addClientListToChairScreen(String[] list, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addClientListToChairScreen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addClientListToChairScreen_name, __cb);
        try
        {
            __result.__prepare(__addClientListToChairScreen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            ClientIDListHelper.write(__os, list);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addClientListToChairScreen(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addClientListToChairScreen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addClientListToSubScreen(int screenID, String[] list)
    {
        return addClientListToSubScreen(screenID, list, null, false);
    }

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addClientListToSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx)
    {
        return addClientListToSubScreen(screenID, list, __ctx, true);
    }

    private int
    addClientListToSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addClientListToSubScreen");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.addClientListToSubScreen(screenID, list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addClientListToSubScreen_name = "addClientListToSubScreen";

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_addClientListToSubScreen(int screenID, String[] list)
    {
        return begin_addClientListToSubScreen(screenID, list, null, false, null);
    }

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientListToSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx)
    {
        return begin_addClientListToSubScreen(screenID, list, __ctx, true, null);
    }

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_addClientListToSubScreen(int screenID, String[] list, Ice.Callback __cb)
    {
        return begin_addClientListToSubScreen(screenID, list, null, false, __cb);
    }

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientListToSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addClientListToSubScreen(screenID, list, __ctx, true, __cb);
    }

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_addClientListToSubScreen(int screenID, String[] list, Callback_Conference_addClientListToSubScreen __cb)
    {
        return begin_addClientListToSubScreen(screenID, list, null, false, __cb);
    }

    /**
     * 添加多个客户端到某个分屏.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientListToSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx, Callback_Conference_addClientListToSubScreen __cb)
    {
        return begin_addClientListToSubScreen(screenID, list, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addClientListToSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addClientListToSubScreen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addClientListToSubScreen_name, __cb);
        try
        {
            __result.__prepare(__addClientListToSubScreen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(screenID);
            ClientIDListHelper.write(__os, list);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addClientListToSubScreen(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addClientListToSubScreen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addClientToChairScreen(String ID)
    {
        return addClientToChairScreen(ID, null, false);
    }

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addClientToChairScreen(String ID, java.util.Map<String, String> __ctx)
    {
        return addClientToChairScreen(ID, __ctx, true);
    }

    private int
    addClientToChairScreen(String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addClientToChairScreen");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.addClientToChairScreen(ID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addClientToChairScreen_name = "addClientToChairScreen";

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     **/
    public Ice.AsyncResult begin_addClientToChairScreen(String ID)
    {
        return begin_addClientToChairScreen(ID, null, false, null);
    }

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientToChairScreen(String ID, java.util.Map<String, String> __ctx)
    {
        return begin_addClientToChairScreen(ID, __ctx, true, null);
    }

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     **/
    public Ice.AsyncResult begin_addClientToChairScreen(String ID, Ice.Callback __cb)
    {
        return begin_addClientToChairScreen(ID, null, false, __cb);
    }

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientToChairScreen(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addClientToChairScreen(ID, __ctx, true, __cb);
    }

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     **/
    public Ice.AsyncResult begin_addClientToChairScreen(String ID, Callback_Conference_addClientToChairScreen __cb)
    {
        return begin_addClientToChairScreen(ID, null, false, __cb);
    }

    /**
     * 添加一个客户端到主席的分屏上.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientToChairScreen(String ID, java.util.Map<String, String> __ctx, Callback_Conference_addClientToChairScreen __cb)
    {
        return begin_addClientToChairScreen(ID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addClientToChairScreen(String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addClientToChairScreen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addClientToChairScreen_name, __cb);
        try
        {
            __result.__prepare(__addClientToChairScreen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addClientToChairScreen(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addClientToChairScreen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端的ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addClientToSubScreen(int screenID, String ID)
    {
        return addClientToSubScreen(screenID, ID, null, false);
    }

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addClientToSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx)
    {
        return addClientToSubScreen(screenID, ID, __ctx, true);
    }

    private int
    addClientToSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addClientToSubScreen");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.addClientToSubScreen(screenID, ID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addClientToSubScreen_name = "addClientToSubScreen";

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_addClientToSubScreen(int screenID, String ID)
    {
        return begin_addClientToSubScreen(screenID, ID, null, false, null);
    }

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientToSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx)
    {
        return begin_addClientToSubScreen(screenID, ID, __ctx, true, null);
    }

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_addClientToSubScreen(int screenID, String ID, Ice.Callback __cb)
    {
        return begin_addClientToSubScreen(screenID, ID, null, false, __cb);
    }

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientToSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addClientToSubScreen(screenID, ID, __ctx, true, __cb);
    }

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_addClientToSubScreen(int screenID, String ID, Callback_Conference_addClientToSubScreen __cb)
    {
        return begin_addClientToSubScreen(screenID, ID, null, false, __cb);
    }

    /**
     * 添加一个客户端到某个分屏.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addClientToSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx, Callback_Conference_addClientToSubScreen __cb)
    {
        return begin_addClientToSubScreen(screenID, ID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addClientToSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addClientToSubScreen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addClientToSubScreen_name, __cb);
        try
        {
            __result.__prepare(__addClientToSubScreen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(screenID);
            __os.writeString(ID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addClientToSubScreen(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addClientToSubScreen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param text 文本字符串.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addTextToSubtitle(int subtitleID, String text)
    {
        return addTextToSubtitle(subtitleID, text, null, false);
    }

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param text 文本字符串.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addTextToSubtitle(int subtitleID, String text, java.util.Map<String, String> __ctx)
    {
        return addTextToSubtitle(subtitleID, text, __ctx, true);
    }

    private int
    addTextToSubtitle(int subtitleID, String text, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addTextToSubtitle");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.addTextToSubtitle(subtitleID, text, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addTextToSubtitle_name = "addTextToSubtitle";

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     **/
    public Ice.AsyncResult begin_addTextToSubtitle(int subtitleID, String text)
    {
        return begin_addTextToSubtitle(subtitleID, text, null, false, null);
    }

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addTextToSubtitle(int subtitleID, String text, java.util.Map<String, String> __ctx)
    {
        return begin_addTextToSubtitle(subtitleID, text, __ctx, true, null);
    }

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     **/
    public Ice.AsyncResult begin_addTextToSubtitle(int subtitleID, String text, Ice.Callback __cb)
    {
        return begin_addTextToSubtitle(subtitleID, text, null, false, __cb);
    }

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addTextToSubtitle(int subtitleID, String text, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addTextToSubtitle(subtitleID, text, __ctx, true, __cb);
    }

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     **/
    public Ice.AsyncResult begin_addTextToSubtitle(int subtitleID, String text, Callback_Conference_addTextToSubtitle __cb)
    {
        return begin_addTextToSubtitle(subtitleID, text, null, false, __cb);
    }

    /**
     * 添加文本到字幕对象，如果字幕对象中已经有了文本，则会被替换，fixed me需要确定是否是替换.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addTextToSubtitle(int subtitleID, String text, java.util.Map<String, String> __ctx, Callback_Conference_addTextToSubtitle __cb)
    {
        return begin_addTextToSubtitle(subtitleID, text, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addTextToSubtitle(int subtitleID, String text, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addTextToSubtitle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addTextToSubtitle_name, __cb);
        try
        {
            __result.__prepare(__addTextToSubtitle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(subtitleID);
            __os.writeString(text);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addTextToSubtitle(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addTextToSubtitle_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    connectAllClient()
    {
        return connectAllClient(null, false);
    }

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    connectAllClient(java.util.Map<String, String> __ctx)
    {
        return connectAllClient(__ctx, true);
    }

    private int
    connectAllClient(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("connectAllClient");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.connectAllClient(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __connectAllClient_name = "connectAllClient";

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_connectAllClient()
    {
        return begin_connectAllClient(null, false, null);
    }

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_connectAllClient(java.util.Map<String, String> __ctx)
    {
        return begin_connectAllClient(__ctx, true, null);
    }

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_connectAllClient(Ice.Callback __cb)
    {
        return begin_connectAllClient(null, false, __cb);
    }

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_connectAllClient(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_connectAllClient(__ctx, true, __cb);
    }

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_connectAllClient(Callback_Conference_connectAllClient __cb)
    {
        return begin_connectAllClient(null, false, __cb);
    }

    /**
     * 开始连接所有在会议中的客户端, 如果某个客户端是已连接状态，将不受影响.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_connectAllClient(java.util.Map<String, String> __ctx, Callback_Conference_connectAllClient __cb)
    {
        return begin_connectAllClient(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_connectAllClient(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__connectAllClient_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __connectAllClient_name, __cb);
        try
        {
            __result.__prepare(__connectAllClient_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_connectAllClient(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __connectAllClient_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    deleteAllSubtitle()
    {
        return deleteAllSubtitle(null, false);
    }

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    deleteAllSubtitle(java.util.Map<String, String> __ctx)
    {
        return deleteAllSubtitle(__ctx, true);
    }

    private int
    deleteAllSubtitle(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deleteAllSubtitle");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.deleteAllSubtitle(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __deleteAllSubtitle_name = "deleteAllSubtitle";

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_deleteAllSubtitle()
    {
        return begin_deleteAllSubtitle(null, false, null);
    }

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_deleteAllSubtitle(java.util.Map<String, String> __ctx)
    {
        return begin_deleteAllSubtitle(__ctx, true, null);
    }

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_deleteAllSubtitle(Ice.Callback __cb)
    {
        return begin_deleteAllSubtitle(null, false, __cb);
    }

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_deleteAllSubtitle(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteAllSubtitle(__ctx, true, __cb);
    }

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_deleteAllSubtitle(Callback_Conference_deleteAllSubtitle __cb)
    {
        return begin_deleteAllSubtitle(null, false, __cb);
    }

    /**
     * 删除会议中的所有字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_deleteAllSubtitle(java.util.Map<String, String> __ctx, Callback_Conference_deleteAllSubtitle __cb)
    {
        return begin_deleteAllSubtitle(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deleteAllSubtitle(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteAllSubtitle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deleteAllSubtitle_name, __cb);
        try
        {
            __result.__prepare(__deleteAllSubtitle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_deleteAllSubtitle(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __deleteAllSubtitle_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    deleteSubtitle(int subtitleID)
    {
        return deleteSubtitle(subtitleID, null, false);
    }

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    deleteSubtitle(int subtitleID, java.util.Map<String, String> __ctx)
    {
        return deleteSubtitle(subtitleID, __ctx, true);
    }

    private int
    deleteSubtitle(int subtitleID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deleteSubtitle");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.deleteSubtitle(subtitleID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __deleteSubtitle_name = "deleteSubtitle";

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * 
     **/
    public Ice.AsyncResult begin_deleteSubtitle(int subtitleID)
    {
        return begin_deleteSubtitle(subtitleID, null, false, null);
    }

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_deleteSubtitle(int subtitleID, java.util.Map<String, String> __ctx)
    {
        return begin_deleteSubtitle(subtitleID, __ctx, true, null);
    }

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * 
     **/
    public Ice.AsyncResult begin_deleteSubtitle(int subtitleID, Ice.Callback __cb)
    {
        return begin_deleteSubtitle(subtitleID, null, false, __cb);
    }

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_deleteSubtitle(int subtitleID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteSubtitle(subtitleID, __ctx, true, __cb);
    }

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * 
     **/
    public Ice.AsyncResult begin_deleteSubtitle(int subtitleID, Callback_Conference_deleteSubtitle __cb)
    {
        return begin_deleteSubtitle(subtitleID, null, false, __cb);
    }

    /**
     * 删除会议中已经添加的某个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_deleteSubtitle(int subtitleID, java.util.Map<String, String> __ctx, Callback_Conference_deleteSubtitle __cb)
    {
        return begin_deleteSubtitle(subtitleID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deleteSubtitle(int subtitleID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteSubtitle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deleteSubtitle_name, __cb);
        try
        {
            __result.__prepare(__deleteSubtitle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(subtitleID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_deleteSubtitle(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __deleteSubtitle_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    disconnectAllClient()
    {
        return disconnectAllClient(null, false);
    }

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    disconnectAllClient(java.util.Map<String, String> __ctx)
    {
        return disconnectAllClient(__ctx, true);
    }

    private int
    disconnectAllClient(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("disconnectAllClient");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.disconnectAllClient(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __disconnectAllClient_name = "disconnectAllClient";

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_disconnectAllClient()
    {
        return begin_disconnectAllClient(null, false, null);
    }

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_disconnectAllClient(java.util.Map<String, String> __ctx)
    {
        return begin_disconnectAllClient(__ctx, true, null);
    }

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_disconnectAllClient(Ice.Callback __cb)
    {
        return begin_disconnectAllClient(null, false, __cb);
    }

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_disconnectAllClient(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_disconnectAllClient(__ctx, true, __cb);
    }

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_disconnectAllClient(Callback_Conference_disconnectAllClient __cb)
    {
        return begin_disconnectAllClient(null, false, __cb);
    }

    /**
     * 中断所有在会议中的客户端的连接.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_disconnectAllClient(java.util.Map<String, String> __ctx, Callback_Conference_disconnectAllClient __cb)
    {
        return begin_disconnectAllClient(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_disconnectAllClient(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__disconnectAllClient_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __disconnectAllClient_name, __cb);
        try
        {
            __result.__prepare(__disconnectAllClient_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_disconnectAllClient(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __disconnectAllClient_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取主席客户端的ID.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getChairClientID(Ice.StringHolder ID)
    {
        return getChairClientID(ID, null, false);
    }

    /**
     * 获取主席客户端的ID.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getChairClientID(Ice.StringHolder ID, java.util.Map<String, String> __ctx)
    {
        return getChairClientID(ID, __ctx, true);
    }

    private int
    getChairClientID(Ice.StringHolder ID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getChairClientID");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getChairClientID(ID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getChairClientID_name = "getChairClientID";

    /**
     * 获取主席客户端的ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getChairClientID()
    {
        return begin_getChairClientID(null, false, null);
    }

    /**
     * 获取主席客户端的ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getChairClientID(java.util.Map<String, String> __ctx)
    {
        return begin_getChairClientID(__ctx, true, null);
    }

    /**
     * 获取主席客户端的ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getChairClientID(Ice.Callback __cb)
    {
        return begin_getChairClientID(null, false, __cb);
    }

    /**
     * 获取主席客户端的ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getChairClientID(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getChairClientID(__ctx, true, __cb);
    }

    /**
     * 获取主席客户端的ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getChairClientID(Callback_Conference_getChairClientID __cb)
    {
        return begin_getChairClientID(null, false, __cb);
    }

    /**
     * 获取主席客户端的ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getChairClientID(java.util.Map<String, String> __ctx, Callback_Conference_getChairClientID __cb)
    {
        return begin_getChairClientID(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getChairClientID(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getChairClientID_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getChairClientID_name, __cb);
        try
        {
            __result.__prepare(__getChairClientID_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     **/
    public int end_getChairClientID(Ice.StringHolder ID, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getChairClientID_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        ID.value = __is.readString();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param clientId 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getClientIDFromSubScreen(int screenID, Ice.StringHolder clientID)
    {
        return getClientIDFromSubScreen(screenID, clientID, null, false);
    }

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param clientId 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getClientIDFromSubScreen(int screenID, Ice.StringHolder clientID, java.util.Map<String, String> __ctx)
    {
        return getClientIDFromSubScreen(screenID, clientID, __ctx, true);
    }

    private int
    getClientIDFromSubScreen(int screenID, Ice.StringHolder clientID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getClientIDFromSubScreen");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getClientIDFromSubScreen(screenID, clientID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getClientIDFromSubScreen_name = "getClientIDFromSubScreen";

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_getClientIDFromSubScreen(int screenID)
    {
        return begin_getClientIDFromSubScreen(screenID, null, false, null);
    }

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientIDFromSubScreen(int screenID, java.util.Map<String, String> __ctx)
    {
        return begin_getClientIDFromSubScreen(screenID, __ctx, true, null);
    }

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_getClientIDFromSubScreen(int screenID, Ice.Callback __cb)
    {
        return begin_getClientIDFromSubScreen(screenID, null, false, __cb);
    }

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientIDFromSubScreen(int screenID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getClientIDFromSubScreen(screenID, __ctx, true, __cb);
    }

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_getClientIDFromSubScreen(int screenID, Callback_Conference_getClientIDFromSubScreen __cb)
    {
        return begin_getClientIDFromSubScreen(screenID, null, false, __cb);
    }

    /**
     * 列出分屏上当前正在使用的客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientIDFromSubScreen(int screenID, java.util.Map<String, String> __ctx, Callback_Conference_getClientIDFromSubScreen __cb)
    {
        return begin_getClientIDFromSubScreen(screenID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getClientIDFromSubScreen(int screenID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getClientIDFromSubScreen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getClientIDFromSubScreen_name, __cb);
        try
        {
            __result.__prepare(__getClientIDFromSubScreen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(screenID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getClientIDFromSubScreen(Ice.StringHolder clientID, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getClientIDFromSubScreen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        clientID.value = __is.readString();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取会议中的客户端列表.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getClientList(ClientIDListHolder list)
    {
        return getClientList(list, null, false);
    }

    /**
     * 获取会议中的客户端列表.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getClientList(ClientIDListHolder list, java.util.Map<String, String> __ctx)
    {
        return getClientList(list, __ctx, true);
    }

    private int
    getClientList(ClientIDListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getClientList");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getClientList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getClientList_name = "getClientList";

    /**
     * 获取会议中的客户端列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getClientList()
    {
        return begin_getClientList(null, false, null);
    }

    /**
     * 获取会议中的客户端列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientList(java.util.Map<String, String> __ctx)
    {
        return begin_getClientList(__ctx, true, null);
    }

    /**
     * 获取会议中的客户端列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getClientList(Ice.Callback __cb)
    {
        return begin_getClientList(null, false, __cb);
    }

    /**
     * 获取会议中的客户端列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getClientList(__ctx, true, __cb);
    }

    /**
     * 获取会议中的客户端列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getClientList(Callback_Conference_getClientList __cb)
    {
        return begin_getClientList(null, false, __cb);
    }

    /**
     * 获取会议中的客户端列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientList(java.util.Map<String, String> __ctx, Callback_Conference_getClientList __cb)
    {
        return begin_getClientList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getClientList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getClientList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getClientList_name, __cb);
        try
        {
            __result.__prepare(__getClientList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 客户端ID列表.
     * 
     **/
    public int end_getClientList(ClientIDListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getClientList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = ClientIDListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 列出分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getClientListFromSubScreen(int screenID, ClientIDListHolder list)
    {
        return getClientListFromSubScreen(screenID, list, null, false);
    }

    /**
     * 列出分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getClientListFromSubScreen(int screenID, ClientIDListHolder list, java.util.Map<String, String> __ctx)
    {
        return getClientListFromSubScreen(screenID, list, __ctx, true);
    }

    private int
    getClientListFromSubScreen(int screenID, ClientIDListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getClientListFromSubScreen");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getClientListFromSubScreen(screenID, list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getClientListFromSubScreen_name = "getClientListFromSubScreen";

    /**
     * 列出分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_getClientListFromSubScreen(int screenID)
    {
        return begin_getClientListFromSubScreen(screenID, null, false, null);
    }

    /**
     * 列出分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientListFromSubScreen(int screenID, java.util.Map<String, String> __ctx)
    {
        return begin_getClientListFromSubScreen(screenID, __ctx, true, null);
    }

    /**
     * 列出分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_getClientListFromSubScreen(int screenID, Ice.Callback __cb)
    {
        return begin_getClientListFromSubScreen(screenID, null, false, __cb);
    }

    /**
     * 列出分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientListFromSubScreen(int screenID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getClientListFromSubScreen(screenID, __ctx, true, __cb);
    }

    /**
     * 列出分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_getClientListFromSubScreen(int screenID, Callback_Conference_getClientListFromSubScreen __cb)
    {
        return begin_getClientListFromSubScreen(screenID, null, false, __cb);
    }

    /**
     * 列出分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getClientListFromSubScreen(int screenID, java.util.Map<String, String> __ctx, Callback_Conference_getClientListFromSubScreen __cb)
    {
        return begin_getClientListFromSubScreen(screenID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getClientListFromSubScreen(int screenID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getClientListFromSubScreen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getClientListFromSubScreen_name, __cb);
        try
        {
            __result.__prepare(__getClientListFromSubScreen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(screenID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 客户端ID列表.
     * 
     **/
    public int end_getClientListFromSubScreen(ClientIDListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getClientListFromSubScreen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = ClientIDListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取会议的状态.
     * 
     * @param state 会议的状态.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getConferenceState(ConferenceStateHolder state)
    {
        return getConferenceState(state, null, false);
    }

    /**
     * 获取会议的状态.
     * 
     * @param state 会议的状态.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getConferenceState(ConferenceStateHolder state, java.util.Map<String, String> __ctx)
    {
        return getConferenceState(state, __ctx, true);
    }

    private int
    getConferenceState(ConferenceStateHolder state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getConferenceState");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getConferenceState(state, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getConferenceState_name = "getConferenceState";

    /**
     * 获取会议的状态.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConferenceState()
    {
        return begin_getConferenceState(null, false, null);
    }

    /**
     * 获取会议的状态.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConferenceState(java.util.Map<String, String> __ctx)
    {
        return begin_getConferenceState(__ctx, true, null);
    }

    /**
     * 获取会议的状态.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConferenceState(Ice.Callback __cb)
    {
        return begin_getConferenceState(null, false, __cb);
    }

    /**
     * 获取会议的状态.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConferenceState(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConferenceState(__ctx, true, __cb);
    }

    /**
     * 获取会议的状态.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConferenceState(Callback_Conference_getConferenceState __cb)
    {
        return begin_getConferenceState(null, false, __cb);
    }

    /**
     * 获取会议的状态.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConferenceState(java.util.Map<String, String> __ctx, Callback_Conference_getConferenceState __cb)
    {
        return begin_getConferenceState(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConferenceState(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConferenceState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConferenceState_name, __cb);
        try
        {
            __result.__prepare(__getConferenceState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param state 会议的状态.
     * 
     **/
    public int end_getConferenceState(ConferenceStateHolder state, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConferenceState_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        state.value = ConferenceState.__read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取会议视频的fps.
     * 
     * @param fps The conference video fps.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getConferenceVideoFPS(Ice.IntHolder fps)
    {
        return getConferenceVideoFPS(fps, null, false);
    }

    /**
     * 获取会议视频的fps.
     * 
     * @param fps The conference video fps.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getConferenceVideoFPS(Ice.IntHolder fps, java.util.Map<String, String> __ctx)
    {
        return getConferenceVideoFPS(fps, __ctx, true);
    }

    private int
    getConferenceVideoFPS(Ice.IntHolder fps, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getConferenceVideoFPS");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getConferenceVideoFPS(fps, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getConferenceVideoFPS_name = "getConferenceVideoFPS";

    /**
     * 获取会议视频的fps.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConferenceVideoFPS()
    {
        return begin_getConferenceVideoFPS(null, false, null);
    }

    /**
     * 获取会议视频的fps.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConferenceVideoFPS(java.util.Map<String, String> __ctx)
    {
        return begin_getConferenceVideoFPS(__ctx, true, null);
    }

    /**
     * 获取会议视频的fps.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConferenceVideoFPS(Ice.Callback __cb)
    {
        return begin_getConferenceVideoFPS(null, false, __cb);
    }

    /**
     * 获取会议视频的fps.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConferenceVideoFPS(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConferenceVideoFPS(__ctx, true, __cb);
    }

    /**
     * 获取会议视频的fps.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConferenceVideoFPS(Callback_Conference_getConferenceVideoFPS __cb)
    {
        return begin_getConferenceVideoFPS(null, false, __cb);
    }

    /**
     * 获取会议视频的fps.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConferenceVideoFPS(java.util.Map<String, String> __ctx, Callback_Conference_getConferenceVideoFPS __cb)
    {
        return begin_getConferenceVideoFPS(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConferenceVideoFPS(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConferenceVideoFPS_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConferenceVideoFPS_name, __cb);
        try
        {
            __result.__prepare(__getConferenceVideoFPS_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param fps The conference video fps.
     * 
     **/
    public int end_getConferenceVideoFPS(Ice.IntHolder fps, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConferenceVideoFPS_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        fps.value = __is.readInt();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getExtScreenSize(Ice.IntHolder width, Ice.IntHolder height)
    {
        return getExtScreenSize(width, height, null, false);
    }

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getExtScreenSize(Ice.IntHolder width, Ice.IntHolder height, java.util.Map<String, String> __ctx)
    {
        return getExtScreenSize(width, height, __ctx, true);
    }

    private int
    getExtScreenSize(Ice.IntHolder width, Ice.IntHolder height, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getExtScreenSize");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getExtScreenSize(width, height, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getExtScreenSize_name = "getExtScreenSize";

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getExtScreenSize()
    {
        return begin_getExtScreenSize(null, false, null);
    }

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getExtScreenSize(java.util.Map<String, String> __ctx)
    {
        return begin_getExtScreenSize(__ctx, true, null);
    }

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getExtScreenSize(Ice.Callback __cb)
    {
        return begin_getExtScreenSize(null, false, __cb);
    }

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getExtScreenSize(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getExtScreenSize(__ctx, true, __cb);
    }

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getExtScreenSize(Callback_Conference_getExtScreenSize __cb)
    {
        return begin_getExtScreenSize(null, false, __cb);
    }

    /**
     * 获取会议辅流的视频画面大小.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getExtScreenSize(java.util.Map<String, String> __ctx, Callback_Conference_getExtScreenSize __cb)
    {
        return begin_getExtScreenSize(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getExtScreenSize(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getExtScreenSize_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getExtScreenSize_name, __cb);
        try
        {
            __result.__prepare(__getExtScreenSize_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param width 宽.
     **/
    public int end_getExtScreenSize(Ice.IntHolder width, Ice.IntHolder height, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getExtScreenSize_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        width.value = __is.readInt();
        height.value = __is.readInt();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取发言者的ID.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getLecturer(Ice.StringHolder ID)
    {
        return getLecturer(ID, null, false);
    }

    /**
     * 获取发言者的ID.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getLecturer(Ice.StringHolder ID, java.util.Map<String, String> __ctx)
    {
        return getLecturer(ID, __ctx, true);
    }

    private int
    getLecturer(Ice.StringHolder ID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLecturer");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getLecturer(ID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getLecturer_name = "getLecturer";

    /**
     * 获取发言者的ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLecturer()
    {
        return begin_getLecturer(null, false, null);
    }

    /**
     * 获取发言者的ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLecturer(java.util.Map<String, String> __ctx)
    {
        return begin_getLecturer(__ctx, true, null);
    }

    /**
     * 获取发言者的ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLecturer(Ice.Callback __cb)
    {
        return begin_getLecturer(null, false, __cb);
    }

    /**
     * 获取发言者的ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLecturer(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLecturer(__ctx, true, __cb);
    }

    /**
     * 获取发言者的ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLecturer(Callback_Conference_getLecturer __cb)
    {
        return begin_getLecturer(null, false, __cb);
    }

    /**
     * 获取发言者的ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLecturer(java.util.Map<String, String> __ctx, Callback_Conference_getLecturer __cb)
    {
        return begin_getLecturer(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLecturer(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLecturer_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLecturer_name, __cb);
        try
        {
            __result.__prepare(__getLecturer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param ID 客户端ID，输出参数.
     * 
     **/
    public int end_getLecturer(Ice.StringHolder ID, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLecturer_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        ID.value = __is.readString();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取会议的视频画面大小.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getScreenSize(Ice.IntHolder width, Ice.IntHolder height)
    {
        return getScreenSize(width, height, null, false);
    }

    /**
     * 获取会议的视频画面大小.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getScreenSize(Ice.IntHolder width, Ice.IntHolder height, java.util.Map<String, String> __ctx)
    {
        return getScreenSize(width, height, __ctx, true);
    }

    private int
    getScreenSize(Ice.IntHolder width, Ice.IntHolder height, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getScreenSize");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getScreenSize(width, height, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getScreenSize_name = "getScreenSize";

    /**
     * 获取会议的视频画面大小.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScreenSize()
    {
        return begin_getScreenSize(null, false, null);
    }

    /**
     * 获取会议的视频画面大小.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScreenSize(java.util.Map<String, String> __ctx)
    {
        return begin_getScreenSize(__ctx, true, null);
    }

    /**
     * 获取会议的视频画面大小.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScreenSize(Ice.Callback __cb)
    {
        return begin_getScreenSize(null, false, __cb);
    }

    /**
     * 获取会议的视频画面大小.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScreenSize(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getScreenSize(__ctx, true, __cb);
    }

    /**
     * 获取会议的视频画面大小.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScreenSize(Callback_Conference_getScreenSize __cb)
    {
        return begin_getScreenSize(null, false, __cb);
    }

    /**
     * 获取会议的视频画面大小.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScreenSize(java.util.Map<String, String> __ctx, Callback_Conference_getScreenSize __cb)
    {
        return begin_getScreenSize(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getScreenSize(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getScreenSize_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getScreenSize_name, __cb);
        try
        {
            __result.__prepare(__getScreenSize_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param width 宽.
     **/
    public int end_getScreenSize(Ice.IntHolder width, Ice.IntHolder height, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getScreenSize_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        width.value = __is.readInt();
        height.value = __is.readInt();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取分屏模式.
     * 
     * @param mode 分屏模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getScreenSplitMode(ScreenSplitModeHolder mode)
    {
        return getScreenSplitMode(mode, null, false);
    }

    /**
     * 获取分屏模式.
     * 
     * @param mode 分屏模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getScreenSplitMode(ScreenSplitModeHolder mode, java.util.Map<String, String> __ctx)
    {
        return getScreenSplitMode(mode, __ctx, true);
    }

    private int
    getScreenSplitMode(ScreenSplitModeHolder mode, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getScreenSplitMode");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getScreenSplitMode(mode, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getScreenSplitMode_name = "getScreenSplitMode";

    /**
     * 获取分屏模式.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScreenSplitMode()
    {
        return begin_getScreenSplitMode(null, false, null);
    }

    /**
     * 获取分屏模式.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScreenSplitMode(java.util.Map<String, String> __ctx)
    {
        return begin_getScreenSplitMode(__ctx, true, null);
    }

    /**
     * 获取分屏模式.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScreenSplitMode(Ice.Callback __cb)
    {
        return begin_getScreenSplitMode(null, false, __cb);
    }

    /**
     * 获取分屏模式.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScreenSplitMode(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getScreenSplitMode(__ctx, true, __cb);
    }

    /**
     * 获取分屏模式.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getScreenSplitMode(Callback_Conference_getScreenSplitMode __cb)
    {
        return begin_getScreenSplitMode(null, false, __cb);
    }

    /**
     * 获取分屏模式.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getScreenSplitMode(java.util.Map<String, String> __ctx, Callback_Conference_getScreenSplitMode __cb)
    {
        return begin_getScreenSplitMode(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getScreenSplitMode(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getScreenSplitMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getScreenSplitMode_name, __cb);
        try
        {
            __result.__prepare(__getScreenSplitMode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param mode 分屏模式.
     * 
     **/
    public int end_getScreenSplitMode(ScreenSplitModeHolder mode, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getScreenSplitMode_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        mode.value = ScreenSplitMode.__read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取子屏幕的模式.
     * 
     * @param screenID 某个分屏的索引.
     * @param mode 子屏幕模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getSubScreenMode(int screenID, SubScreenModeHolder mode)
    {
        return getSubScreenMode(screenID, mode, null, false);
    }

    /**
     * 获取子屏幕的模式.
     * 
     * @param screenID 某个分屏的索引.
     * @param mode 子屏幕模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getSubScreenMode(int screenID, SubScreenModeHolder mode, java.util.Map<String, String> __ctx)
    {
        return getSubScreenMode(screenID, mode, __ctx, true);
    }

    private int
    getSubScreenMode(int screenID, SubScreenModeHolder mode, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSubScreenMode");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.getSubScreenMode(screenID, mode, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getSubScreenMode_name = "getSubScreenMode";

    /**
     * 获取子屏幕的模式.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_getSubScreenMode(int screenID)
    {
        return begin_getSubScreenMode(screenID, null, false, null);
    }

    /**
     * 获取子屏幕的模式.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSubScreenMode(int screenID, java.util.Map<String, String> __ctx)
    {
        return begin_getSubScreenMode(screenID, __ctx, true, null);
    }

    /**
     * 获取子屏幕的模式.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_getSubScreenMode(int screenID, Ice.Callback __cb)
    {
        return begin_getSubScreenMode(screenID, null, false, __cb);
    }

    /**
     * 获取子屏幕的模式.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSubScreenMode(int screenID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSubScreenMode(screenID, __ctx, true, __cb);
    }

    /**
     * 获取子屏幕的模式.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_getSubScreenMode(int screenID, Callback_Conference_getSubScreenMode __cb)
    {
        return begin_getSubScreenMode(screenID, null, false, __cb);
    }

    /**
     * 获取子屏幕的模式.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSubScreenMode(int screenID, java.util.Map<String, String> __ctx, Callback_Conference_getSubScreenMode __cb)
    {
        return begin_getSubScreenMode(screenID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSubScreenMode(int screenID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSubScreenMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSubScreenMode_name, __cb);
        try
        {
            __result.__prepare(__getSubScreenMode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(screenID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param mode 子屏幕模式.
     * 
     **/
    public int end_getSubScreenMode(SubScreenModeHolder mode, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSubScreenMode_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        mode.value = SubScreenMode.__read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param direction 游标移动方向.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    moveSubScreenMember(int screenID, SubScreenMoveDirection direction)
    {
        return moveSubScreenMember(screenID, direction, null, false);
    }

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param direction 游标移动方向.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    moveSubScreenMember(int screenID, SubScreenMoveDirection direction, java.util.Map<String, String> __ctx)
    {
        return moveSubScreenMember(screenID, direction, __ctx, true);
    }

    private int
    moveSubScreenMember(int screenID, SubScreenMoveDirection direction, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("moveSubScreenMember");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.moveSubScreenMember(screenID, direction, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __moveSubScreenMember_name = "moveSubScreenMember";

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_moveSubScreenMember(int screenID, SubScreenMoveDirection direction)
    {
        return begin_moveSubScreenMember(screenID, direction, null, false, null);
    }

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_moveSubScreenMember(int screenID, SubScreenMoveDirection direction, java.util.Map<String, String> __ctx)
    {
        return begin_moveSubScreenMember(screenID, direction, __ctx, true, null);
    }

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_moveSubScreenMember(int screenID, SubScreenMoveDirection direction, Ice.Callback __cb)
    {
        return begin_moveSubScreenMember(screenID, direction, null, false, __cb);
    }

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_moveSubScreenMember(int screenID, SubScreenMoveDirection direction, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_moveSubScreenMember(screenID, direction, __ctx, true, __cb);
    }

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_moveSubScreenMember(int screenID, SubScreenMoveDirection direction, Callback_Conference_moveSubScreenMember __cb)
    {
        return begin_moveSubScreenMember(screenID, direction, null, false, __cb);
    }

    /**
     * 操作显示对象的游标，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_moveSubScreenMember(int screenID, SubScreenMoveDirection direction, java.util.Map<String, String> __ctx, Callback_Conference_moveSubScreenMember __cb)
    {
        return begin_moveSubScreenMember(screenID, direction, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_moveSubScreenMember(int screenID, SubScreenMoveDirection direction, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__moveSubScreenMember_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __moveSubScreenMember_name, __cb);
        try
        {
            __result.__prepare(__moveSubScreenMember_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(screenID);
            direction.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_moveSubScreenMember(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __moveSubScreenMember_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    moveSubScreenMemberById(int screenID, String ID)
    {
        return moveSubScreenMemberById(screenID, ID, null, false);
    }

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    moveSubScreenMemberById(int screenID, String ID, java.util.Map<String, String> __ctx)
    {
        return moveSubScreenMemberById(screenID, ID, __ctx, true);
    }

    private int
    moveSubScreenMemberById(int screenID, String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("moveSubScreenMemberById");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.moveSubScreenMemberById(screenID, ID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __moveSubScreenMemberById_name = "moveSubScreenMemberById";

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_moveSubScreenMemberById(int screenID, String ID)
    {
        return begin_moveSubScreenMemberById(screenID, ID, null, false, null);
    }

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_moveSubScreenMemberById(int screenID, String ID, java.util.Map<String, String> __ctx)
    {
        return begin_moveSubScreenMemberById(screenID, ID, __ctx, true, null);
    }

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_moveSubScreenMemberById(int screenID, String ID, Ice.Callback __cb)
    {
        return begin_moveSubScreenMemberById(screenID, ID, null, false, __cb);
    }

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_moveSubScreenMemberById(int screenID, String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_moveSubScreenMemberById(screenID, ID, __ctx, true, __cb);
    }

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_moveSubScreenMemberById(int screenID, String ID, Callback_Conference_moveSubScreenMemberById __cb)
    {
        return begin_moveSubScreenMemberById(screenID, ID, null, false, __cb);
    }

    /**
     * 操作显示队列中哪个对象，分屏的屏幕模式必须为[SubScreenModeQueue].
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_moveSubScreenMemberById(int screenID, String ID, java.util.Map<String, String> __ctx, Callback_Conference_moveSubScreenMemberById __cb)
    {
        return begin_moveSubScreenMemberById(screenID, ID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_moveSubScreenMemberById(int screenID, String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__moveSubScreenMemberById_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __moveSubScreenMemberById_name, __cb);
        try
        {
            __result.__prepare(__moveSubScreenMemberById_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(screenID);
            __os.writeString(ID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_moveSubScreenMemberById(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __moveSubScreenMemberById_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    muteAllMicrophone(boolean mute)
    {
        return muteAllMicrophone(mute, null, false);
    }

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    muteAllMicrophone(boolean mute, java.util.Map<String, String> __ctx)
    {
        return muteAllMicrophone(mute, __ctx, true);
    }

    private int
    muteAllMicrophone(boolean mute, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("muteAllMicrophone");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.muteAllMicrophone(mute, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __muteAllMicrophone_name = "muteAllMicrophone";

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param __cb The callback object for the operation.
     * @param mute 如果为true则静音，否则取消静音.
     * 
     **/
    public Ice.AsyncResult begin_muteAllMicrophone(boolean mute)
    {
        return begin_muteAllMicrophone(mute, null, false, null);
    }

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param __cb The callback object for the operation.
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_muteAllMicrophone(boolean mute, java.util.Map<String, String> __ctx)
    {
        return begin_muteAllMicrophone(mute, __ctx, true, null);
    }

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param __cb The callback object for the operation.
     * @param mute 如果为true则静音，否则取消静音.
     * 
     **/
    public Ice.AsyncResult begin_muteAllMicrophone(boolean mute, Ice.Callback __cb)
    {
        return begin_muteAllMicrophone(mute, null, false, __cb);
    }

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param __cb The callback object for the operation.
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_muteAllMicrophone(boolean mute, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_muteAllMicrophone(mute, __ctx, true, __cb);
    }

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param __cb The callback object for the operation.
     * @param mute 如果为true则静音，否则取消静音.
     * 
     **/
    public Ice.AsyncResult begin_muteAllMicrophone(boolean mute, Callback_Conference_muteAllMicrophone __cb)
    {
        return begin_muteAllMicrophone(mute, null, false, __cb);
    }

    /**
     * 将会议中所有客户端的麦克风都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的麦克风都是静音状态.
     * 
     * @param __cb The callback object for the operation.
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_muteAllMicrophone(boolean mute, java.util.Map<String, String> __ctx, Callback_Conference_muteAllMicrophone __cb)
    {
        return begin_muteAllMicrophone(mute, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_muteAllMicrophone(boolean mute, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__muteAllMicrophone_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __muteAllMicrophone_name, __cb);
        try
        {
            __result.__prepare(__muteAllMicrophone_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeBool(mute);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_muteAllMicrophone(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __muteAllMicrophone_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    muteAllSpeaker(boolean mute)
    {
        return muteAllSpeaker(mute, null, false);
    }

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    muteAllSpeaker(boolean mute, java.util.Map<String, String> __ctx)
    {
        return muteAllSpeaker(mute, __ctx, true);
    }

    private int
    muteAllSpeaker(boolean mute, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("muteAllSpeaker");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.muteAllSpeaker(mute, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __muteAllSpeaker_name = "muteAllSpeaker";

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param __cb The callback object for the operation.
     * @param mute 如果为true则静音，否则取消静音.
     * 
     **/
    public Ice.AsyncResult begin_muteAllSpeaker(boolean mute)
    {
        return begin_muteAllSpeaker(mute, null, false, null);
    }

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param __cb The callback object for the operation.
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_muteAllSpeaker(boolean mute, java.util.Map<String, String> __ctx)
    {
        return begin_muteAllSpeaker(mute, __ctx, true, null);
    }

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param __cb The callback object for the operation.
     * @param mute 如果为true则静音，否则取消静音.
     * 
     **/
    public Ice.AsyncResult begin_muteAllSpeaker(boolean mute, Ice.Callback __cb)
    {
        return begin_muteAllSpeaker(mute, null, false, __cb);
    }

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param __cb The callback object for the operation.
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_muteAllSpeaker(boolean mute, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_muteAllSpeaker(mute, __ctx, true, __cb);
    }

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param __cb The callback object for the operation.
     * @param mute 如果为true则静音，否则取消静音.
     * 
     **/
    public Ice.AsyncResult begin_muteAllSpeaker(boolean mute, Callback_Conference_muteAllSpeaker __cb)
    {
        return begin_muteAllSpeaker(mute, null, false, __cb);
    }

    /**
     * 将会议中所有客户端的扬声器都静音.如果调用了这个接口,之后添加到会议中的客户端默认都是这次设置的状态.例如调用了该接口并且mute参数为true,则之后添加到会议中的客户端的扬声器都是静音状态.
     * 
     * @param __cb The callback object for the operation.
     * @param mute 如果为true则静音，否则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_muteAllSpeaker(boolean mute, java.util.Map<String, String> __ctx, Callback_Conference_muteAllSpeaker __cb)
    {
        return begin_muteAllSpeaker(mute, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_muteAllSpeaker(boolean mute, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__muteAllSpeaker_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __muteAllSpeaker_name, __cb);
        try
        {
            __result.__prepare(__muteAllSpeaker_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeBool(mute);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_muteAllSpeaker(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __muteAllSpeaker_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 将客户端的麦克静音
     * 
     * @param ID 客户端ID.
     * @param mute 如果为true，则静音，为false，则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    muteClientMicrophone(String ID, boolean mute)
    {
        return muteClientMicrophone(ID, mute, null, false);
    }

    /**
     * 将客户端的麦克静音
     * 
     * @param ID 客户端ID.
     * @param mute 如果为true，则静音，为false，则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    muteClientMicrophone(String ID, boolean mute, java.util.Map<String, String> __ctx)
    {
        return muteClientMicrophone(ID, mute, __ctx, true);
    }

    private int
    muteClientMicrophone(String ID, boolean mute, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("muteClientMicrophone");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.muteClientMicrophone(ID, mute, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __muteClientMicrophone_name = "muteClientMicrophone";

    /**
     * 将客户端的麦克静音
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     **/
    public Ice.AsyncResult begin_muteClientMicrophone(String ID, boolean mute)
    {
        return begin_muteClientMicrophone(ID, mute, null, false, null);
    }

    /**
     * 将客户端的麦克静音
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_muteClientMicrophone(String ID, boolean mute, java.util.Map<String, String> __ctx)
    {
        return begin_muteClientMicrophone(ID, mute, __ctx, true, null);
    }

    /**
     * 将客户端的麦克静音
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     **/
    public Ice.AsyncResult begin_muteClientMicrophone(String ID, boolean mute, Ice.Callback __cb)
    {
        return begin_muteClientMicrophone(ID, mute, null, false, __cb);
    }

    /**
     * 将客户端的麦克静音
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_muteClientMicrophone(String ID, boolean mute, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_muteClientMicrophone(ID, mute, __ctx, true, __cb);
    }

    /**
     * 将客户端的麦克静音
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     **/
    public Ice.AsyncResult begin_muteClientMicrophone(String ID, boolean mute, Callback_Conference_muteClientMicrophone __cb)
    {
        return begin_muteClientMicrophone(ID, mute, null, false, __cb);
    }

    /**
     * 将客户端的麦克静音
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_muteClientMicrophone(String ID, boolean mute, java.util.Map<String, String> __ctx, Callback_Conference_muteClientMicrophone __cb)
    {
        return begin_muteClientMicrophone(ID, mute, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_muteClientMicrophone(String ID, boolean mute, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__muteClientMicrophone_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __muteClientMicrophone_name, __cb);
        try
        {
            __result.__prepare(__muteClientMicrophone_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ID);
            __os.writeBool(mute);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_muteClientMicrophone(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __muteClientMicrophone_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 将客户端的扬声器静音
     * 
     * @param ID 客户端ID.
     * @param mute 如果为true，则静音，为false，则取消静音.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    muteClientSpeaker(String ID, boolean mute)
    {
        return muteClientSpeaker(ID, mute, null, false);
    }

    /**
     * 将客户端的扬声器静音
     * 
     * @param ID 客户端ID.
     * @param mute 如果为true，则静音，为false，则取消静音.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    muteClientSpeaker(String ID, boolean mute, java.util.Map<String, String> __ctx)
    {
        return muteClientSpeaker(ID, mute, __ctx, true);
    }

    private int
    muteClientSpeaker(String ID, boolean mute, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("muteClientSpeaker");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.muteClientSpeaker(ID, mute, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __muteClientSpeaker_name = "muteClientSpeaker";

    /**
     * 将客户端的扬声器静音
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     **/
    public Ice.AsyncResult begin_muteClientSpeaker(String ID, boolean mute)
    {
        return begin_muteClientSpeaker(ID, mute, null, false, null);
    }

    /**
     * 将客户端的扬声器静音
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_muteClientSpeaker(String ID, boolean mute, java.util.Map<String, String> __ctx)
    {
        return begin_muteClientSpeaker(ID, mute, __ctx, true, null);
    }

    /**
     * 将客户端的扬声器静音
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     **/
    public Ice.AsyncResult begin_muteClientSpeaker(String ID, boolean mute, Ice.Callback __cb)
    {
        return begin_muteClientSpeaker(ID, mute, null, false, __cb);
    }

    /**
     * 将客户端的扬声器静音
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_muteClientSpeaker(String ID, boolean mute, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_muteClientSpeaker(ID, mute, __ctx, true, __cb);
    }

    /**
     * 将客户端的扬声器静音
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     **/
    public Ice.AsyncResult begin_muteClientSpeaker(String ID, boolean mute, Callback_Conference_muteClientSpeaker __cb)
    {
        return begin_muteClientSpeaker(ID, mute, null, false, __cb);
    }

    /**
     * 将客户端的扬声器静音
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_muteClientSpeaker(String ID, boolean mute, java.util.Map<String, String> __ctx, Callback_Conference_muteClientSpeaker __cb)
    {
        return begin_muteClientSpeaker(ID, mute, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_muteClientSpeaker(String ID, boolean mute, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__muteClientSpeaker_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __muteClientSpeaker_name, __cb);
        try
        {
            __result.__prepare(__muteClientSpeaker_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ID);
            __os.writeBool(mute);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_muteClientSpeaker(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __muteClientSpeaker_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 创建一个字幕对象.
     * 
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @param subtitleID 输出创建的字幕对象ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    newSubtitle(SubtitlesStyle style, Ice.IntHolder subtitleID)
    {
        return newSubtitle(style, subtitleID, null, false);
    }

    /**
     * 创建一个字幕对象.
     * 
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @param subtitleID 输出创建的字幕对象ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    newSubtitle(SubtitlesStyle style, Ice.IntHolder subtitleID, java.util.Map<String, String> __ctx)
    {
        return newSubtitle(style, subtitleID, __ctx, true);
    }

    private int
    newSubtitle(SubtitlesStyle style, Ice.IntHolder subtitleID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("newSubtitle");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.newSubtitle(style, subtitleID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __newSubtitle_name = "newSubtitle";

    /**
     * 创建一个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     **/
    public Ice.AsyncResult begin_newSubtitle(SubtitlesStyle style)
    {
        return begin_newSubtitle(style, null, false, null);
    }

    /**
     * 创建一个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_newSubtitle(SubtitlesStyle style, java.util.Map<String, String> __ctx)
    {
        return begin_newSubtitle(style, __ctx, true, null);
    }

    /**
     * 创建一个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     **/
    public Ice.AsyncResult begin_newSubtitle(SubtitlesStyle style, Ice.Callback __cb)
    {
        return begin_newSubtitle(style, null, false, __cb);
    }

    /**
     * 创建一个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_newSubtitle(SubtitlesStyle style, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_newSubtitle(style, __ctx, true, __cb);
    }

    /**
     * 创建一个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     **/
    public Ice.AsyncResult begin_newSubtitle(SubtitlesStyle style, Callback_Conference_newSubtitle __cb)
    {
        return begin_newSubtitle(style, null, false, __cb);
    }

    /**
     * 创建一个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param style 格式化的字符串，定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_newSubtitle(SubtitlesStyle style, java.util.Map<String, String> __ctx, Callback_Conference_newSubtitle __cb)
    {
        return begin_newSubtitle(style, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_newSubtitle(SubtitlesStyle style, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__newSubtitle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __newSubtitle_name, __cb);
        try
        {
            __result.__prepare(__newSubtitle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            style.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param subtitleID 输出创建的字幕对象ID.
     * 
     **/
    public int end_newSubtitle(Ice.IntHolder subtitleID, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __newSubtitle_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        subtitleID.value = __is.readInt();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeAllClient()
    {
        return removeAllClient(null, false);
    }

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeAllClient(java.util.Map<String, String> __ctx)
    {
        return removeAllClient(__ctx, true);
    }

    private int
    removeAllClient(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeAllClient");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.removeAllClient(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeAllClient_name = "removeAllClient";

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_removeAllClient()
    {
        return begin_removeAllClient(null, false, null);
    }

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeAllClient(java.util.Map<String, String> __ctx)
    {
        return begin_removeAllClient(__ctx, true, null);
    }

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_removeAllClient(Ice.Callback __cb)
    {
        return begin_removeAllClient(null, false, __cb);
    }

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeAllClient(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeAllClient(__ctx, true, __cb);
    }

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_removeAllClient(Callback_Conference_removeAllClient __cb)
    {
        return begin_removeAllClient(null, false, __cb);
    }

    /**
     * 从会议中删除所有客户端,并且将客户端释放到客户端池中.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeAllClient(java.util.Map<String, String> __ctx, Callback_Conference_removeAllClient __cb)
    {
        return begin_removeAllClient(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeAllClient(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeAllClient_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeAllClient_name, __cb);
        try
        {
            __result.__prepare(__removeAllClient_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeAllClient(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeAllClient_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeAllClientInChairScreen()
    {
        return removeAllClientInChairScreen(null, false);
    }

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeAllClientInChairScreen(java.util.Map<String, String> __ctx)
    {
        return removeAllClientInChairScreen(__ctx, true);
    }

    private int
    removeAllClientInChairScreen(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeAllClientInChairScreen");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.removeAllClientInChairScreen(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeAllClientInChairScreen_name = "removeAllClientInChairScreen";

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_removeAllClientInChairScreen()
    {
        return begin_removeAllClientInChairScreen(null, false, null);
    }

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeAllClientInChairScreen(java.util.Map<String, String> __ctx)
    {
        return begin_removeAllClientInChairScreen(__ctx, true, null);
    }

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_removeAllClientInChairScreen(Ice.Callback __cb)
    {
        return begin_removeAllClientInChairScreen(null, false, __cb);
    }

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeAllClientInChairScreen(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeAllClientInChairScreen(__ctx, true, __cb);
    }

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_removeAllClientInChairScreen(Callback_Conference_removeAllClientInChairScreen __cb)
    {
        return begin_removeAllClientInChairScreen(null, false, __cb);
    }

    /**
     * 删除主席分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeAllClientInChairScreen(java.util.Map<String, String> __ctx, Callback_Conference_removeAllClientInChairScreen __cb)
    {
        return begin_removeAllClientInChairScreen(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeAllClientInChairScreen(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeAllClientInChairScreen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeAllClientInChairScreen_name, __cb);
        try
        {
            __result.__prepare(__removeAllClientInChairScreen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeAllClientInChairScreen(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeAllClientInChairScreen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 删除分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeAllClientInSubScreen(int screenID)
    {
        return removeAllClientInSubScreen(screenID, null, false);
    }

    /**
     * 删除分屏上所有客户端.
     * 
     * @param screenID 某个分屏的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeAllClientInSubScreen(int screenID, java.util.Map<String, String> __ctx)
    {
        return removeAllClientInSubScreen(screenID, __ctx, true);
    }

    private int
    removeAllClientInSubScreen(int screenID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeAllClientInSubScreen");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.removeAllClientInSubScreen(screenID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeAllClientInSubScreen_name = "removeAllClientInSubScreen";

    /**
     * 删除分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * 
     **/
    public Ice.AsyncResult begin_removeAllClientInSubScreen(int screenID)
    {
        return begin_removeAllClientInSubScreen(screenID, null, false, null);
    }

    /**
     * 删除分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeAllClientInSubScreen(int screenID, java.util.Map<String, String> __ctx)
    {
        return begin_removeAllClientInSubScreen(screenID, __ctx, true, null);
    }

    /**
     * 删除分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * 
     **/
    public Ice.AsyncResult begin_removeAllClientInSubScreen(int screenID, Ice.Callback __cb)
    {
        return begin_removeAllClientInSubScreen(screenID, null, false, __cb);
    }

    /**
     * 删除分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeAllClientInSubScreen(int screenID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeAllClientInSubScreen(screenID, __ctx, true, __cb);
    }

    /**
     * 删除分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * 
     **/
    public Ice.AsyncResult begin_removeAllClientInSubScreen(int screenID, Callback_Conference_removeAllClientInSubScreen __cb)
    {
        return begin_removeAllClientInSubScreen(screenID, null, false, __cb);
    }

    /**
     * 删除分屏上所有客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeAllClientInSubScreen(int screenID, java.util.Map<String, String> __ctx, Callback_Conference_removeAllClientInSubScreen __cb)
    {
        return begin_removeAllClientInSubScreen(screenID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeAllClientInSubScreen(int screenID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeAllClientInSubScreen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeAllClientInSubScreen_name, __cb);
        try
        {
            __result.__prepare(__removeAllClientInSubScreen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(screenID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeAllClientInSubScreen(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeAllClientInSubScreen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeClient(String ID)
    {
        return removeClient(ID, null, false);
    }

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeClient(String ID, java.util.Map<String, String> __ctx)
    {
        return removeClient(ID, __ctx, true);
    }

    private int
    removeClient(String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeClient");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.removeClient(ID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeClient_name = "removeClient";

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     **/
    public Ice.AsyncResult begin_removeClient(String ID)
    {
        return begin_removeClient(ID, null, false, null);
    }

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClient(String ID, java.util.Map<String, String> __ctx)
    {
        return begin_removeClient(ID, __ctx, true, null);
    }

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     **/
    public Ice.AsyncResult begin_removeClient(String ID, Ice.Callback __cb)
    {
        return begin_removeClient(ID, null, false, __cb);
    }

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClient(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeClient(ID, __ctx, true, __cb);
    }

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     **/
    public Ice.AsyncResult begin_removeClient(String ID, Callback_Conference_removeClient __cb)
    {
        return begin_removeClient(ID, null, false, __cb);
    }

    /**
     * 从会议中删除一个客户端ID，如果该客户端为连接状态，会被中断连接,并且重新释放到客户端池中,对于删除客户端,调用者可以不等待消息,直接认为删除成功，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClient(String ID, java.util.Map<String, String> __ctx, Callback_Conference_removeClient __cb)
    {
        return begin_removeClient(ID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeClient(String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeClient_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeClient_name, __cb);
        try
        {
            __result.__prepare(__removeClient_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeClient(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeClient_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param ID 客户端ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeClientFromChairScreen(String ID)
    {
        return removeClientFromChairScreen(ID, null, false);
    }

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeClientFromChairScreen(String ID, java.util.Map<String, String> __ctx)
    {
        return removeClientFromChairScreen(ID, __ctx, true);
    }

    private int
    removeClientFromChairScreen(String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeClientFromChairScreen");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.removeClientFromChairScreen(ID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeClientFromChairScreen_name = "removeClientFromChairScreen";

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     **/
    public Ice.AsyncResult begin_removeClientFromChairScreen(String ID)
    {
        return begin_removeClientFromChairScreen(ID, null, false, null);
    }

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientFromChairScreen(String ID, java.util.Map<String, String> __ctx)
    {
        return begin_removeClientFromChairScreen(ID, __ctx, true, null);
    }

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     **/
    public Ice.AsyncResult begin_removeClientFromChairScreen(String ID, Ice.Callback __cb)
    {
        return begin_removeClientFromChairScreen(ID, null, false, __cb);
    }

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientFromChairScreen(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeClientFromChairScreen(ID, __ctx, true, __cb);
    }

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     **/
    public Ice.AsyncResult begin_removeClientFromChairScreen(String ID, Callback_Conference_removeClientFromChairScreen __cb)
    {
        return begin_removeClientFromChairScreen(ID, null, false, __cb);
    }

    /**
     * 从主席分屏上删除某个客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientFromChairScreen(String ID, java.util.Map<String, String> __ctx, Callback_Conference_removeClientFromChairScreen __cb)
    {
        return begin_removeClientFromChairScreen(ID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeClientFromChairScreen(String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeClientFromChairScreen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeClientFromChairScreen_name, __cb);
        try
        {
            __result.__prepare(__removeClientFromChairScreen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeClientFromChairScreen(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeClientFromChairScreen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端的ID，如果ID为空("")，则表示一处该分屏上所有终端.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeClientFromSubScreen(int screenID, String ID)
    {
        return removeClientFromSubScreen(screenID, ID, null, false);
    }

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param ID 客户端的ID，如果ID为空("")，则表示一处该分屏上所有终端.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeClientFromSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx)
    {
        return removeClientFromSubScreen(screenID, ID, __ctx, true);
    }

    private int
    removeClientFromSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeClientFromSubScreen");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.removeClientFromSubScreen(screenID, ID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeClientFromSubScreen_name = "removeClientFromSubScreen";

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_removeClientFromSubScreen(int screenID, String ID)
    {
        return begin_removeClientFromSubScreen(screenID, ID, null, false, null);
    }

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientFromSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx)
    {
        return begin_removeClientFromSubScreen(screenID, ID, __ctx, true, null);
    }

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_removeClientFromSubScreen(int screenID, String ID, Ice.Callback __cb)
    {
        return begin_removeClientFromSubScreen(screenID, ID, null, false, __cb);
    }

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientFromSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeClientFromSubScreen(screenID, ID, __ctx, true, __cb);
    }

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_removeClientFromSubScreen(int screenID, String ID, Callback_Conference_removeClientFromSubScreen __cb)
    {
        return begin_removeClientFromSubScreen(screenID, ID, null, false, __cb);
    }

    /**
     * 从某个分屏上移除一个客户端,注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientFromSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx, Callback_Conference_removeClientFromSubScreen __cb)
    {
        return begin_removeClientFromSubScreen(screenID, ID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeClientFromSubScreen(int screenID, String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeClientFromSubScreen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeClientFromSubScreen_name, __cb);
        try
        {
            __result.__prepare(__removeClientFromSubScreen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(screenID);
            __os.writeString(ID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeClientFromSubScreen(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeClientFromSubScreen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeClientList(String[] list)
    {
        return removeClientList(list, null, false);
    }

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeClientList(String[] list, java.util.Map<String, String> __ctx)
    {
        return removeClientList(list, __ctx, true);
    }

    private int
    removeClientList(String[] list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeClientList");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.removeClientList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeClientList_name = "removeClientList";

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     **/
    public Ice.AsyncResult begin_removeClientList(String[] list)
    {
        return begin_removeClientList(list, null, false, null);
    }

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientList(String[] list, java.util.Map<String, String> __ctx)
    {
        return begin_removeClientList(list, __ctx, true, null);
    }

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     **/
    public Ice.AsyncResult begin_removeClientList(String[] list, Ice.Callback __cb)
    {
        return begin_removeClientList(list, null, false, __cb);
    }

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientList(String[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeClientList(list, __ctx, true, __cb);
    }

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     **/
    public Ice.AsyncResult begin_removeClientList(String[] list, Callback_Conference_removeClientList __cb)
    {
        return begin_removeClientList(list, null, false, __cb);
    }

    /**
     * 从会议中删除多个客户端,并且将客户端释放到客户端池中，!!! 请注意，别再调用free接口对client进行free.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientList(String[] list, java.util.Map<String, String> __ctx, Callback_Conference_removeClientList __cb)
    {
        return begin_removeClientList(list, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeClientList(String[] list, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeClientList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeClientList_name, __cb);
        try
        {
            __result.__prepare(__removeClientList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            ClientIDListHelper.write(__os, list);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeClientList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeClientList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeClientListFromChairScreen(String[] list)
    {
        return removeClientListFromChairScreen(list, null, false);
    }

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeClientListFromChairScreen(String[] list, java.util.Map<String, String> __ctx)
    {
        return removeClientListFromChairScreen(list, __ctx, true);
    }

    private int
    removeClientListFromChairScreen(String[] list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeClientListFromChairScreen");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.removeClientListFromChairScreen(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeClientListFromChairScreen_name = "removeClientListFromChairScreen";

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     **/
    public Ice.AsyncResult begin_removeClientListFromChairScreen(String[] list)
    {
        return begin_removeClientListFromChairScreen(list, null, false, null);
    }

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientListFromChairScreen(String[] list, java.util.Map<String, String> __ctx)
    {
        return begin_removeClientListFromChairScreen(list, __ctx, true, null);
    }

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     **/
    public Ice.AsyncResult begin_removeClientListFromChairScreen(String[] list, Ice.Callback __cb)
    {
        return begin_removeClientListFromChairScreen(list, null, false, __cb);
    }

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientListFromChairScreen(String[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeClientListFromChairScreen(list, __ctx, true, __cb);
    }

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     **/
    public Ice.AsyncResult begin_removeClientListFromChairScreen(String[] list, Callback_Conference_removeClientListFromChairScreen __cb)
    {
        return begin_removeClientListFromChairScreen(list, null, false, __cb);
    }

    /**
     * 从主席分屏上删除多个客户端.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientListFromChairScreen(String[] list, java.util.Map<String, String> __ctx, Callback_Conference_removeClientListFromChairScreen __cb)
    {
        return begin_removeClientListFromChairScreen(list, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeClientListFromChairScreen(String[] list, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeClientListFromChairScreen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeClientListFromChairScreen_name, __cb);
        try
        {
            __result.__prepare(__removeClientListFromChairScreen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            ClientIDListHelper.write(__os, list);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeClientListFromChairScreen(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeClientListFromChairScreen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeClientListFromSubScreen(int screenID, String[] list)
    {
        return removeClientListFromSubScreen(screenID, list, null, false);
    }

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param screenID 某个分屏的索引.
     * @param list 客户端ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeClientListFromSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx)
    {
        return removeClientListFromSubScreen(screenID, list, __ctx, true);
    }

    private int
    removeClientListFromSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeClientListFromSubScreen");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.removeClientListFromSubScreen(screenID, list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeClientListFromSubScreen_name = "removeClientListFromSubScreen";

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_removeClientListFromSubScreen(int screenID, String[] list)
    {
        return begin_removeClientListFromSubScreen(screenID, list, null, false, null);
    }

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientListFromSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx)
    {
        return begin_removeClientListFromSubScreen(screenID, list, __ctx, true, null);
    }

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_removeClientListFromSubScreen(int screenID, String[] list, Ice.Callback __cb)
    {
        return begin_removeClientListFromSubScreen(screenID, list, null, false, __cb);
    }

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientListFromSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeClientListFromSubScreen(screenID, list, __ctx, true, __cb);
    }

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_removeClientListFromSubScreen(int screenID, String[] list, Callback_Conference_removeClientListFromSubScreen __cb)
    {
        return begin_removeClientListFromSubScreen(screenID, list, null, false, __cb);
    }

    /**
     * 从某个分屏上移除多个客户端.注意!!!,如果该分屏所在的屏幕的分屏模式是单屏,而该终端是分屏上最后一个客户端,那么该接口的调用结果会导致所有连接都被拆除,会议中其它终端都收不到视频流,请勿在会议结束之前进行这种调用.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeClientListFromSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx, Callback_Conference_removeClientListFromSubScreen __cb)
    {
        return begin_removeClientListFromSubScreen(screenID, list, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeClientListFromSubScreen(int screenID, String[] list, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeClientListFromSubScreen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeClientListFromSubScreen_name, __cb);
        try
        {
            __result.__prepare(__removeClientListFromSubScreen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(screenID);
            ClientIDListHelper.write(__os, list);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeClientListFromSubScreen(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeClientListFromSubScreen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param mode 屏幕的模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setChairScreenMode(SubScreenMode mode)
    {
        return setChairScreenMode(mode, null, false);
    }

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param mode 屏幕的模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setChairScreenMode(SubScreenMode mode, java.util.Map<String, String> __ctx)
    {
        return setChairScreenMode(mode, __ctx, true);
    }

    private int
    setChairScreenMode(SubScreenMode mode, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setChairScreenMode");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setChairScreenMode(mode, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setChairScreenMode_name = "setChairScreenMode";

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param __cb The callback object for the operation.
     * @param mode 屏幕的模式.
     * 
     **/
    public Ice.AsyncResult begin_setChairScreenMode(SubScreenMode mode)
    {
        return begin_setChairScreenMode(mode, null, false, null);
    }

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param __cb The callback object for the operation.
     * @param mode 屏幕的模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setChairScreenMode(SubScreenMode mode, java.util.Map<String, String> __ctx)
    {
        return begin_setChairScreenMode(mode, __ctx, true, null);
    }

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param __cb The callback object for the operation.
     * @param mode 屏幕的模式.
     * 
     **/
    public Ice.AsyncResult begin_setChairScreenMode(SubScreenMode mode, Ice.Callback __cb)
    {
        return begin_setChairScreenMode(mode, null, false, __cb);
    }

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param __cb The callback object for the operation.
     * @param mode 屏幕的模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setChairScreenMode(SubScreenMode mode, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setChairScreenMode(mode, __ctx, true, __cb);
    }

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param __cb The callback object for the operation.
     * @param mode 屏幕的模式.
     * 
     **/
    public Ice.AsyncResult begin_setChairScreenMode(SubScreenMode mode, Callback_Conference_setChairScreenMode __cb)
    {
        return begin_setChairScreenMode(mode, null, false, __cb);
    }

    /**
     * 设置主席的屏幕模式. 主席观看的屏幕不能分屏，等于分屏模式只能是[ScreenSplitModeS1]，屏幕模式一旦修改，其中添加的客户端都会被删除
     * 
     * @param __cb The callback object for the operation.
     * @param mode 屏幕的模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setChairScreenMode(SubScreenMode mode, java.util.Map<String, String> __ctx, Callback_Conference_setChairScreenMode __cb)
    {
        return begin_setChairScreenMode(mode, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setChairScreenMode(SubScreenMode mode, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setChairScreenMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setChairScreenMode_name, __cb);
        try
        {
            __result.__prepare(__setChairScreenMode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            mode.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setChairScreenMode(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setChairScreenMode_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置一个客户端为主席.
     * 
     * @param ID 客户端ID.
     * @param enable 如果为true则设置为主席，否则取消主席设置.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setClientAsChair(String ID, boolean enable)
    {
        return setClientAsChair(ID, enable, null, false);
    }

    /**
     * 设置一个客户端为主席.
     * 
     * @param ID 客户端ID.
     * @param enable 如果为true则设置为主席，否则取消主席设置.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setClientAsChair(String ID, boolean enable, java.util.Map<String, String> __ctx)
    {
        return setClientAsChair(ID, enable, __ctx, true);
    }

    private int
    setClientAsChair(String ID, boolean enable, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setClientAsChair");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setClientAsChair(ID, enable, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setClientAsChair_name = "setClientAsChair";

    /**
     * 设置一个客户端为主席.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     **/
    public Ice.AsyncResult begin_setClientAsChair(String ID, boolean enable)
    {
        return begin_setClientAsChair(ID, enable, null, false, null);
    }

    /**
     * 设置一个客户端为主席.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientAsChair(String ID, boolean enable, java.util.Map<String, String> __ctx)
    {
        return begin_setClientAsChair(ID, enable, __ctx, true, null);
    }

    /**
     * 设置一个客户端为主席.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     **/
    public Ice.AsyncResult begin_setClientAsChair(String ID, boolean enable, Ice.Callback __cb)
    {
        return begin_setClientAsChair(ID, enable, null, false, __cb);
    }

    /**
     * 设置一个客户端为主席.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientAsChair(String ID, boolean enable, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setClientAsChair(ID, enable, __ctx, true, __cb);
    }

    /**
     * 设置一个客户端为主席.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     **/
    public Ice.AsyncResult begin_setClientAsChair(String ID, boolean enable, Callback_Conference_setClientAsChair __cb)
    {
        return begin_setClientAsChair(ID, enable, null, false, __cb);
    }

    /**
     * 设置一个客户端为主席.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientAsChair(String ID, boolean enable, java.util.Map<String, String> __ctx, Callback_Conference_setClientAsChair __cb)
    {
        return begin_setClientAsChair(ID, enable, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setClientAsChair(String ID, boolean enable, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setClientAsChair_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setClientAsChair_name, __cb);
        try
        {
            __result.__prepare(__setClientAsChair_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ID);
            __os.writeBool(enable);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setClientAsChair(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setClientAsChair_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置多个客户端为主席.
     * 
     * @param list 客户端ID列表.
     * @param enable 如果为true则设置为主席，否则取消主席设置.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setClientListAsChair(String[] list, boolean enable)
    {
        return setClientListAsChair(list, enable, null, false);
    }

    /**
     * 设置多个客户端为主席.
     * 
     * @param list 客户端ID列表.
     * @param enable 如果为true则设置为主席，否则取消主席设置.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setClientListAsChair(String[] list, boolean enable, java.util.Map<String, String> __ctx)
    {
        return setClientListAsChair(list, enable, __ctx, true);
    }

    private int
    setClientListAsChair(String[] list, boolean enable, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setClientListAsChair");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setClientListAsChair(list, enable, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setClientListAsChair_name = "setClientListAsChair";

    /**
     * 设置多个客户端为主席.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     **/
    public Ice.AsyncResult begin_setClientListAsChair(String[] list, boolean enable)
    {
        return begin_setClientListAsChair(list, enable, null, false, null);
    }

    /**
     * 设置多个客户端为主席.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientListAsChair(String[] list, boolean enable, java.util.Map<String, String> __ctx)
    {
        return begin_setClientListAsChair(list, enable, __ctx, true, null);
    }

    /**
     * 设置多个客户端为主席.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     **/
    public Ice.AsyncResult begin_setClientListAsChair(String[] list, boolean enable, Ice.Callback __cb)
    {
        return begin_setClientListAsChair(list, enable, null, false, __cb);
    }

    /**
     * 设置多个客户端为主席.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientListAsChair(String[] list, boolean enable, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setClientListAsChair(list, enable, __ctx, true, __cb);
    }

    /**
     * 设置多个客户端为主席.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     **/
    public Ice.AsyncResult begin_setClientListAsChair(String[] list, boolean enable, Callback_Conference_setClientListAsChair __cb)
    {
        return begin_setClientListAsChair(list, enable, null, false, __cb);
    }

    /**
     * 设置多个客户端为主席.
     * 
     * @param __cb The callback object for the operation.
     * @param list 客户端ID列表.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientListAsChair(String[] list, boolean enable, java.util.Map<String, String> __ctx, Callback_Conference_setClientListAsChair __cb)
    {
        return begin_setClientListAsChair(list, enable, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setClientListAsChair(String[] list, boolean enable, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setClientListAsChair_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setClientListAsChair_name, __cb);
        try
        {
            __result.__prepare(__setClientListAsChair_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            ClientIDListHelper.write(__os, list);
            __os.writeBool(enable);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setClientListAsChair(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setClientListAsChair_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param pos 位置枚举.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setClientNamePos(ClientNamePos pos)
    {
        return setClientNamePos(pos, null, false);
    }

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param pos 位置枚举.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setClientNamePos(ClientNamePos pos, java.util.Map<String, String> __ctx)
    {
        return setClientNamePos(pos, __ctx, true);
    }

    private int
    setClientNamePos(ClientNamePos pos, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setClientNamePos");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setClientNamePos(pos, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setClientNamePos_name = "setClientNamePos";

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param __cb The callback object for the operation.
     * @param pos 位置枚举.
     * 
     **/
    public Ice.AsyncResult begin_setClientNamePos(ClientNamePos pos)
    {
        return begin_setClientNamePos(pos, null, false, null);
    }

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param __cb The callback object for the operation.
     * @param pos 位置枚举.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientNamePos(ClientNamePos pos, java.util.Map<String, String> __ctx)
    {
        return begin_setClientNamePos(pos, __ctx, true, null);
    }

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param __cb The callback object for the operation.
     * @param pos 位置枚举.
     * 
     **/
    public Ice.AsyncResult begin_setClientNamePos(ClientNamePos pos, Ice.Callback __cb)
    {
        return begin_setClientNamePos(pos, null, false, __cb);
    }

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param __cb The callback object for the operation.
     * @param pos 位置枚举.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientNamePos(ClientNamePos pos, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setClientNamePos(pos, __ctx, true, __cb);
    }

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param __cb The callback object for the operation.
     * @param pos 位置枚举.
     * 
     **/
    public Ice.AsyncResult begin_setClientNamePos(ClientNamePos pos, Callback_Conference_setClientNamePos __cb)
    {
        return begin_setClientNamePos(pos, null, false, __cb);
    }

    /**
     * 设置客户端名称显示的位置.
     * 
     * @param __cb The callback object for the operation.
     * @param pos 位置枚举.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientNamePos(ClientNamePos pos, java.util.Map<String, String> __ctx, Callback_Conference_setClientNamePos __cb)
    {
        return begin_setClientNamePos(pos, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setClientNamePos(ClientNamePos pos, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setClientNamePos_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setClientNamePos_name, __cb);
        try
        {
            __result.__prepare(__setClientNamePos_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            pos.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setClientNamePos(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setClientNamePos_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setClientNameStyle(SubtitlesStyle style)
    {
        return setClientNameStyle(style, null, false);
    }

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setClientNameStyle(SubtitlesStyle style, java.util.Map<String, String> __ctx)
    {
        return setClientNameStyle(style, __ctx, true);
    }

    private int
    setClientNameStyle(SubtitlesStyle style, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setClientNameStyle");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setClientNameStyle(style, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setClientNameStyle_name = "setClientNameStyle";

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param __cb The callback object for the operation.
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     **/
    public Ice.AsyncResult begin_setClientNameStyle(SubtitlesStyle style)
    {
        return begin_setClientNameStyle(style, null, false, null);
    }

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param __cb The callback object for the operation.
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientNameStyle(SubtitlesStyle style, java.util.Map<String, String> __ctx)
    {
        return begin_setClientNameStyle(style, __ctx, true, null);
    }

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param __cb The callback object for the operation.
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     **/
    public Ice.AsyncResult begin_setClientNameStyle(SubtitlesStyle style, Ice.Callback __cb)
    {
        return begin_setClientNameStyle(style, null, false, __cb);
    }

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param __cb The callback object for the operation.
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientNameStyle(SubtitlesStyle style, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setClientNameStyle(style, __ctx, true, __cb);
    }

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param __cb The callback object for the operation.
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     **/
    public Ice.AsyncResult begin_setClientNameStyle(SubtitlesStyle style, Callback_Conference_setClientNameStyle __cb)
    {
        return begin_setClientNameStyle(style, null, false, __cb);
    }

    /**
     * 设置客户端名称的风格，包括字体，颜色等.
     * 
     * @param __cb The callback object for the operation.
     * @param style 格式化的字符串，格式定义在VMix_Subtitles_PlainText_Para中, ZDQ should fix it, use ice structure instead.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setClientNameStyle(SubtitlesStyle style, java.util.Map<String, String> __ctx, Callback_Conference_setClientNameStyle __cb)
    {
        return begin_setClientNameStyle(style, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setClientNameStyle(SubtitlesStyle style, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setClientNameStyle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setClientNameStyle_name, __cb);
        try
        {
            __result.__prepare(__setClientNameStyle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            style.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setClientNameStyle(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setClientNameStyle_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param fps The conference video fps want to set.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setConferenceVideoFPS(int fps)
    {
        return setConferenceVideoFPS(fps, null, false);
    }

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param fps The conference video fps want to set.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setConferenceVideoFPS(int fps, java.util.Map<String, String> __ctx)
    {
        return setConferenceVideoFPS(fps, __ctx, true);
    }

    private int
    setConferenceVideoFPS(int fps, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setConferenceVideoFPS");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setConferenceVideoFPS(fps, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setConferenceVideoFPS_name = "setConferenceVideoFPS";

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param __cb The callback object for the operation.
     * @param fps The conference video fps want to set.
     * 
     **/
    public Ice.AsyncResult begin_setConferenceVideoFPS(int fps)
    {
        return begin_setConferenceVideoFPS(fps, null, false, null);
    }

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param __cb The callback object for the operation.
     * @param fps The conference video fps want to set.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setConferenceVideoFPS(int fps, java.util.Map<String, String> __ctx)
    {
        return begin_setConferenceVideoFPS(fps, __ctx, true, null);
    }

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param __cb The callback object for the operation.
     * @param fps The conference video fps want to set.
     * 
     **/
    public Ice.AsyncResult begin_setConferenceVideoFPS(int fps, Ice.Callback __cb)
    {
        return begin_setConferenceVideoFPS(fps, null, false, __cb);
    }

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param __cb The callback object for the operation.
     * @param fps The conference video fps want to set.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setConferenceVideoFPS(int fps, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setConferenceVideoFPS(fps, __ctx, true, __cb);
    }

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param __cb The callback object for the operation.
     * @param fps The conference video fps want to set.
     * 
     **/
    public Ice.AsyncResult begin_setConferenceVideoFPS(int fps, Callback_Conference_setConferenceVideoFPS __cb)
    {
        return begin_setConferenceVideoFPS(fps, null, false, __cb);
    }

    /**
     * 设置会议视频的fps，默认为30.
     * 
     * @param __cb The callback object for the operation.
     * @param fps The conference video fps want to set.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setConferenceVideoFPS(int fps, java.util.Map<String, String> __ctx, Callback_Conference_setConferenceVideoFPS __cb)
    {
        return begin_setConferenceVideoFPS(fps, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setConferenceVideoFPS(int fps, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setConferenceVideoFPS_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setConferenceVideoFPS_name, __cb);
        try
        {
            __result.__prepare(__setConferenceVideoFPS_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(fps);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setConferenceVideoFPS(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setConferenceVideoFPS_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setExtScreenSize(int width, int height)
    {
        return setExtScreenSize(width, height, null, false);
    }

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setExtScreenSize(int width, int height, java.util.Map<String, String> __ctx)
    {
        return setExtScreenSize(width, height, __ctx, true);
    }

    private int
    setExtScreenSize(int width, int height, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setExtScreenSize");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setExtScreenSize(width, height, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setExtScreenSize_name = "setExtScreenSize";

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param __cb The callback object for the operation.
     * @param width 宽.
     **/
    public Ice.AsyncResult begin_setExtScreenSize(int width, int height)
    {
        return begin_setExtScreenSize(width, height, null, false, null);
    }

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param __cb The callback object for the operation.
     * @param width 宽.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setExtScreenSize(int width, int height, java.util.Map<String, String> __ctx)
    {
        return begin_setExtScreenSize(width, height, __ctx, true, null);
    }

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param __cb The callback object for the operation.
     * @param width 宽.
     **/
    public Ice.AsyncResult begin_setExtScreenSize(int width, int height, Ice.Callback __cb)
    {
        return begin_setExtScreenSize(width, height, null, false, __cb);
    }

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param __cb The callback object for the operation.
     * @param width 宽.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setExtScreenSize(int width, int height, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setExtScreenSize(width, height, __ctx, true, __cb);
    }

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param __cb The callback object for the operation.
     * @param width 宽.
     **/
    public Ice.AsyncResult begin_setExtScreenSize(int width, int height, Callback_Conference_setExtScreenSize __cb)
    {
        return begin_setExtScreenSize(width, height, null, false, __cb);
    }

    /**
     * 设置会议辅流的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为XGA.
     * 
     * @param __cb The callback object for the operation.
     * @param width 宽.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setExtScreenSize(int width, int height, java.util.Map<String, String> __ctx, Callback_Conference_setExtScreenSize __cb)
    {
        return begin_setExtScreenSize(width, height, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setExtScreenSize(int width, int height, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setExtScreenSize_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setExtScreenSize_name, __cb);
        try
        {
            __result.__prepare(__setExtScreenSize_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(width);
            __os.writeInt(height);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setExtScreenSize(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setExtScreenSize_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setLecturer(String ID)
    {
        return setLecturer(ID, null, false);
    }

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setLecturer(String ID, java.util.Map<String, String> __ctx)
    {
        return setLecturer(ID, __ctx, true);
    }

    private int
    setLecturer(String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLecturer");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setLecturer(ID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setLecturer_name = "setLecturer";

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     **/
    public Ice.AsyncResult begin_setLecturer(String ID)
    {
        return begin_setLecturer(ID, null, false, null);
    }

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setLecturer(String ID, java.util.Map<String, String> __ctx)
    {
        return begin_setLecturer(ID, __ctx, true, null);
    }

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     **/
    public Ice.AsyncResult begin_setLecturer(String ID, Ice.Callback __cb)
    {
        return begin_setLecturer(ID, null, false, __cb);
    }

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setLecturer(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setLecturer(ID, __ctx, true, __cb);
    }

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     **/
    public Ice.AsyncResult begin_setLecturer(String ID, Callback_Conference_setLecturer __cb)
    {
        return begin_setLecturer(ID, null, false, __cb);
    }

    /**
     * 设置某个客户端为会议的发言者, 一个会议只能有一个发言者, 如果设置之前有一个发言者，之前的发言者将会被替换.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 客户端ID，如果为空，即""，则取消发言者模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setLecturer(String ID, java.util.Map<String, String> __ctx, Callback_Conference_setLecturer __cb)
    {
        return begin_setLecturer(ID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setLecturer(String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setLecturer_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setLecturer_name, __cb);
        try
        {
            __result.__prepare(__setLecturer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setLecturer(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setLecturer_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setScreenSize(int width, int height)
    {
        return setScreenSize(width, height, null, false);
    }

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param width 宽.
     * @param height 高.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setScreenSize(int width, int height, java.util.Map<String, String> __ctx)
    {
        return setScreenSize(width, height, __ctx, true);
    }

    private int
    setScreenSize(int width, int height, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setScreenSize");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setScreenSize(width, height, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setScreenSize_name = "setScreenSize";

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param __cb The callback object for the operation.
     * @param width 宽.
     **/
    public Ice.AsyncResult begin_setScreenSize(int width, int height)
    {
        return begin_setScreenSize(width, height, null, false, null);
    }

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param __cb The callback object for the operation.
     * @param width 宽.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setScreenSize(int width, int height, java.util.Map<String, String> __ctx)
    {
        return begin_setScreenSize(width, height, __ctx, true, null);
    }

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param __cb The callback object for the operation.
     * @param width 宽.
     **/
    public Ice.AsyncResult begin_setScreenSize(int width, int height, Ice.Callback __cb)
    {
        return begin_setScreenSize(width, height, null, false, __cb);
    }

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param __cb The callback object for the operation.
     * @param width 宽.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setScreenSize(int width, int height, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setScreenSize(width, height, __ctx, true, __cb);
    }

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param __cb The callback object for the operation.
     * @param width 宽.
     **/
    public Ice.AsyncResult begin_setScreenSize(int width, int height, Callback_Conference_setScreenSize __cb)
    {
        return begin_setScreenSize(width, height, null, false, __cb);
    }

    /**
     * 设置会议的视频画面大小, 需要在会议开始前设置，即调用conference->[start]函数之前，默认大小为720P.
     * 
     * @param __cb The callback object for the operation.
     * @param width 宽.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setScreenSize(int width, int height, java.util.Map<String, String> __ctx, Callback_Conference_setScreenSize __cb)
    {
        return begin_setScreenSize(width, height, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setScreenSize(int width, int height, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setScreenSize_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setScreenSize_name, __cb);
        try
        {
            __result.__prepare(__setScreenSize_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(width);
            __os.writeInt(height);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setScreenSize(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setScreenSize_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param mode 分屏模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setScreenSplitMode(ScreenSplitMode mode)
    {
        return setScreenSplitMode(mode, null, false);
    }

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param mode 分屏模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setScreenSplitMode(ScreenSplitMode mode, java.util.Map<String, String> __ctx)
    {
        return setScreenSplitMode(mode, __ctx, true);
    }

    private int
    setScreenSplitMode(ScreenSplitMode mode, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setScreenSplitMode");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setScreenSplitMode(mode, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setScreenSplitMode_name = "setScreenSplitMode";

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param __cb The callback object for the operation.
     * @param mode 分屏模式.
     * 
     **/
    public Ice.AsyncResult begin_setScreenSplitMode(ScreenSplitMode mode)
    {
        return begin_setScreenSplitMode(mode, null, false, null);
    }

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param __cb The callback object for the operation.
     * @param mode 分屏模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setScreenSplitMode(ScreenSplitMode mode, java.util.Map<String, String> __ctx)
    {
        return begin_setScreenSplitMode(mode, __ctx, true, null);
    }

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param __cb The callback object for the operation.
     * @param mode 分屏模式.
     * 
     **/
    public Ice.AsyncResult begin_setScreenSplitMode(ScreenSplitMode mode, Ice.Callback __cb)
    {
        return begin_setScreenSplitMode(mode, null, false, __cb);
    }

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param __cb The callback object for the operation.
     * @param mode 分屏模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setScreenSplitMode(ScreenSplitMode mode, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setScreenSplitMode(mode, __ctx, true, __cb);
    }

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param __cb The callback object for the operation.
     * @param mode 分屏模式.
     * 
     **/
    public Ice.AsyncResult begin_setScreenSplitMode(ScreenSplitMode mode, Callback_Conference_setScreenSplitMode __cb)
    {
        return begin_setScreenSplitMode(mode, null, false, __cb);
    }

    /**
     * 设置分屏模式,如果分屏数量由多变少,那么去掉的分屏中的客户端及模式都会清除.
     * 
     * @param __cb The callback object for the operation.
     * @param mode 分屏模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setScreenSplitMode(ScreenSplitMode mode, java.util.Map<String, String> __ctx, Callback_Conference_setScreenSplitMode __cb)
    {
        return begin_setScreenSplitMode(mode, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setScreenSplitMode(ScreenSplitMode mode, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setScreenSplitMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setScreenSplitMode_name, __cb);
        try
        {
            __result.__prepare(__setScreenSplitMode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            mode.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setScreenSplitMode(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setScreenSplitMode_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param screenID 某个分屏的索引.
     * @param mode 子屏幕模式.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setSubScreenMode(int screenID, SubScreenMode mode)
    {
        return setSubScreenMode(screenID, mode, null, false);
    }

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param screenID 某个分屏的索引.
     * @param mode 子屏幕模式.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setSubScreenMode(int screenID, SubScreenMode mode, java.util.Map<String, String> __ctx)
    {
        return setSubScreenMode(screenID, mode, __ctx, true);
    }

    private int
    setSubScreenMode(int screenID, SubScreenMode mode, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setSubScreenMode");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setSubScreenMode(screenID, mode, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setSubScreenMode_name = "setSubScreenMode";

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_setSubScreenMode(int screenID, SubScreenMode mode)
    {
        return begin_setSubScreenMode(screenID, mode, null, false, null);
    }

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setSubScreenMode(int screenID, SubScreenMode mode, java.util.Map<String, String> __ctx)
    {
        return begin_setSubScreenMode(screenID, mode, __ctx, true, null);
    }

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_setSubScreenMode(int screenID, SubScreenMode mode, Ice.Callback __cb)
    {
        return begin_setSubScreenMode(screenID, mode, null, false, __cb);
    }

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setSubScreenMode(int screenID, SubScreenMode mode, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setSubScreenMode(screenID, mode, __ctx, true, __cb);
    }

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     **/
    public Ice.AsyncResult begin_setSubScreenMode(int screenID, SubScreenMode mode, Callback_Conference_setSubScreenMode __cb)
    {
        return begin_setSubScreenMode(screenID, mode, null, false, __cb);
    }

    /**
     * 设置某一个分屏的模式，如果修改的模式和之前的模式不同，其中添加的客户端将会被删除.
     * 
     * @param __cb The callback object for the operation.
     * @param screenID 某个分屏的索引.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setSubScreenMode(int screenID, SubScreenMode mode, java.util.Map<String, String> __ctx, Callback_Conference_setSubScreenMode __cb)
    {
        return begin_setSubScreenMode(screenID, mode, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setSubScreenMode(int screenID, SubScreenMode mode, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setSubScreenMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setSubScreenMode_name, __cb);
        try
        {
            __result.__prepare(__setSubScreenMode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(screenID);
            mode.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setSubScreenMode(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setSubScreenMode_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置字幕对象的动作.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param action 格式化的字符串，定义在VMix_Subtitles_Move_Attr中, ZDQ should fix it, use ice structure instead.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setSubtitleAction(int subtitleID, SubtitlesAction action)
    {
        return setSubtitleAction(subtitleID, action, null, false);
    }

    /**
     * 设置字幕对象的动作.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param action 格式化的字符串，定义在VMix_Subtitles_Move_Attr中, ZDQ should fix it, use ice structure instead.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setSubtitleAction(int subtitleID, SubtitlesAction action, java.util.Map<String, String> __ctx)
    {
        return setSubtitleAction(subtitleID, action, __ctx, true);
    }

    private int
    setSubtitleAction(int subtitleID, SubtitlesAction action, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setSubtitleAction");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.setSubtitleAction(subtitleID, action, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setSubtitleAction_name = "setSubtitleAction";

    /**
     * 设置字幕对象的动作.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     **/
    public Ice.AsyncResult begin_setSubtitleAction(int subtitleID, SubtitlesAction action)
    {
        return begin_setSubtitleAction(subtitleID, action, null, false, null);
    }

    /**
     * 设置字幕对象的动作.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setSubtitleAction(int subtitleID, SubtitlesAction action, java.util.Map<String, String> __ctx)
    {
        return begin_setSubtitleAction(subtitleID, action, __ctx, true, null);
    }

    /**
     * 设置字幕对象的动作.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     **/
    public Ice.AsyncResult begin_setSubtitleAction(int subtitleID, SubtitlesAction action, Ice.Callback __cb)
    {
        return begin_setSubtitleAction(subtitleID, action, null, false, __cb);
    }

    /**
     * 设置字幕对象的动作.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setSubtitleAction(int subtitleID, SubtitlesAction action, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setSubtitleAction(subtitleID, action, __ctx, true, __cb);
    }

    /**
     * 设置字幕对象的动作.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     **/
    public Ice.AsyncResult begin_setSubtitleAction(int subtitleID, SubtitlesAction action, Callback_Conference_setSubtitleAction __cb)
    {
        return begin_setSubtitleAction(subtitleID, action, null, false, __cb);
    }

    /**
     * 设置字幕对象的动作.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setSubtitleAction(int subtitleID, SubtitlesAction action, java.util.Map<String, String> __ctx, Callback_Conference_setSubtitleAction __cb)
    {
        return begin_setSubtitleAction(subtitleID, action, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setSubtitleAction(int subtitleID, SubtitlesAction action, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setSubtitleAction_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setSubtitleAction_name, __cb);
        try
        {
            __result.__prepare(__setSubtitleAction_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(subtitleID);
            action.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setSubtitleAction(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setSubtitleAction_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    showAllClientName(boolean show)
    {
        return showAllClientName(show, null, false);
    }

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    showAllClientName(boolean show, java.util.Map<String, String> __ctx)
    {
        return showAllClientName(show, __ctx, true);
    }

    private int
    showAllClientName(boolean show, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("showAllClientName");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.showAllClientName(show, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __showAllClientName_name = "showAllClientName";

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param __cb The callback object for the operation.
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     **/
    public Ice.AsyncResult begin_showAllClientName(boolean show)
    {
        return begin_showAllClientName(show, null, false, null);
    }

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param __cb The callback object for the operation.
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_showAllClientName(boolean show, java.util.Map<String, String> __ctx)
    {
        return begin_showAllClientName(show, __ctx, true, null);
    }

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param __cb The callback object for the operation.
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     **/
    public Ice.AsyncResult begin_showAllClientName(boolean show, Ice.Callback __cb)
    {
        return begin_showAllClientName(show, null, false, __cb);
    }

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param __cb The callback object for the operation.
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_showAllClientName(boolean show, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_showAllClientName(show, __ctx, true, __cb);
    }

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param __cb The callback object for the operation.
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     **/
    public Ice.AsyncResult begin_showAllClientName(boolean show, Callback_Conference_showAllClientName __cb)
    {
        return begin_showAllClientName(show, null, false, __cb);
    }

    /**
     * 在屏幕上显示所有客户端的名称.
     * 
     * @param __cb The callback object for the operation.
     * @param show 如果值为true，则显示名称，否则隐藏显示.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_showAllClientName(boolean show, java.util.Map<String, String> __ctx, Callback_Conference_showAllClientName __cb)
    {
        return begin_showAllClientName(show, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_showAllClientName(boolean show, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__showAllClientName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __showAllClientName_name, __cb);
        try
        {
            __result.__prepare(__showAllClientName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeBool(show);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_showAllClientName(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __showAllClientName_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param show 如果为true，则显示，否则隐藏.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    showSubtitle(int subtitleID, boolean show)
    {
        return showSubtitle(subtitleID, show, null, false);
    }

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param subtitleID 字幕对象的ID.
     * @param show 如果为true，则显示，否则隐藏.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    showSubtitle(int subtitleID, boolean show, java.util.Map<String, String> __ctx)
    {
        return showSubtitle(subtitleID, show, __ctx, true);
    }

    private int
    showSubtitle(int subtitleID, boolean show, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("showSubtitle");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.showSubtitle(subtitleID, show, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __showSubtitle_name = "showSubtitle";

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     **/
    public Ice.AsyncResult begin_showSubtitle(int subtitleID, boolean show)
    {
        return begin_showSubtitle(subtitleID, show, null, false, null);
    }

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_showSubtitle(int subtitleID, boolean show, java.util.Map<String, String> __ctx)
    {
        return begin_showSubtitle(subtitleID, show, __ctx, true, null);
    }

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     **/
    public Ice.AsyncResult begin_showSubtitle(int subtitleID, boolean show, Ice.Callback __cb)
    {
        return begin_showSubtitle(subtitleID, show, null, false, __cb);
    }

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_showSubtitle(int subtitleID, boolean show, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_showSubtitle(subtitleID, show, __ctx, true, __cb);
    }

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     **/
    public Ice.AsyncResult begin_showSubtitle(int subtitleID, boolean show, Callback_Conference_showSubtitle __cb)
    {
        return begin_showSubtitle(subtitleID, show, null, false, __cb);
    }

    /**
     * 设置是否显示某个字幕对象.
     * 
     * @param __cb The callback object for the operation.
     * @param subtitleID 字幕对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_showSubtitle(int subtitleID, boolean show, java.util.Map<String, String> __ctx, Callback_Conference_showSubtitle __cb)
    {
        return begin_showSubtitle(subtitleID, show, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_showSubtitle(int subtitleID, boolean show, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__showSubtitle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __showSubtitle_name, __cb);
        try
        {
            __result.__prepare(__showSubtitle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(subtitleID);
            __os.writeBool(show);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_showSubtitle(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __showSubtitle_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 开始会议.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    start()
    {
        return start(null, false);
    }

    /**
     * 开始会议.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    start(java.util.Map<String, String> __ctx)
    {
        return start(__ctx, true);
    }

    private int
    start(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("start");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.start(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __start_name = "start";

    /**
     * 开始会议.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_start()
    {
        return begin_start(null, false, null);
    }

    /**
     * 开始会议.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx)
    {
        return begin_start(__ctx, true, null);
    }

    /**
     * 开始会议.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_start(Ice.Callback __cb)
    {
        return begin_start(null, false, __cb);
    }

    /**
     * 开始会议.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_start(__ctx, true, __cb);
    }

    /**
     * 开始会议.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_start(Callback_Conference_start __cb)
    {
        return begin_start(null, false, __cb);
    }

    /**
     * 开始会议.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, Callback_Conference_start __cb)
    {
        return begin_start(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__start_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __start_name, __cb);
        try
        {
            __result.__prepare(__start_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_start(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __start_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    stop()
    {
        return stop(null, false);
    }

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    stop(java.util.Map<String, String> __ctx)
    {
        return stop(__ctx, true);
    }

    private int
    stop(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("stop");
                __delBase = __getDelegate(false);
                _ConferenceDel __del = (_ConferenceDel)__delBase;
                return __del.stop(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __stop_name = "stop";

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_stop()
    {
        return begin_stop(null, false, null);
    }

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx)
    {
        return begin_stop(__ctx, true, null);
    }

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_stop(Ice.Callback __cb)
    {
        return begin_stop(null, false, __cb);
    }

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stop(__ctx, true, __cb);
    }

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_stop(Callback_Conference_stop __cb)
    {
        return begin_stop(null, false, __cb);
    }

    /**
     * 停止会议.所有会议中的终端将被中断连接并且从会议中删除，会议开始之后所用的资源将被释放，所有针对会议的设置将被重置。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, Callback_Conference_stop __cb)
    {
        return begin_stop(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stop_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stop_name, __cb);
        try
        {
            __result.__prepare(__stop_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_stop(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __stop_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public static ConferencePrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        ConferencePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ConferencePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ConferencePrxHelper __h = new ConferencePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ConferencePrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ConferencePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ConferencePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ConferencePrxHelper __h = new ConferencePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ConferencePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ConferencePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ConferencePrxHelper __h = new ConferencePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ConferencePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ConferencePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ConferencePrxHelper __h = new ConferencePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ConferencePrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        ConferencePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ConferencePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                ConferencePrxHelper __h = new ConferencePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ConferencePrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ConferencePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ConferencePrxHelper __h = new ConferencePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::vmxICE::VMXObject",
        "::vmxMP::Conference"
    };

    public static String
    ice_staticId()
    {
        return __ids[2];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _ConferenceDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _ConferenceDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, ConferencePrx v)
    {
        __os.writeProxy(v);
    }

    public static ConferencePrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ConferencePrxHelper result = new ConferencePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
