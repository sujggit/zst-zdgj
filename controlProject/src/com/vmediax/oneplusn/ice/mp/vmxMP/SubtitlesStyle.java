// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `SubtitlesStyle.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.vmediax.oneplusn.ice.mp.vmxMP;

/**
 * 枚举字体的格式
 * 
 **/
public class SubtitlesStyle implements java.lang.Cloneable, java.io.Serializable
{
    /**
     * the content of subtitle.
     **/
    public String plainText;

    /**
     * the characterSet of plainText.such as "UTF8" or "GB2312"
     **/
    public String characterSet;

    /**
     * where the subtile should be displayed(X axis)
     **/
    public int posX;

    /**
     * where the subtile should be displayed(Y axis)
     **/
    public int posY;

    /**
     * subtitile width
     **/
    public int width;

    /**
     * subtitile height
     **/
    public int height;

    /**
     * subtitile alpha
     **/
    public int alpha;

    /**
     * subtitile showtime
     **/
    public int showTime;

    /**
     * subtitile postion.this define where the subtile should be dispalyed.if define this.the value of posX and posY will be ignored.
     **/
    public SourceNamePos postion;

    /**
     * subtitile frontColor.example "#FF00DD" ,this value MUST NOT the same as backColor.
     **/
    public String frontColor;

    /**
     * subtitile backColor.example "#FF00DD" ,this value MUST NOT the same as frontColor.
     **/
    public String backColor;

    /**
     * if useBackColor set to true.u will see backcolor otherwise not. 
     **/
    public boolean useBackColor;

    /**
     * define the fontType.if  fontType not exist use default instead . 
     **/
    public String fontType;

    /**
     * define the fontSize."small" "big" "normal"
     **/
    public String fontSize;

    /**
     * typeface with thick heavy lines
     **/
    public boolean bold;

    /**
     * with the letters slanting to the right
     **/
    public boolean italic;

    /**
     * line drawn undern letter
     **/
    public boolean underline;

    /**
     * line drawn over letter
     **/
    public boolean strikethrough;

    /**
     * just test no annotation
     **/
    public boolean textSup;

    /**
     * just test no annotation
     **/
    public boolean textSub;

    /**
     * the space between letter
     **/
    public int letterSpace;

    /**
     * just test no annotation
     **/
    public boolean verticalText;

    /**
     * just test no annotation
     **/
    public boolean rotateText;

    /**
     * the width of a line
     **/
    public int lineWidth;

    /**
     * the width between line
     **/
    public int lineSpace;

    public SubtitlesStyle()
    {
    }

    public SubtitlesStyle(String plainText, String characterSet, int posX, int posY, int width, int height, int alpha, int showTime, SourceNamePos postion, String frontColor, String backColor, boolean useBackColor, String fontType, String fontSize, boolean bold, boolean italic, boolean underline, boolean strikethrough, boolean textSup, boolean textSub, int letterSpace, boolean verticalText, boolean rotateText, int lineWidth, int lineSpace)
    {
        this.plainText = plainText;
        this.characterSet = characterSet;
        this.posX = posX;
        this.posY = posY;
        this.width = width;
        this.height = height;
        this.alpha = alpha;
        this.showTime = showTime;
        this.postion = postion;
        this.frontColor = frontColor;
        this.backColor = backColor;
        this.useBackColor = useBackColor;
        this.fontType = fontType;
        this.fontSize = fontSize;
        this.bold = bold;
        this.italic = italic;
        this.underline = underline;
        this.strikethrough = strikethrough;
        this.textSup = textSup;
        this.textSub = textSub;
        this.letterSpace = letterSpace;
        this.verticalText = verticalText;
        this.rotateText = rotateText;
        this.lineWidth = lineWidth;
        this.lineSpace = lineSpace;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        SubtitlesStyle _r = null;
        try
        {
            _r = (SubtitlesStyle)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(plainText != _r.plainText)
            {
                if(plainText == null || _r.plainText == null || !plainText.equals(_r.plainText))
                {
                    return false;
                }
            }
            if(characterSet != _r.characterSet)
            {
                if(characterSet == null || _r.characterSet == null || !characterSet.equals(_r.characterSet))
                {
                    return false;
                }
            }
            if(posX != _r.posX)
            {
                return false;
            }
            if(posY != _r.posY)
            {
                return false;
            }
            if(width != _r.width)
            {
                return false;
            }
            if(height != _r.height)
            {
                return false;
            }
            if(alpha != _r.alpha)
            {
                return false;
            }
            if(showTime != _r.showTime)
            {
                return false;
            }
            if(postion != _r.postion)
            {
                if(postion == null || _r.postion == null || !postion.equals(_r.postion))
                {
                    return false;
                }
            }
            if(frontColor != _r.frontColor)
            {
                if(frontColor == null || _r.frontColor == null || !frontColor.equals(_r.frontColor))
                {
                    return false;
                }
            }
            if(backColor != _r.backColor)
            {
                if(backColor == null || _r.backColor == null || !backColor.equals(_r.backColor))
                {
                    return false;
                }
            }
            if(useBackColor != _r.useBackColor)
            {
                return false;
            }
            if(fontType != _r.fontType)
            {
                if(fontType == null || _r.fontType == null || !fontType.equals(_r.fontType))
                {
                    return false;
                }
            }
            if(fontSize != _r.fontSize)
            {
                if(fontSize == null || _r.fontSize == null || !fontSize.equals(_r.fontSize))
                {
                    return false;
                }
            }
            if(bold != _r.bold)
            {
                return false;
            }
            if(italic != _r.italic)
            {
                return false;
            }
            if(underline != _r.underline)
            {
                return false;
            }
            if(strikethrough != _r.strikethrough)
            {
                return false;
            }
            if(textSup != _r.textSup)
            {
                return false;
            }
            if(textSub != _r.textSub)
            {
                return false;
            }
            if(letterSpace != _r.letterSpace)
            {
                return false;
            }
            if(verticalText != _r.verticalText)
            {
                return false;
            }
            if(rotateText != _r.rotateText)
            {
                return false;
            }
            if(lineWidth != _r.lineWidth)
            {
                return false;
            }
            if(lineSpace != _r.lineSpace)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(plainText != null)
        {
            __h = 5 * __h + plainText.hashCode();
        }
        if(characterSet != null)
        {
            __h = 5 * __h + characterSet.hashCode();
        }
        __h = 5 * __h + posX;
        __h = 5 * __h + posY;
        __h = 5 * __h + width;
        __h = 5 * __h + height;
        __h = 5 * __h + alpha;
        __h = 5 * __h + showTime;
        if(postion != null)
        {
            __h = 5 * __h + postion.hashCode();
        }
        if(frontColor != null)
        {
            __h = 5 * __h + frontColor.hashCode();
        }
        if(backColor != null)
        {
            __h = 5 * __h + backColor.hashCode();
        }
        __h = 5 * __h + (useBackColor ? 1 : 0);
        if(fontType != null)
        {
            __h = 5 * __h + fontType.hashCode();
        }
        if(fontSize != null)
        {
            __h = 5 * __h + fontSize.hashCode();
        }
        __h = 5 * __h + (bold ? 1 : 0);
        __h = 5 * __h + (italic ? 1 : 0);
        __h = 5 * __h + (underline ? 1 : 0);
        __h = 5 * __h + (strikethrough ? 1 : 0);
        __h = 5 * __h + (textSup ? 1 : 0);
        __h = 5 * __h + (textSub ? 1 : 0);
        __h = 5 * __h + letterSpace;
        __h = 5 * __h + (verticalText ? 1 : 0);
        __h = 5 * __h + (rotateText ? 1 : 0);
        __h = 5 * __h + lineWidth;
        __h = 5 * __h + lineSpace;
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(plainText);
        __os.writeString(characterSet);
        __os.writeInt(posX);
        __os.writeInt(posY);
        __os.writeInt(width);
        __os.writeInt(height);
        __os.writeInt(alpha);
        __os.writeInt(showTime);
        postion.__write(__os);
        __os.writeString(frontColor);
        __os.writeString(backColor);
        __os.writeBool(useBackColor);
        __os.writeString(fontType);
        __os.writeString(fontSize);
        __os.writeBool(bold);
        __os.writeBool(italic);
        __os.writeBool(underline);
        __os.writeBool(strikethrough);
        __os.writeBool(textSup);
        __os.writeBool(textSub);
        __os.writeInt(letterSpace);
        __os.writeBool(verticalText);
        __os.writeBool(rotateText);
        __os.writeInt(lineWidth);
        __os.writeInt(lineSpace);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        plainText = __is.readString();
        characterSet = __is.readString();
        posX = __is.readInt();
        posY = __is.readInt();
        width = __is.readInt();
        height = __is.readInt();
        alpha = __is.readInt();
        showTime = __is.readInt();
        postion = SourceNamePos.__read(__is);
        frontColor = __is.readString();
        backColor = __is.readString();
        useBackColor = __is.readBool();
        fontType = __is.readString();
        fontSize = __is.readString();
        bold = __is.readBool();
        italic = __is.readBool();
        underline = __is.readBool();
        strikethrough = __is.readBool();
        textSup = __is.readBool();
        textSub = __is.readBool();
        letterSpace = __is.readInt();
        verticalText = __is.readBool();
        rotateText = __is.readBool();
        lineWidth = __is.readInt();
        lineSpace = __is.readInt();
    }
}
