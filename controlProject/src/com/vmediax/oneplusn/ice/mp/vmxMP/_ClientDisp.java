// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_ClientDisp.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.vmediax.oneplusn.ice.mp.vmxMP;

/**
 * Client是一个客户端在服务器端的虚拟代理，用于设置终端的信息然后加入[Conference]会议对象进行多点会议， 客户端可能是323终端，或者sip终端等.
 * 
 * <br><br>属性列表<br>
 * 
 * <b>所有类型客户端的属性列表:</b><br>
 * <ul>remote: 客户端的IP地址(如果是rtsp客户端，则为rtsp的uri, 没有默认值, 属性名对应的定义为[PropertyIpAddr].                                                                   </ul>
 * <ul>bandwidth: 带宽, 默认值为"2048", 属性名对应的定义为[PropertyBandwidth].                                                                           </ul>
 * <ul>audioCodec: 音频编解码类型, 默认值为"auto", 即自动协商，可以选择"auto/G711/G722/G722.1/G722.1C/G723.1/G728/G729", 属性名对应的定义为[PropertyAudioCodec].     </ul>
 * <ul>videoCodec: 视频编解码类型, 默认值为"auto", 即自动协商, 可以选择"auto/H264/H263", 属性名对应的定义为[PropertyVideoCodec]                                      </ul>
 * <ul>videoReceiveSize: 服务器发送到客户端的视频图像大小, 默认值为"720p", 可以选择"qcif/cif/4cif/XGA/720p/1080p", 属性名对应的定义为[PropertyVideoRxSize].     </ul>
 * <ul>videoTransmitSize: 客户端发送到服务器的视频图像大小, 默认值为"720p", 可以选择"qcif/cif/4cif/XGA/720p/1080p", 属性名对应的定义为[PropertyVideoTxSize].    </ul>
 * 
 * <b>323类型客户端的属性列表:</b></p>                                                                                                            
 * <ul>port: 323协议栈的端口, 默认值为"1332", 属性名对应的定义为[PropertyPort].                                                                                          </ul>
 * <ul>h323: h323 name, 无默认值, 属性名对应的定义为[PropertyH323Name].                                                                                                      </ul>
 * <ul>e164: e164 name, 无默认值, 属性名对应的定义为[PropertyE164].                                                                                                      </ul>
 * <ul>videoExtCodec: 视频辅流的编解码类型, 默认值是"auto", 即自动协商, 可以选择"auto/H264/H263", 属性名对应的定义为[PropertyVideoExtCodec]                                       </ul>
 * <ul>videoExtSizeRx: 视频辅流的服务器发送到客户端的视频图像大小, 默认值为"XGA", 可以选择"qcif/cif/4cif/XGA/720p/1080p", 属性名对应的定义为[PropertyVideoExtSizeRx].                      </ul>
 * <ul>videoExtSizeTx: 视频辅流的客户端发送的服务器的视频大小, 默认值是"XGA", 可以选择"qcif/cif/4cif/XGA/720p/1080p", 属性名对应的定义为[PropertyVideoExtSizeTx].                         </ul>
 * <ul>allowSendExtVideo: 允许客户端发送视频辅流, 默认值是"false", 可以选择"true/false", 属性名对应的定义为[PropertyAllowSendExtVideo]                                         </ul>
 * 
 * <b>sip类型客户端的属性列表:</b></p>                                                                                                          
 * <ul>userName：注册到SIP服务器的用户名，无默认值.                                                                                       </ul>
 * <ul>domain：注册的域，无默认值.                                                                                       </ul>
 * <ul>authName：注册时的授权名，无默认值.                                                                                       </ul>
 * <ul>passWord：密码，无默认值.                                                                                       </ul>
 * <ul>sipServerIP：SIP注册服务器的地址，无默认值.                                                                                     </ul>    
 * 
 * <b>flash类型客户端的属性列表:</b></p>                                                                                                    
 * <ul>rtmpDownStreamName：下行媒体流的名字,属性名对应的定义为[PropertyRtmpDownStreamName].                                                                                       </ul>
 * <ul>rtmpUpStreamName：上行行媒体流的名字,属性名对应的定义为[PropertyRtmpUpStreamName].                                                                                       </ul>
 * <ul>rtmpDownExtStreamName：辅流媒体流的名字,属性名对应的定义为[PropertyRtmpDownExtStreamName].                                                                                     </ul>
 * <ul>rtmpUpExtStreamName：辅流媒体流的名字,属性名对应的定义为[PropertyRtmpUpExtStreamName].                                                                                     </ul>
 * <ul>rtmpAppName：rtmp程序名,属性名对应的定义为[PropertyRtmpAppName].                                                                                               </ul>
 * 
 * <b>rtsp类型客户端的属性列表:</b></p>                                                                                                                                                                                            </ul>
 * <ul>protocols：传输协议的类型，默认值是udp，可以选择"udp/tcp/http".                                                                                       </ul>    
 * <ul>latency：缓冲的时间，默认值是"0".                                                                                       </ul>    
 * 
 * @see Conference
 * @see ClientMgr
 **/
public abstract class _ClientDisp extends Ice.ObjectImpl implements Client
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::vmxICE::Resource",
        "::vmxICE::VMXObject",
        "::vmxMP::Client"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[3];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[3];
    }

    public static String
    ice_staticId()
    {
        return __ids[3];
    }

    /**
     * 枚举资源对象接受输入的节点列表.
     * 
     * @param list 媒体流节点的ID及流类型列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    enumInputNode(vmxICE.MediaNodeListHolder list)
    {
        return enumInputNode(list, null);
    }

    /**
     * 枚举资源对象提供输出的节点列表.
     * 
     * @param list 媒体流节点的ID及流类型列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    enumOutputNode(vmxICE.MediaNodeListHolder list)
    {
        return enumOutputNode(list, null);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    enumMessageList(vmxICE.MsgDescListHolder msgList)
    {
        return enumMessageList(msgList, null);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param info 属性信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    enumProperty(String name, vmxICE.PropertyInfoHolder info)
    {
        return enumProperty(name, info, null);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param list 属性信息列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    enumPropertyList(vmxICE.PropertyInfoListHolder list)
    {
        return enumPropertyList(list, null);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @return 返回对象的ICE ID.
     * 
     **/
    public final String
    getID()
    {
        return getID(null);
    }

    /**
     * 获取对象名称.
     * 
     * @return 返回对象的名称.
     * 
     **/
    public final String
    getName()
    {
        return getName(null);
    }

    /**
     * 获取对象类型特征。
     * 
     * @return 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public final int
    getObjectType()
    {
        return getObjectType(null);
    }

    /**
     * 获取对象的所有者。
     * 
     * @return 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public final String
    getParent()
    {
        return getParent(null);
    }

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getProperty(String name, Ice.StringHolder value)
    {
        return getProperty(name, value, null);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getPropertyList(vmxICE.PropertyListHolder list)
    {
        return getPropertyList(list, null);
    }

    /**
     * 获取对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getState(vmxICE.ObjectStateHolder state)
    {
        return getState(state, null);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param info 格式化的统计信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getStatistics(vmxICE.StatisticsListHolder info)
    {
        return getStatistics(info, null);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    recvMessage(byte[] msg)
    {
        return recvMessage(msg, null);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    registerMsg(int msgID, String ObjectID)
    {
        return registerMsg(msgID, ObjectID, null);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    registerMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return registerMsgWithLocator(msgID, ObjectID, locator, null);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setParent(String parent)
    {
        return setParent(parent, null);
    }

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setProperty(String name, String value)
    {
        return setProperty(name, value, null);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list)
    {
        return setPropertyList(list, null);
    }

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setState(vmxICE.ObjectState state)
    {
        return setState(state, null);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要取消接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    unregisterMsg(int msgID, String ObjectID)
    {
        return unregisterMsg(msgID, ObjectID, null);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return unregisterMsgWithLocator(msgID, ObjectID, locator, null);
    }

    /**
     * 关闭客户端对象, 所有的资源都将被释放或者重置. 用于重置客户端对象使其可以连接一个新的终端.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    close()
    {
        return close(null);
    }

    /**
     * 连接客户端,在调用该函数成功之后,客户端的状态会立即转换为[ConnectStateConnecting],但是该函数成功不代表连接已经成功,调用者需要根据连接成功的消息才能确定该客户端真正建立连接.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    connect()
    {
        return connect(null);
    }

    /**
     * 中断和客户端的连接,如果客户端在会议中是发言者,调用该接口之前必须取消其发言者身份,否则会导致其它观看发言者的客户端收到的图像静止在挂断之前.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    disconnect()
    {
        return disconnect(null);
    }

    /**
     * 枚举客户端支持的命令列表.
     * 
     * @param list 命令列表，包括命令名称及说明.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    enumSupportCommand(CommandListHolder list)
    {
        return enumSupportCommand(list, null);
    }

    /**
     * 执行客户端支持的某个命令.
     * 
     * @param cmd 命令结构，包含命令的类型及值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    execCommand(Command cmd)
    {
        return execCommand(cmd, null);
    }

    /**
     * 获取客户端名称.
     * 
     * @param name 输出客户端名称
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getClientName(Ice.StringHolder name)
    {
        return getClientName(name, null);
    }

    /**
     * 获取客户端的类型.
     * 
     * @param type 客户端的类型，参考[ClientType].
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getClientType(ClientTypeHolder type)
    {
        return getClientType(type, null);
    }

    /**
     * 获取客户端的连接模式.
     * 
     * @param mode 连接模式，参考[ClientConnectMode].
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getConnectMode(ClientConnectModeHolder mode)
    {
        return getConnectMode(mode, null);
    }

    /**
     * 获取客户端的连接状态.
     * 
     * @param state 连接状态，参考枚举[ClientConnectState].
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getConnectState(ClientConnectStateHolder state)
    {
        return getConnectState(state, null);
    }

    /**
     * 设置客户端名称.
     * 
     * @param name 客户端名称
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * <ul> [ErrInvalidParameter] - 客户端名称为空. </ul>
     * 
     **/
    public final int
    setClientName(String name)
    {
        return setClientName(name, null);
    }

    /**
     * 设置客户端的连接模式.
     * 
     * @param mode 连接模式，参考[ClientConnectMode].
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setConnectMode(ClientConnectMode mode)
    {
        return setConnectMode(mode, null);
    }

    /**
     * 重新协商码流的能力集.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    updateMediaCapability()
    {
        return updateMediaCapability(null);
    }

    public static Ice.DispatchStatus
    ___setClientName(Client __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String name;
        name = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setClientName(name, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getClientName(Client __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        Ice.StringHolder name = new Ice.StringHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getClientName(name, __current);
        __os.writeString(name.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getConnectState(Client __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        ClientConnectStateHolder state = new ClientConnectStateHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getConnectState(state, __current);
        state.value.__write(__os);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setConnectMode(Client __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        ClientConnectMode mode;
        mode = ClientConnectMode.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setConnectMode(mode, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getConnectMode(Client __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        ClientConnectModeHolder mode = new ClientConnectModeHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getConnectMode(mode, __current);
        mode.value.__write(__os);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getClientType(Client __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        ClientTypeHolder type = new ClientTypeHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getClientType(type, __current);
        type.value.__write(__os);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___connect(Client __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.connect(__current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___disconnect(Client __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.disconnect(__current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___updateMediaCapability(Client __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.updateMediaCapability(__current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___execCommand(Client __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        Command cmd;
        cmd = new Command();
        cmd.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.execCommand(cmd, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___enumSupportCommand(Client __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        CommandListHolder list = new CommandListHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.enumSupportCommand(list, __current);
        CommandListHelper.write(__os, list.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___close(Client __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.close(__current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "close",
        "connect",
        "disconnect",
        "enumInputNode",
        "enumMessageList",
        "enumOutputNode",
        "enumProperty",
        "enumPropertyList",
        "enumSupportCommand",
        "execCommand",
        "getClientName",
        "getClientType",
        "getConnectMode",
        "getConnectState",
        "getID",
        "getName",
        "getObjectType",
        "getParent",
        "getProperty",
        "getPropertyList",
        "getState",
        "getStatistics",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "recvMessage",
        "registerMsg",
        "registerMsgWithLocator",
        "setClientName",
        "setConnectMode",
        "setParent",
        "setProperty",
        "setPropertyList",
        "setState",
        "unregisterMsg",
        "unregisterMsgWithLocator",
        "updateMediaCapability"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___close(this, in, __current);
            }
            case 1:
            {
                return ___connect(this, in, __current);
            }
            case 2:
            {
                return ___disconnect(this, in, __current);
            }
            case 3:
            {
                return vmxICE._ResourceDisp.___enumInputNode(this, in, __current);
            }
            case 4:
            {
                return vmxICE._VMXObjectDisp.___enumMessageList(this, in, __current);
            }
            case 5:
            {
                return vmxICE._ResourceDisp.___enumOutputNode(this, in, __current);
            }
            case 6:
            {
                return vmxICE._VMXObjectDisp.___enumProperty(this, in, __current);
            }
            case 7:
            {
                return vmxICE._VMXObjectDisp.___enumPropertyList(this, in, __current);
            }
            case 8:
            {
                return ___enumSupportCommand(this, in, __current);
            }
            case 9:
            {
                return ___execCommand(this, in, __current);
            }
            case 10:
            {
                return ___getClientName(this, in, __current);
            }
            case 11:
            {
                return ___getClientType(this, in, __current);
            }
            case 12:
            {
                return ___getConnectMode(this, in, __current);
            }
            case 13:
            {
                return ___getConnectState(this, in, __current);
            }
            case 14:
            {
                return vmxICE._VMXObjectDisp.___getID(this, in, __current);
            }
            case 15:
            {
                return vmxICE._VMXObjectDisp.___getName(this, in, __current);
            }
            case 16:
            {
                return vmxICE._VMXObjectDisp.___getObjectType(this, in, __current);
            }
            case 17:
            {
                return vmxICE._VMXObjectDisp.___getParent(this, in, __current);
            }
            case 18:
            {
                return vmxICE._VMXObjectDisp.___getProperty(this, in, __current);
            }
            case 19:
            {
                return vmxICE._VMXObjectDisp.___getPropertyList(this, in, __current);
            }
            case 20:
            {
                return vmxICE._VMXObjectDisp.___getState(this, in, __current);
            }
            case 21:
            {
                return vmxICE._VMXObjectDisp.___getStatistics(this, in, __current);
            }
            case 22:
            {
                return ___ice_id(this, in, __current);
            }
            case 23:
            {
                return ___ice_ids(this, in, __current);
            }
            case 24:
            {
                return ___ice_isA(this, in, __current);
            }
            case 25:
            {
                return ___ice_ping(this, in, __current);
            }
            case 26:
            {
                return vmxICE._VMXObjectDisp.___recvMessage(this, in, __current);
            }
            case 27:
            {
                return vmxICE._VMXObjectDisp.___registerMsg(this, in, __current);
            }
            case 28:
            {
                return vmxICE._VMXObjectDisp.___registerMsgWithLocator(this, in, __current);
            }
            case 29:
            {
                return ___setClientName(this, in, __current);
            }
            case 30:
            {
                return ___setConnectMode(this, in, __current);
            }
            case 31:
            {
                return vmxICE._VMXObjectDisp.___setParent(this, in, __current);
            }
            case 32:
            {
                return vmxICE._VMXObjectDisp.___setProperty(this, in, __current);
            }
            case 33:
            {
                return vmxICE._VMXObjectDisp.___setPropertyList(this, in, __current);
            }
            case 34:
            {
                return vmxICE._VMXObjectDisp.___setState(this, in, __current);
            }
            case 35:
            {
                return vmxICE._VMXObjectDisp.___unregisterMsg(this, in, __current);
            }
            case 36:
            {
                return vmxICE._VMXObjectDisp.___unregisterMsgWithLocator(this, in, __current);
            }
            case 37:
            {
                return ___updateMediaCapability(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type vmxMP::Client was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type vmxMP::Client was not generated with stream support";
        throw ex;
    }
}
