// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_MC2OperationsNC.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.vmediax.oneplusn.ice.api.vmxICE;

public interface _MC2OperationsNC extends vmxICE._VMXObjectOperationsNC
{
    int addTerminal(String name, String ip, String h323, String e164, String info, String called, String audio, String video, String fecc);

    int addTerminalXML(String id, String name, String ip, String h323, String e164, String info, String called, String audio, String video, String fecc);

    int updateTerminal(String name, String ip, String h323, String e164, String info, String called, String audio, String video, String fecc);

    int deleteTerminal(String id);

    java.util.List<TerminalInfo> getTerminList();

    java.util.List<TerminalInfo> queryTerminList(String condition);

    java.util.List<TerminalInfo> queryNotConfTerminalList();

    java.util.List<TerminalInfo> getMemberListByConference(String number);

    java.util.List<TerminalInfo> getConnectMembersByConference(String number);

    java.util.List<TerminalInfo> getMemberListByConfForFlex(String number);

    java.util.List<TerminalInfo> getTempTerminList(String name);

    java.util.List<TerminalInfo> getTempTerminIdleList(String name);

    java.util.List<TerminalTypeInfo> getTemplateTerminalTypeList(String name);

    int addTemplate(String name, String e164, String info, java.util.List<java.lang.String> terminalListh, java.util.List<java.lang.String> terminalListm, java.util.List<java.lang.String> terminalListl, String vscreen, String vsize, String fps, String bandwidth, String bandwidthm, String vsizem, String bandwidthl, String vsizel);

    int addTemplateXML(String name, String e164, String info, java.util.List<java.lang.String> terminalListh, java.util.List<java.lang.String> terminalListm, java.util.List<java.lang.String> terminalListl, String vscreen, String vsize, String fps, String bandwidth, String bandwidthm, String vsizem, String bandwidthl, String vsizel);

    java.util.Map<java.lang.String, java.lang.String> getTerminalIdToIp();

    int updateTemplate(String name, String e164, String info, java.util.List<java.lang.String> terminalListh, java.util.List<java.lang.String> terminalListm, java.util.List<java.lang.String> terminalListl, String vscreen, String vsize, String fps, String bandwidth, String bandwidthm, String vsizem, String bandwidthl, String vsizel);

    int deleteTemplate(String name);

    java.util.List<TemplateInfo> getTemplateList();

    java.util.List<TemplateInfo> queryTemplateList(String condition);

    int startConference(Conference conf, String templatename, StringListSHolder existsNumberClientNames);

    int stopConference(String number);

    java.util.List<Conference> getConferenceList();

    java.util.List<Conference> getConferenceInfo(String number);

    int start323Call(String terminalIp, String terminalName, String terminalType, String number, String qualityType);

    int batchStart323Call(java.util.List<java.lang.String> terminalIpList, java.util.List<java.lang.String> terminalNameList, String number, String qualityType, StringListSHolder existTerminalNameList);

    int stop323Call(String terminalIp, String number);

    int disconnect323Call(String terminalIp, String number);

    int connect323Call(String terminalIp, String terminalName, String number);

    int stopSoftCall(String terminalName, String number);

    int stopMobileCall(String terminalName, String number);

    int disconnectAll(String number);

    int connectAll(String number);

    int muteMicrophone(String number, String terminal, String mic);

    int muteSpeaker(String number, String terminal, String speaker);

    int muteAllMicrophone(String number);

    int openAllMicrophone(String number);

    int muteAllSpeaker(String number);

    int openAllSpeaker(String number);

    String getVscreen(String number);

    java.util.List<ScreenInfo> getScreenInfo(String number, String vscreen);

    int setScreen(java.util.List<java.lang.String> terminalIp, java.util.List<java.lang.String> terminalName, String number, String vscreen, String index, String mode);

    int setSubscreenMode(String number, String index, String mode);

    int setQueue(String number, String index, String state);

    int saveConferenceParam(String number, ConferenceParam cp);

    java.util.List<ConferenceParam> getConferenceParam(String number);

    int saveTemplateParam(TemplateParamInfo tp);

    java.util.List<TemplateParamInfo> getTemplateParam(String templatename);

    String validateName(String name, String confId);

    int setLecture(String number, String terminalIp, String terminalName, String lecture);

    int setChair(String number, String terminalIp, String chair);

    int setChairsee(String number, String mode, String[] terminalIp, String[] terminalName);

    java.util.List<ChairCycleInfo> getChaircycleList(String number);

    java.util.List<ChairCycleInfo> getChairCycleChoiceTerminals(String number);

    java.util.List<ChairCycleInfo> getChairseeList(String number);

    int setFecc(String number, String terminalIp, int actionType);

    int stopFecc(String number, String terminalIp);

    int setQualityH323(String number, String terminalIp, String bandwidth, String vsize);

    int setQualitySoft(String number, String terminalIp, String type);

    int saveSysConfig(SysConfig sys);

    java.util.List<SysConfig> getSysConfig();

    java.util.List<IConfig> getIConfig();

    int setIConfig(String name, String value);

    int startConferenceP2p();

    int stopConferenceP2p(String number);

    java.util.List<PacketInfo> getMemberPacketStatus(String number);

    int setExt(String number, String terminalIp, String ext);

    int[] getClientCache(String number);

    LicenseInfo getLicense();

    int setRequestIFrame(String clientIP, String stream, String cmd);

    int startRtspCall(String rtspName, String number);

    int stopRtspCall(String number, String rtspName);

    int startSipCall(String sipIp, String number, String qualityType);

    int startSipCalled(String sipPhoneNumber, String number);

    int stopSipCall(String number, String sipPhoneNumber);

    int registerServer(String clientIP, String userName, String password, String domain, String regServerIP, String authName);

    int addSip(SipInfo sipTerminalInfo);

    int updateSip(SipInfo sipTerminalInfo);

    int deleteSip(String sipIp);

    java.util.List<SipInfo> getSipList();
}
