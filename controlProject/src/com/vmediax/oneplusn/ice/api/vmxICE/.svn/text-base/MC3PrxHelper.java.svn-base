// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `MC3PrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.vmediax.oneplusn.ice.api.vmxICE;

public final class MC3PrxHelper extends Ice.ObjectPrxHelperBase implements MC3Prx
{
    public CmdResult
    addLiveMeetTemplate(LiveMeetTemplate template)
    {
        return addLiveMeetTemplate(template, null, false);
    }

    public CmdResult
    addLiveMeetTemplate(LiveMeetTemplate template, java.util.Map<String, String> __ctx)
    {
        return addLiveMeetTemplate(template, __ctx, true);
    }

    private CmdResult
    addLiveMeetTemplate(LiveMeetTemplate template, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addLiveMeetTemplate");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.addLiveMeetTemplate(template, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addLiveMeetTemplate_name = "addLiveMeetTemplate";

    public Ice.AsyncResult begin_addLiveMeetTemplate(LiveMeetTemplate template)
    {
        return begin_addLiveMeetTemplate(template, null, false, null);
    }

    public Ice.AsyncResult begin_addLiveMeetTemplate(LiveMeetTemplate template, java.util.Map<String, String> __ctx)
    {
        return begin_addLiveMeetTemplate(template, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addLiveMeetTemplate(LiveMeetTemplate template, Ice.Callback __cb)
    {
        return begin_addLiveMeetTemplate(template, null, false, __cb);
    }

    public Ice.AsyncResult begin_addLiveMeetTemplate(LiveMeetTemplate template, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addLiveMeetTemplate(template, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addLiveMeetTemplate(LiveMeetTemplate template, Callback_MC3_addLiveMeetTemplate __cb)
    {
        return begin_addLiveMeetTemplate(template, null, false, __cb);
    }

    public Ice.AsyncResult begin_addLiveMeetTemplate(LiveMeetTemplate template, java.util.Map<String, String> __ctx, Callback_MC3_addLiveMeetTemplate __cb)
    {
        return begin_addLiveMeetTemplate(template, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addLiveMeetTemplate(LiveMeetTemplate template, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addLiveMeetTemplate_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addLiveMeetTemplate_name, __cb);
        try
        {
            __result.__prepare(__addLiveMeetTemplate_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            template.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_addLiveMeetTemplate(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addLiveMeetTemplate_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    addMutiTemplate(MutiTemplateInfo template)
    {
        return addMutiTemplate(template, null, false);
    }

    public CmdResult
    addMutiTemplate(MutiTemplateInfo template, java.util.Map<String, String> __ctx)
    {
        return addMutiTemplate(template, __ctx, true);
    }

    private CmdResult
    addMutiTemplate(MutiTemplateInfo template, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addMutiTemplate");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.addMutiTemplate(template, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addMutiTemplate_name = "addMutiTemplate";

    public Ice.AsyncResult begin_addMutiTemplate(MutiTemplateInfo template)
    {
        return begin_addMutiTemplate(template, null, false, null);
    }

    public Ice.AsyncResult begin_addMutiTemplate(MutiTemplateInfo template, java.util.Map<String, String> __ctx)
    {
        return begin_addMutiTemplate(template, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addMutiTemplate(MutiTemplateInfo template, Ice.Callback __cb)
    {
        return begin_addMutiTemplate(template, null, false, __cb);
    }

    public Ice.AsyncResult begin_addMutiTemplate(MutiTemplateInfo template, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addMutiTemplate(template, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addMutiTemplate(MutiTemplateInfo template, Callback_MC3_addMutiTemplate __cb)
    {
        return begin_addMutiTemplate(template, null, false, __cb);
    }

    public Ice.AsyncResult begin_addMutiTemplate(MutiTemplateInfo template, java.util.Map<String, String> __ctx, Callback_MC3_addMutiTemplate __cb)
    {
        return begin_addMutiTemplate(template, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addMutiTemplate(MutiTemplateInfo template, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addMutiTemplate_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addMutiTemplate_name, __cb);
        try
        {
            __result.__prepare(__addMutiTemplate_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            template.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_addMutiTemplate(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addMutiTemplate_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    addTerminal(TerminalInfo ter)
    {
        return addTerminal(ter, null, false);
    }

    public CmdResult
    addTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return addTerminal(ter, __ctx, true);
    }

    private CmdResult
    addTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addTerminal");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.addTerminal(ter, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addTerminal_name = "addTerminal";

    public Ice.AsyncResult begin_addTerminal(TerminalInfo ter)
    {
        return begin_addTerminal(ter, null, false, null);
    }

    public Ice.AsyncResult begin_addTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return begin_addTerminal(ter, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addTerminal(TerminalInfo ter, Ice.Callback __cb)
    {
        return begin_addTerminal(ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_addTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addTerminal(ter, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addTerminal(TerminalInfo ter, Callback_MC3_addTerminal __cb)
    {
        return begin_addTerminal(ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_addTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx, Callback_MC3_addTerminal __cb)
    {
        return begin_addTerminal(ter, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addTerminal_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addTerminal_name, __cb);
        try
        {
            __result.__prepare(__addTerminal_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            ter.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_addTerminal(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addTerminal_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    audioDismantle(String ternumber)
    {
        return audioDismantle(ternumber, null, false);
    }

    public CmdResult
    audioDismantle(String ternumber, java.util.Map<String, String> __ctx)
    {
        return audioDismantle(ternumber, __ctx, true);
    }

    private CmdResult
    audioDismantle(String ternumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("audioDismantle");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.audioDismantle(ternumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __audioDismantle_name = "audioDismantle";

    public Ice.AsyncResult begin_audioDismantle(String ternumber)
    {
        return begin_audioDismantle(ternumber, null, false, null);
    }

    public Ice.AsyncResult begin_audioDismantle(String ternumber, java.util.Map<String, String> __ctx)
    {
        return begin_audioDismantle(ternumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_audioDismantle(String ternumber, Ice.Callback __cb)
    {
        return begin_audioDismantle(ternumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioDismantle(String ternumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_audioDismantle(ternumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_audioDismantle(String ternumber, Callback_MC3_audioDismantle __cb)
    {
        return begin_audioDismantle(ternumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioDismantle(String ternumber, java.util.Map<String, String> __ctx, Callback_MC3_audioDismantle __cb)
    {
        return begin_audioDismantle(ternumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_audioDismantle(String ternumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__audioDismantle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __audioDismantle_name, __cb);
        try
        {
            __result.__prepare(__audioDismantle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ternumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_audioDismantle(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __audioDismantle_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    audioHold(String terIp)
    {
        return audioHold(terIp, null, false);
    }

    public CmdResult
    audioHold(String terIp, java.util.Map<String, String> __ctx)
    {
        return audioHold(terIp, __ctx, true);
    }

    private CmdResult
    audioHold(String terIp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("audioHold");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.audioHold(terIp, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __audioHold_name = "audioHold";

    public Ice.AsyncResult begin_audioHold(String terIp)
    {
        return begin_audioHold(terIp, null, false, null);
    }

    public Ice.AsyncResult begin_audioHold(String terIp, java.util.Map<String, String> __ctx)
    {
        return begin_audioHold(terIp, __ctx, true, null);
    }

    public Ice.AsyncResult begin_audioHold(String terIp, Ice.Callback __cb)
    {
        return begin_audioHold(terIp, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioHold(String terIp, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_audioHold(terIp, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_audioHold(String terIp, Callback_MC3_audioHold __cb)
    {
        return begin_audioHold(terIp, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioHold(String terIp, java.util.Map<String, String> __ctx, Callback_MC3_audioHold __cb)
    {
        return begin_audioHold(terIp, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_audioHold(String terIp, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__audioHold_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __audioHold_name, __cb);
        try
        {
            __result.__prepare(__audioHold_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(terIp);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_audioHold(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __audioHold_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    audioInsert(String ternumber1, String ternumberInsert)
    {
        return audioInsert(ternumber1, ternumberInsert, null, false);
    }

    public CmdResult
    audioInsert(String ternumber1, String ternumberInsert, java.util.Map<String, String> __ctx)
    {
        return audioInsert(ternumber1, ternumberInsert, __ctx, true);
    }

    private CmdResult
    audioInsert(String ternumber1, String ternumberInsert, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("audioInsert");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.audioInsert(ternumber1, ternumberInsert, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __audioInsert_name = "audioInsert";

    public Ice.AsyncResult begin_audioInsert(String ternumber1, String ternumberInsert)
    {
        return begin_audioInsert(ternumber1, ternumberInsert, null, false, null);
    }

    public Ice.AsyncResult begin_audioInsert(String ternumber1, String ternumberInsert, java.util.Map<String, String> __ctx)
    {
        return begin_audioInsert(ternumber1, ternumberInsert, __ctx, true, null);
    }

    public Ice.AsyncResult begin_audioInsert(String ternumber1, String ternumberInsert, Ice.Callback __cb)
    {
        return begin_audioInsert(ternumber1, ternumberInsert, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioInsert(String ternumber1, String ternumberInsert, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_audioInsert(ternumber1, ternumberInsert, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_audioInsert(String ternumber1, String ternumberInsert, Callback_MC3_audioInsert __cb)
    {
        return begin_audioInsert(ternumber1, ternumberInsert, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioInsert(String ternumber1, String ternumberInsert, java.util.Map<String, String> __ctx, Callback_MC3_audioInsert __cb)
    {
        return begin_audioInsert(ternumber1, ternumberInsert, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_audioInsert(String ternumber1, String ternumberInsert, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__audioInsert_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __audioInsert_name, __cb);
        try
        {
            __result.__prepare(__audioInsert_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ternumber1);
            __os.writeString(ternumberInsert);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_audioInsert(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __audioInsert_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    audioStartRecord(String ternumber)
    {
        return audioStartRecord(ternumber, null, false);
    }

    public CmdResult
    audioStartRecord(String ternumber, java.util.Map<String, String> __ctx)
    {
        return audioStartRecord(ternumber, __ctx, true);
    }

    private CmdResult
    audioStartRecord(String ternumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("audioStartRecord");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.audioStartRecord(ternumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __audioStartRecord_name = "audioStartRecord";

    public Ice.AsyncResult begin_audioStartRecord(String ternumber)
    {
        return begin_audioStartRecord(ternumber, null, false, null);
    }

    public Ice.AsyncResult begin_audioStartRecord(String ternumber, java.util.Map<String, String> __ctx)
    {
        return begin_audioStartRecord(ternumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_audioStartRecord(String ternumber, Ice.Callback __cb)
    {
        return begin_audioStartRecord(ternumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioStartRecord(String ternumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_audioStartRecord(ternumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_audioStartRecord(String ternumber, Callback_MC3_audioStartRecord __cb)
    {
        return begin_audioStartRecord(ternumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioStartRecord(String ternumber, java.util.Map<String, String> __ctx, Callback_MC3_audioStartRecord __cb)
    {
        return begin_audioStartRecord(ternumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_audioStartRecord(String ternumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__audioStartRecord_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __audioStartRecord_name, __cb);
        try
        {
            __result.__prepare(__audioStartRecord_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ternumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_audioStartRecord(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __audioStartRecord_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    audioStartSpy(String spyer, String ternumber)
    {
        return audioStartSpy(spyer, ternumber, null, false);
    }

    public CmdResult
    audioStartSpy(String spyer, String ternumber, java.util.Map<String, String> __ctx)
    {
        return audioStartSpy(spyer, ternumber, __ctx, true);
    }

    private CmdResult
    audioStartSpy(String spyer, String ternumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("audioStartSpy");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.audioStartSpy(spyer, ternumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __audioStartSpy_name = "audioStartSpy";

    public Ice.AsyncResult begin_audioStartSpy(String spyer, String ternumber)
    {
        return begin_audioStartSpy(spyer, ternumber, null, false, null);
    }

    public Ice.AsyncResult begin_audioStartSpy(String spyer, String ternumber, java.util.Map<String, String> __ctx)
    {
        return begin_audioStartSpy(spyer, ternumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_audioStartSpy(String spyer, String ternumber, Ice.Callback __cb)
    {
        return begin_audioStartSpy(spyer, ternumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioStartSpy(String spyer, String ternumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_audioStartSpy(spyer, ternumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_audioStartSpy(String spyer, String ternumber, Callback_MC3_audioStartSpy __cb)
    {
        return begin_audioStartSpy(spyer, ternumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioStartSpy(String spyer, String ternumber, java.util.Map<String, String> __ctx, Callback_MC3_audioStartSpy __cb)
    {
        return begin_audioStartSpy(spyer, ternumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_audioStartSpy(String spyer, String ternumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__audioStartSpy_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __audioStartSpy_name, __cb);
        try
        {
            __result.__prepare(__audioStartSpy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(spyer);
            __os.writeString(ternumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_audioStartSpy(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __audioStartSpy_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    audioStopRecord(String ternumber)
    {
        return audioStopRecord(ternumber, null, false);
    }

    public CmdResult
    audioStopRecord(String ternumber, java.util.Map<String, String> __ctx)
    {
        return audioStopRecord(ternumber, __ctx, true);
    }

    private CmdResult
    audioStopRecord(String ternumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("audioStopRecord");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.audioStopRecord(ternumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __audioStopRecord_name = "audioStopRecord";

    public Ice.AsyncResult begin_audioStopRecord(String ternumber)
    {
        return begin_audioStopRecord(ternumber, null, false, null);
    }

    public Ice.AsyncResult begin_audioStopRecord(String ternumber, java.util.Map<String, String> __ctx)
    {
        return begin_audioStopRecord(ternumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_audioStopRecord(String ternumber, Ice.Callback __cb)
    {
        return begin_audioStopRecord(ternumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioStopRecord(String ternumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_audioStopRecord(ternumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_audioStopRecord(String ternumber, Callback_MC3_audioStopRecord __cb)
    {
        return begin_audioStopRecord(ternumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioStopRecord(String ternumber, java.util.Map<String, String> __ctx, Callback_MC3_audioStopRecord __cb)
    {
        return begin_audioStopRecord(ternumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_audioStopRecord(String ternumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__audioStopRecord_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __audioStopRecord_name, __cb);
        try
        {
            __result.__prepare(__audioStopRecord_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ternumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_audioStopRecord(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __audioStopRecord_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    audioStopSpy(String spyer)
    {
        return audioStopSpy(spyer, null, false);
    }

    public CmdResult
    audioStopSpy(String spyer, java.util.Map<String, String> __ctx)
    {
        return audioStopSpy(spyer, __ctx, true);
    }

    private CmdResult
    audioStopSpy(String spyer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("audioStopSpy");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.audioStopSpy(spyer, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __audioStopSpy_name = "audioStopSpy";

    public Ice.AsyncResult begin_audioStopSpy(String spyer)
    {
        return begin_audioStopSpy(spyer, null, false, null);
    }

    public Ice.AsyncResult begin_audioStopSpy(String spyer, java.util.Map<String, String> __ctx)
    {
        return begin_audioStopSpy(spyer, __ctx, true, null);
    }

    public Ice.AsyncResult begin_audioStopSpy(String spyer, Ice.Callback __cb)
    {
        return begin_audioStopSpy(spyer, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioStopSpy(String spyer, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_audioStopSpy(spyer, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_audioStopSpy(String spyer, Callback_MC3_audioStopSpy __cb)
    {
        return begin_audioStopSpy(spyer, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioStopSpy(String spyer, java.util.Map<String, String> __ctx, Callback_MC3_audioStopSpy __cb)
    {
        return begin_audioStopSpy(spyer, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_audioStopSpy(String spyer, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__audioStopSpy_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __audioStopSpy_name, __cb);
        try
        {
            __result.__prepare(__audioStopSpy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(spyer);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_audioStopSpy(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __audioStopSpy_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    audioTansfer(String ternumber, String targetnumber)
    {
        return audioTansfer(ternumber, targetnumber, null, false);
    }

    public CmdResult
    audioTansfer(String ternumber, String targetnumber, java.util.Map<String, String> __ctx)
    {
        return audioTansfer(ternumber, targetnumber, __ctx, true);
    }

    private CmdResult
    audioTansfer(String ternumber, String targetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("audioTansfer");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.audioTansfer(ternumber, targetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __audioTansfer_name = "audioTansfer";

    public Ice.AsyncResult begin_audioTansfer(String ternumber, String targetnumber)
    {
        return begin_audioTansfer(ternumber, targetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_audioTansfer(String ternumber, String targetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_audioTansfer(ternumber, targetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_audioTansfer(String ternumber, String targetnumber, Ice.Callback __cb)
    {
        return begin_audioTansfer(ternumber, targetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioTansfer(String ternumber, String targetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_audioTansfer(ternumber, targetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_audioTansfer(String ternumber, String targetnumber, Callback_MC3_audioTansfer __cb)
    {
        return begin_audioTansfer(ternumber, targetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioTansfer(String ternumber, String targetnumber, java.util.Map<String, String> __ctx, Callback_MC3_audioTansfer __cb)
    {
        return begin_audioTansfer(ternumber, targetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_audioTansfer(String ternumber, String targetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__audioTansfer_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __audioTansfer_name, __cb);
        try
        {
            __result.__prepare(__audioTansfer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ternumber);
            __os.writeString(targetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_audioTansfer(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __audioTansfer_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    audioUnHold(String terIp)
    {
        return audioUnHold(terIp, null, false);
    }

    public CmdResult
    audioUnHold(String terIp, java.util.Map<String, String> __ctx)
    {
        return audioUnHold(terIp, __ctx, true);
    }

    private CmdResult
    audioUnHold(String terIp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("audioUnHold");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.audioUnHold(terIp, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __audioUnHold_name = "audioUnHold";

    public Ice.AsyncResult begin_audioUnHold(String terIp)
    {
        return begin_audioUnHold(terIp, null, false, null);
    }

    public Ice.AsyncResult begin_audioUnHold(String terIp, java.util.Map<String, String> __ctx)
    {
        return begin_audioUnHold(terIp, __ctx, true, null);
    }

    public Ice.AsyncResult begin_audioUnHold(String terIp, Ice.Callback __cb)
    {
        return begin_audioUnHold(terIp, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioUnHold(String terIp, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_audioUnHold(terIp, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_audioUnHold(String terIp, Callback_MC3_audioUnHold __cb)
    {
        return begin_audioUnHold(terIp, null, false, __cb);
    }

    public Ice.AsyncResult begin_audioUnHold(String terIp, java.util.Map<String, String> __ctx, Callback_MC3_audioUnHold __cb)
    {
        return begin_audioUnHold(terIp, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_audioUnHold(String terIp, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__audioUnHold_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __audioUnHold_name, __cb);
        try
        {
            __result.__prepare(__audioUnHold_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(terIp);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_audioUnHold(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __audioUnHold_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    callH323Terminal2Channels(TerminalInfo h323Terminal, String number)
    {
        return callH323Terminal2Channels(h323Terminal, number, null, false);
    }

    public CmdResult
    callH323Terminal2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx)
    {
        return callH323Terminal2Channels(h323Terminal, number, __ctx, true);
    }

    private CmdResult
    callH323Terminal2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("callH323Terminal2Channels");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.callH323Terminal2Channels(h323Terminal, number, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __callH323Terminal2Channels_name = "callH323Terminal2Channels";

    public Ice.AsyncResult begin_callH323Terminal2Channels(TerminalInfo h323Terminal, String number)
    {
        return begin_callH323Terminal2Channels(h323Terminal, number, null, false, null);
    }

    public Ice.AsyncResult begin_callH323Terminal2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx)
    {
        return begin_callH323Terminal2Channels(h323Terminal, number, __ctx, true, null);
    }

    public Ice.AsyncResult begin_callH323Terminal2Channels(TerminalInfo h323Terminal, String number, Ice.Callback __cb)
    {
        return begin_callH323Terminal2Channels(h323Terminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_callH323Terminal2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_callH323Terminal2Channels(h323Terminal, number, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_callH323Terminal2Channels(TerminalInfo h323Terminal, String number, Callback_MC3_callH323Terminal2Channels __cb)
    {
        return begin_callH323Terminal2Channels(h323Terminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_callH323Terminal2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, Callback_MC3_callH323Terminal2Channels __cb)
    {
        return begin_callH323Terminal2Channels(h323Terminal, number, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_callH323Terminal2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__callH323Terminal2Channels_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __callH323Terminal2Channels_name, __cb);
        try
        {
            __result.__prepare(__callH323Terminal2Channels_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            h323Terminal.__write(__os);
            __os.writeString(number);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_callH323Terminal2Channels(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __callH323Terminal2Channels_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    callRtspTerminal2Channels(TerminalInfo rtspTerminal, String number)
    {
        return callRtspTerminal2Channels(rtspTerminal, number, null, false);
    }

    public CmdResult
    callRtspTerminal2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx)
    {
        return callRtspTerminal2Channels(rtspTerminal, number, __ctx, true);
    }

    private CmdResult
    callRtspTerminal2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("callRtspTerminal2Channels");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.callRtspTerminal2Channels(rtspTerminal, number, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __callRtspTerminal2Channels_name = "callRtspTerminal2Channels";

    public Ice.AsyncResult begin_callRtspTerminal2Channels(TerminalInfo rtspTerminal, String number)
    {
        return begin_callRtspTerminal2Channels(rtspTerminal, number, null, false, null);
    }

    public Ice.AsyncResult begin_callRtspTerminal2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx)
    {
        return begin_callRtspTerminal2Channels(rtspTerminal, number, __ctx, true, null);
    }

    public Ice.AsyncResult begin_callRtspTerminal2Channels(TerminalInfo rtspTerminal, String number, Ice.Callback __cb)
    {
        return begin_callRtspTerminal2Channels(rtspTerminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_callRtspTerminal2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_callRtspTerminal2Channels(rtspTerminal, number, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_callRtspTerminal2Channels(TerminalInfo rtspTerminal, String number, Callback_MC3_callRtspTerminal2Channels __cb)
    {
        return begin_callRtspTerminal2Channels(rtspTerminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_callRtspTerminal2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, Callback_MC3_callRtspTerminal2Channels __cb)
    {
        return begin_callRtspTerminal2Channels(rtspTerminal, number, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_callRtspTerminal2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__callRtspTerminal2Channels_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __callRtspTerminal2Channels_name, __cb);
        try
        {
            __result.__prepare(__callRtspTerminal2Channels_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            rtspTerminal.__write(__os);
            __os.writeString(number);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_callRtspTerminal2Channels(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __callRtspTerminal2Channels_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    callback(String numa, String numb)
    {
        return callback(numa, numb, null, false);
    }

    public CmdResult
    callback(String numa, String numb, java.util.Map<String, String> __ctx)
    {
        return callback(numa, numb, __ctx, true);
    }

    private CmdResult
    callback(String numa, String numb, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("callback");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.callback(numa, numb, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __callback_name = "callback";

    public Ice.AsyncResult begin_callback(String numa, String numb)
    {
        return begin_callback(numa, numb, null, false, null);
    }

    public Ice.AsyncResult begin_callback(String numa, String numb, java.util.Map<String, String> __ctx)
    {
        return begin_callback(numa, numb, __ctx, true, null);
    }

    public Ice.AsyncResult begin_callback(String numa, String numb, Ice.Callback __cb)
    {
        return begin_callback(numa, numb, null, false, __cb);
    }

    public Ice.AsyncResult begin_callback(String numa, String numb, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_callback(numa, numb, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_callback(String numa, String numb, Callback_MC3_callback __cb)
    {
        return begin_callback(numa, numb, null, false, __cb);
    }

    public Ice.AsyncResult begin_callback(String numa, String numb, java.util.Map<String, String> __ctx, Callback_MC3_callback __cb)
    {
        return begin_callback(numa, numb, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_callback(String numa, String numb, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__callback_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __callback_name, __cb);
        try
        {
            __result.__prepare(__callback_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(numa);
            __os.writeString(numb);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_callback(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __callback_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    clearAllGWIP()
    {
        return clearAllGWIP(null, false);
    }

    public CmdResult
    clearAllGWIP(java.util.Map<String, String> __ctx)
    {
        return clearAllGWIP(__ctx, true);
    }

    private CmdResult
    clearAllGWIP(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("clearAllGWIP");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.clearAllGWIP(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __clearAllGWIP_name = "clearAllGWIP";

    public Ice.AsyncResult begin_clearAllGWIP()
    {
        return begin_clearAllGWIP(null, false, null);
    }

    public Ice.AsyncResult begin_clearAllGWIP(java.util.Map<String, String> __ctx)
    {
        return begin_clearAllGWIP(__ctx, true, null);
    }

    public Ice.AsyncResult begin_clearAllGWIP(Ice.Callback __cb)
    {
        return begin_clearAllGWIP(null, false, __cb);
    }

    public Ice.AsyncResult begin_clearAllGWIP(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_clearAllGWIP(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_clearAllGWIP(Callback_MC3_clearAllGWIP __cb)
    {
        return begin_clearAllGWIP(null, false, __cb);
    }

    public Ice.AsyncResult begin_clearAllGWIP(java.util.Map<String, String> __ctx, Callback_MC3_clearAllGWIP __cb)
    {
        return begin_clearAllGWIP(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_clearAllGWIP(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__clearAllGWIP_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __clearAllGWIP_name, __cb);
        try
        {
            __result.__prepare(__clearAllGWIP_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_clearAllGWIP(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __clearAllGWIP_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    connectAll(String meetnumber)
    {
        return connectAll(meetnumber, null, false);
    }

    public CmdResult
    connectAll(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return connectAll(meetnumber, __ctx, true);
    }

    private CmdResult
    connectAll(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("connectAll");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.connectAll(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __connectAll_name = "connectAll";

    public Ice.AsyncResult begin_connectAll(String meetnumber)
    {
        return begin_connectAll(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_connectAll(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_connectAll(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_connectAll(String meetnumber, Ice.Callback __cb)
    {
        return begin_connectAll(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_connectAll(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_connectAll(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_connectAll(String meetnumber, Callback_MC3_connectAll __cb)
    {
        return begin_connectAll(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_connectAll(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_connectAll __cb)
    {
        return begin_connectAll(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_connectAll(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__connectAll_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __connectAll_name, __cb);
        try
        {
            __result.__prepare(__connectAll_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_connectAll(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __connectAll_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    connectMutiTerminal(String meetnumber, TerminalInfo ter)
    {
        return connectMutiTerminal(meetnumber, ter, null, false);
    }

    public CmdResult
    connectMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return connectMutiTerminal(meetnumber, ter, __ctx, true);
    }

    private CmdResult
    connectMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("connectMutiTerminal");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.connectMutiTerminal(meetnumber, ter, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __connectMutiTerminal_name = "connectMutiTerminal";

    public Ice.AsyncResult begin_connectMutiTerminal(String meetnumber, TerminalInfo ter)
    {
        return begin_connectMutiTerminal(meetnumber, ter, null, false, null);
    }

    public Ice.AsyncResult begin_connectMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return begin_connectMutiTerminal(meetnumber, ter, __ctx, true, null);
    }

    public Ice.AsyncResult begin_connectMutiTerminal(String meetnumber, TerminalInfo ter, Ice.Callback __cb)
    {
        return begin_connectMutiTerminal(meetnumber, ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_connectMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_connectMutiTerminal(meetnumber, ter, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_connectMutiTerminal(String meetnumber, TerminalInfo ter, Callback_MC3_connectMutiTerminal __cb)
    {
        return begin_connectMutiTerminal(meetnumber, ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_connectMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx, Callback_MC3_connectMutiTerminal __cb)
    {
        return begin_connectMutiTerminal(meetnumber, ter, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_connectMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__connectMutiTerminal_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __connectMutiTerminal_name, __cb);
        try
        {
            __result.__prepare(__connectMutiTerminal_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            ter.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_connectMutiTerminal(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __connectMutiTerminal_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    consult(String conNum, String targetNum)
    {
        return consult(conNum, targetNum, null, false);
    }

    public CmdResult
    consult(String conNum, String targetNum, java.util.Map<String, String> __ctx)
    {
        return consult(conNum, targetNum, __ctx, true);
    }

    private CmdResult
    consult(String conNum, String targetNum, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("consult");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.consult(conNum, targetNum, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __consult_name = "consult";

    public Ice.AsyncResult begin_consult(String conNum, String targetNum)
    {
        return begin_consult(conNum, targetNum, null, false, null);
    }

    public Ice.AsyncResult begin_consult(String conNum, String targetNum, java.util.Map<String, String> __ctx)
    {
        return begin_consult(conNum, targetNum, __ctx, true, null);
    }

    public Ice.AsyncResult begin_consult(String conNum, String targetNum, Ice.Callback __cb)
    {
        return begin_consult(conNum, targetNum, null, false, __cb);
    }

    public Ice.AsyncResult begin_consult(String conNum, String targetNum, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_consult(conNum, targetNum, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_consult(String conNum, String targetNum, Callback_MC3_consult __cb)
    {
        return begin_consult(conNum, targetNum, null, false, __cb);
    }

    public Ice.AsyncResult begin_consult(String conNum, String targetNum, java.util.Map<String, String> __ctx, Callback_MC3_consult __cb)
    {
        return begin_consult(conNum, targetNum, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_consult(String conNum, String targetNum, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__consult_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __consult_name, __cb);
        try
        {
            __result.__prepare(__consult_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(conNum);
            __os.writeString(targetNum);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_consult(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __consult_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    deleteFixGWIP(String fixVirtualIp)
    {
        return deleteFixGWIP(fixVirtualIp, null, false);
    }

    public CmdResult
    deleteFixGWIP(String fixVirtualIp, java.util.Map<String, String> __ctx)
    {
        return deleteFixGWIP(fixVirtualIp, __ctx, true);
    }

    private CmdResult
    deleteFixGWIP(String fixVirtualIp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deleteFixGWIP");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.deleteFixGWIP(fixVirtualIp, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __deleteFixGWIP_name = "deleteFixGWIP";

    public Ice.AsyncResult begin_deleteFixGWIP(String fixVirtualIp)
    {
        return begin_deleteFixGWIP(fixVirtualIp, null, false, null);
    }

    public Ice.AsyncResult begin_deleteFixGWIP(String fixVirtualIp, java.util.Map<String, String> __ctx)
    {
        return begin_deleteFixGWIP(fixVirtualIp, __ctx, true, null);
    }

    public Ice.AsyncResult begin_deleteFixGWIP(String fixVirtualIp, Ice.Callback __cb)
    {
        return begin_deleteFixGWIP(fixVirtualIp, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteFixGWIP(String fixVirtualIp, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteFixGWIP(fixVirtualIp, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_deleteFixGWIP(String fixVirtualIp, Callback_MC3_deleteFixGWIP __cb)
    {
        return begin_deleteFixGWIP(fixVirtualIp, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteFixGWIP(String fixVirtualIp, java.util.Map<String, String> __ctx, Callback_MC3_deleteFixGWIP __cb)
    {
        return begin_deleteFixGWIP(fixVirtualIp, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deleteFixGWIP(String fixVirtualIp, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteFixGWIP_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deleteFixGWIP_name, __cb);
        try
        {
            __result.__prepare(__deleteFixGWIP_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(fixVirtualIp);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_deleteFixGWIP(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __deleteFixGWIP_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    deleteGWIP(String virtualFromIp, String virtualToIp)
    {
        return deleteGWIP(virtualFromIp, virtualToIp, null, false);
    }

    public CmdResult
    deleteGWIP(String virtualFromIp, String virtualToIp, java.util.Map<String, String> __ctx)
    {
        return deleteGWIP(virtualFromIp, virtualToIp, __ctx, true);
    }

    private CmdResult
    deleteGWIP(String virtualFromIp, String virtualToIp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deleteGWIP");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.deleteGWIP(virtualFromIp, virtualToIp, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __deleteGWIP_name = "deleteGWIP";

    public Ice.AsyncResult begin_deleteGWIP(String virtualFromIp, String virtualToIp)
    {
        return begin_deleteGWIP(virtualFromIp, virtualToIp, null, false, null);
    }

    public Ice.AsyncResult begin_deleteGWIP(String virtualFromIp, String virtualToIp, java.util.Map<String, String> __ctx)
    {
        return begin_deleteGWIP(virtualFromIp, virtualToIp, __ctx, true, null);
    }

    public Ice.AsyncResult begin_deleteGWIP(String virtualFromIp, String virtualToIp, Ice.Callback __cb)
    {
        return begin_deleteGWIP(virtualFromIp, virtualToIp, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteGWIP(String virtualFromIp, String virtualToIp, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteGWIP(virtualFromIp, virtualToIp, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_deleteGWIP(String virtualFromIp, String virtualToIp, Callback_MC3_deleteGWIP __cb)
    {
        return begin_deleteGWIP(virtualFromIp, virtualToIp, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteGWIP(String virtualFromIp, String virtualToIp, java.util.Map<String, String> __ctx, Callback_MC3_deleteGWIP __cb)
    {
        return begin_deleteGWIP(virtualFromIp, virtualToIp, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deleteGWIP(String virtualFromIp, String virtualToIp, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteGWIP_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deleteGWIP_name, __cb);
        try
        {
            __result.__prepare(__deleteGWIP_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(virtualFromIp);
            __os.writeString(virtualToIp);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_deleteGWIP(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __deleteGWIP_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    deleteLiveMeetTemplate(String templateName)
    {
        return deleteLiveMeetTemplate(templateName, null, false);
    }

    public CmdResult
    deleteLiveMeetTemplate(String templateName, java.util.Map<String, String> __ctx)
    {
        return deleteLiveMeetTemplate(templateName, __ctx, true);
    }

    private CmdResult
    deleteLiveMeetTemplate(String templateName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deleteLiveMeetTemplate");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.deleteLiveMeetTemplate(templateName, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __deleteLiveMeetTemplate_name = "deleteLiveMeetTemplate";

    public Ice.AsyncResult begin_deleteLiveMeetTemplate(String templateName)
    {
        return begin_deleteLiveMeetTemplate(templateName, null, false, null);
    }

    public Ice.AsyncResult begin_deleteLiveMeetTemplate(String templateName, java.util.Map<String, String> __ctx)
    {
        return begin_deleteLiveMeetTemplate(templateName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_deleteLiveMeetTemplate(String templateName, Ice.Callback __cb)
    {
        return begin_deleteLiveMeetTemplate(templateName, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteLiveMeetTemplate(String templateName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteLiveMeetTemplate(templateName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_deleteLiveMeetTemplate(String templateName, Callback_MC3_deleteLiveMeetTemplate __cb)
    {
        return begin_deleteLiveMeetTemplate(templateName, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteLiveMeetTemplate(String templateName, java.util.Map<String, String> __ctx, Callback_MC3_deleteLiveMeetTemplate __cb)
    {
        return begin_deleteLiveMeetTemplate(templateName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deleteLiveMeetTemplate(String templateName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteLiveMeetTemplate_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deleteLiveMeetTemplate_name, __cb);
        try
        {
            __result.__prepare(__deleteLiveMeetTemplate_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(templateName);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_deleteLiveMeetTemplate(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __deleteLiveMeetTemplate_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    deleteMutiTemplate(String templateName)
    {
        return deleteMutiTemplate(templateName, null, false);
    }

    public CmdResult
    deleteMutiTemplate(String templateName, java.util.Map<String, String> __ctx)
    {
        return deleteMutiTemplate(templateName, __ctx, true);
    }

    private CmdResult
    deleteMutiTemplate(String templateName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deleteMutiTemplate");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.deleteMutiTemplate(templateName, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __deleteMutiTemplate_name = "deleteMutiTemplate";

    public Ice.AsyncResult begin_deleteMutiTemplate(String templateName)
    {
        return begin_deleteMutiTemplate(templateName, null, false, null);
    }

    public Ice.AsyncResult begin_deleteMutiTemplate(String templateName, java.util.Map<String, String> __ctx)
    {
        return begin_deleteMutiTemplate(templateName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_deleteMutiTemplate(String templateName, Ice.Callback __cb)
    {
        return begin_deleteMutiTemplate(templateName, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteMutiTemplate(String templateName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteMutiTemplate(templateName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_deleteMutiTemplate(String templateName, Callback_MC3_deleteMutiTemplate __cb)
    {
        return begin_deleteMutiTemplate(templateName, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteMutiTemplate(String templateName, java.util.Map<String, String> __ctx, Callback_MC3_deleteMutiTemplate __cb)
    {
        return begin_deleteMutiTemplate(templateName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deleteMutiTemplate(String templateName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteMutiTemplate_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deleteMutiTemplate_name, __cb);
        try
        {
            __result.__prepare(__deleteMutiTemplate_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(templateName);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_deleteMutiTemplate(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __deleteMutiTemplate_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    deleteTerminal(String name)
    {
        return deleteTerminal(name, null, false);
    }

    public CmdResult
    deleteTerminal(String name, java.util.Map<String, String> __ctx)
    {
        return deleteTerminal(name, __ctx, true);
    }

    private CmdResult
    deleteTerminal(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deleteTerminal");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.deleteTerminal(name, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __deleteTerminal_name = "deleteTerminal";

    public Ice.AsyncResult begin_deleteTerminal(String name)
    {
        return begin_deleteTerminal(name, null, false, null);
    }

    public Ice.AsyncResult begin_deleteTerminal(String name, java.util.Map<String, String> __ctx)
    {
        return begin_deleteTerminal(name, __ctx, true, null);
    }

    public Ice.AsyncResult begin_deleteTerminal(String name, Ice.Callback __cb)
    {
        return begin_deleteTerminal(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteTerminal(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteTerminal(name, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_deleteTerminal(String name, Callback_MC3_deleteTerminal __cb)
    {
        return begin_deleteTerminal(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteTerminal(String name, java.util.Map<String, String> __ctx, Callback_MC3_deleteTerminal __cb)
    {
        return begin_deleteTerminal(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deleteTerminal(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteTerminal_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deleteTerminal_name, __cb);
        try
        {
            __result.__prepare(__deleteTerminal_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_deleteTerminal(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __deleteTerminal_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    disconnectAll(String meetnumber)
    {
        return disconnectAll(meetnumber, null, false);
    }

    public CmdResult
    disconnectAll(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return disconnectAll(meetnumber, __ctx, true);
    }

    private CmdResult
    disconnectAll(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("disconnectAll");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.disconnectAll(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __disconnectAll_name = "disconnectAll";

    public Ice.AsyncResult begin_disconnectAll(String meetnumber)
    {
        return begin_disconnectAll(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_disconnectAll(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_disconnectAll(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_disconnectAll(String meetnumber, Ice.Callback __cb)
    {
        return begin_disconnectAll(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_disconnectAll(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_disconnectAll(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_disconnectAll(String meetnumber, Callback_MC3_disconnectAll __cb)
    {
        return begin_disconnectAll(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_disconnectAll(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_disconnectAll __cb)
    {
        return begin_disconnectAll(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_disconnectAll(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__disconnectAll_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __disconnectAll_name, __cb);
        try
        {
            __result.__prepare(__disconnectAll_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_disconnectAll(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __disconnectAll_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    disconnectH323Call2Channels(TerminalInfo h323Terminal, String number)
    {
        return disconnectH323Call2Channels(h323Terminal, number, null, false);
    }

    public CmdResult
    disconnectH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx)
    {
        return disconnectH323Call2Channels(h323Terminal, number, __ctx, true);
    }

    private CmdResult
    disconnectH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("disconnectH323Call2Channels");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.disconnectH323Call2Channels(h323Terminal, number, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __disconnectH323Call2Channels_name = "disconnectH323Call2Channels";

    public Ice.AsyncResult begin_disconnectH323Call2Channels(TerminalInfo h323Terminal, String number)
    {
        return begin_disconnectH323Call2Channels(h323Terminal, number, null, false, null);
    }

    public Ice.AsyncResult begin_disconnectH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx)
    {
        return begin_disconnectH323Call2Channels(h323Terminal, number, __ctx, true, null);
    }

    public Ice.AsyncResult begin_disconnectH323Call2Channels(TerminalInfo h323Terminal, String number, Ice.Callback __cb)
    {
        return begin_disconnectH323Call2Channels(h323Terminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_disconnectH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_disconnectH323Call2Channels(h323Terminal, number, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_disconnectH323Call2Channels(TerminalInfo h323Terminal, String number, Callback_MC3_disconnectH323Call2Channels __cb)
    {
        return begin_disconnectH323Call2Channels(h323Terminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_disconnectH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, Callback_MC3_disconnectH323Call2Channels __cb)
    {
        return begin_disconnectH323Call2Channels(h323Terminal, number, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_disconnectH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__disconnectH323Call2Channels_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __disconnectH323Call2Channels_name, __cb);
        try
        {
            __result.__prepare(__disconnectH323Call2Channels_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            h323Terminal.__write(__os);
            __os.writeString(number);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_disconnectH323Call2Channels(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __disconnectH323Call2Channels_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    disconnectMutiTerminal(String meetnumber, TerminalInfo ter)
    {
        return disconnectMutiTerminal(meetnumber, ter, null, false);
    }

    public CmdResult
    disconnectMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return disconnectMutiTerminal(meetnumber, ter, __ctx, true);
    }

    private CmdResult
    disconnectMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("disconnectMutiTerminal");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.disconnectMutiTerminal(meetnumber, ter, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __disconnectMutiTerminal_name = "disconnectMutiTerminal";

    public Ice.AsyncResult begin_disconnectMutiTerminal(String meetnumber, TerminalInfo ter)
    {
        return begin_disconnectMutiTerminal(meetnumber, ter, null, false, null);
    }

    public Ice.AsyncResult begin_disconnectMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return begin_disconnectMutiTerminal(meetnumber, ter, __ctx, true, null);
    }

    public Ice.AsyncResult begin_disconnectMutiTerminal(String meetnumber, TerminalInfo ter, Ice.Callback __cb)
    {
        return begin_disconnectMutiTerminal(meetnumber, ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_disconnectMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_disconnectMutiTerminal(meetnumber, ter, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_disconnectMutiTerminal(String meetnumber, TerminalInfo ter, Callback_MC3_disconnectMutiTerminal __cb)
    {
        return begin_disconnectMutiTerminal(meetnumber, ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_disconnectMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx, Callback_MC3_disconnectMutiTerminal __cb)
    {
        return begin_disconnectMutiTerminal(meetnumber, ter, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_disconnectMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__disconnectMutiTerminal_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __disconnectMutiTerminal_name, __cb);
        try
        {
            __result.__prepare(__disconnectMutiTerminal_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            ter.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_disconnectMutiTerminal(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __disconnectMutiTerminal_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    disconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number)
    {
        return disconnectRtspCall2Channels(rtspTerminal, number, null, false);
    }

    public CmdResult
    disconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx)
    {
        return disconnectRtspCall2Channels(rtspTerminal, number, __ctx, true);
    }

    private CmdResult
    disconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("disconnectRtspCall2Channels");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.disconnectRtspCall2Channels(rtspTerminal, number, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __disconnectRtspCall2Channels_name = "disconnectRtspCall2Channels";

    public Ice.AsyncResult begin_disconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number)
    {
        return begin_disconnectRtspCall2Channels(rtspTerminal, number, null, false, null);
    }

    public Ice.AsyncResult begin_disconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx)
    {
        return begin_disconnectRtspCall2Channels(rtspTerminal, number, __ctx, true, null);
    }

    public Ice.AsyncResult begin_disconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, Ice.Callback __cb)
    {
        return begin_disconnectRtspCall2Channels(rtspTerminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_disconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_disconnectRtspCall2Channels(rtspTerminal, number, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_disconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, Callback_MC3_disconnectRtspCall2Channels __cb)
    {
        return begin_disconnectRtspCall2Channels(rtspTerminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_disconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, Callback_MC3_disconnectRtspCall2Channels __cb)
    {
        return begin_disconnectRtspCall2Channels(rtspTerminal, number, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_disconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__disconnectRtspCall2Channels_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __disconnectRtspCall2Channels_name, __cb);
        try
        {
            __result.__prepare(__disconnectRtspCall2Channels_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            rtspTerminal.__write(__os);
            __os.writeString(number);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_disconnectRtspCall2Channels(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __disconnectRtspCall2Channels_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<TerminalInfo>
    getAudioTerminal(String ternumber)
    {
        return getAudioTerminal(ternumber, null, false);
    }

    public java.util.List<TerminalInfo>
    getAudioTerminal(String ternumber, java.util.Map<String, String> __ctx)
    {
        return getAudioTerminal(ternumber, __ctx, true);
    }

    private java.util.List<TerminalInfo>
    getAudioTerminal(String ternumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAudioTerminal");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getAudioTerminal(ternumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getAudioTerminal_name = "getAudioTerminal";

    public Ice.AsyncResult begin_getAudioTerminal(String ternumber)
    {
        return begin_getAudioTerminal(ternumber, null, false, null);
    }

    public Ice.AsyncResult begin_getAudioTerminal(String ternumber, java.util.Map<String, String> __ctx)
    {
        return begin_getAudioTerminal(ternumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getAudioTerminal(String ternumber, Ice.Callback __cb)
    {
        return begin_getAudioTerminal(ternumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getAudioTerminal(String ternumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAudioTerminal(ternumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAudioTerminal(String ternumber, Callback_MC3_getAudioTerminal __cb)
    {
        return begin_getAudioTerminal(ternumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getAudioTerminal(String ternumber, java.util.Map<String, String> __ctx, Callback_MC3_getAudioTerminal __cb)
    {
        return begin_getAudioTerminal(ternumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAudioTerminal(String ternumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAudioTerminal_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAudioTerminal_name, __cb);
        try
        {
            __result.__prepare(__getAudioTerminal_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ternumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<TerminalInfo> end_getAudioTerminal(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAudioTerminal_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<TerminalInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TerminalListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<TerminalInfo>
    getAudioTerminalList()
    {
        return getAudioTerminalList(null, false);
    }

    public java.util.List<TerminalInfo>
    getAudioTerminalList(java.util.Map<String, String> __ctx)
    {
        return getAudioTerminalList(__ctx, true);
    }

    private java.util.List<TerminalInfo>
    getAudioTerminalList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAudioTerminalList");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getAudioTerminalList(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getAudioTerminalList_name = "getAudioTerminalList";

    public Ice.AsyncResult begin_getAudioTerminalList()
    {
        return begin_getAudioTerminalList(null, false, null);
    }

    public Ice.AsyncResult begin_getAudioTerminalList(java.util.Map<String, String> __ctx)
    {
        return begin_getAudioTerminalList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAudioTerminalList(Ice.Callback __cb)
    {
        return begin_getAudioTerminalList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAudioTerminalList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAudioTerminalList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAudioTerminalList(Callback_MC3_getAudioTerminalList __cb)
    {
        return begin_getAudioTerminalList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAudioTerminalList(java.util.Map<String, String> __ctx, Callback_MC3_getAudioTerminalList __cb)
    {
        return begin_getAudioTerminalList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAudioTerminalList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAudioTerminalList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAudioTerminalList_name, __cb);
        try
        {
            __result.__prepare(__getAudioTerminalList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<TerminalInfo> end_getAudioTerminalList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAudioTerminalList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<TerminalInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TerminalListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<ChairCycleInfo>
    getChaircycleList(String meetnumber)
    {
        return getChaircycleList(meetnumber, null, false);
    }

    public java.util.List<ChairCycleInfo>
    getChaircycleList(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return getChaircycleList(meetnumber, __ctx, true);
    }

    private java.util.List<ChairCycleInfo>
    getChaircycleList(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getChaircycleList");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getChaircycleList(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getChaircycleList_name = "getChaircycleList";

    public Ice.AsyncResult begin_getChaircycleList(String meetnumber)
    {
        return begin_getChaircycleList(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_getChaircycleList(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_getChaircycleList(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getChaircycleList(String meetnumber, Ice.Callback __cb)
    {
        return begin_getChaircycleList(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getChaircycleList(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getChaircycleList(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getChaircycleList(String meetnumber, Callback_MC3_getChaircycleList __cb)
    {
        return begin_getChaircycleList(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getChaircycleList(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_getChaircycleList __cb)
    {
        return begin_getChaircycleList(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getChaircycleList(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getChaircycleList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getChaircycleList_name, __cb);
        try
        {
            __result.__prepare(__getChaircycleList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<ChairCycleInfo> end_getChaircycleList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getChaircycleList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<ChairCycleInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = ChairCycleInfoListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<ChairCycleInfo>
    getChairseeList(String meetnumber)
    {
        return getChairseeList(meetnumber, null, false);
    }

    public java.util.List<ChairCycleInfo>
    getChairseeList(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return getChairseeList(meetnumber, __ctx, true);
    }

    private java.util.List<ChairCycleInfo>
    getChairseeList(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getChairseeList");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getChairseeList(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getChairseeList_name = "getChairseeList";

    public Ice.AsyncResult begin_getChairseeList(String meetnumber)
    {
        return begin_getChairseeList(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_getChairseeList(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_getChairseeList(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getChairseeList(String meetnumber, Ice.Callback __cb)
    {
        return begin_getChairseeList(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getChairseeList(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getChairseeList(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getChairseeList(String meetnumber, Callback_MC3_getChairseeList __cb)
    {
        return begin_getChairseeList(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getChairseeList(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_getChairseeList __cb)
    {
        return begin_getChairseeList(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getChairseeList(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getChairseeList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getChairseeList_name, __cb);
        try
        {
            __result.__prepare(__getChairseeList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<ChairCycleInfo> end_getChairseeList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getChairseeList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<ChairCycleInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = ChairCycleInfoListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    getChannelsInLicenseNumber()
    {
        return getChannelsInLicenseNumber(null, false);
    }

    public CmdResult
    getChannelsInLicenseNumber(java.util.Map<String, String> __ctx)
    {
        return getChannelsInLicenseNumber(__ctx, true);
    }

    private CmdResult
    getChannelsInLicenseNumber(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getChannelsInLicenseNumber");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getChannelsInLicenseNumber(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getChannelsInLicenseNumber_name = "getChannelsInLicenseNumber";

    public Ice.AsyncResult begin_getChannelsInLicenseNumber()
    {
        return begin_getChannelsInLicenseNumber(null, false, null);
    }

    public Ice.AsyncResult begin_getChannelsInLicenseNumber(java.util.Map<String, String> __ctx)
    {
        return begin_getChannelsInLicenseNumber(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getChannelsInLicenseNumber(Ice.Callback __cb)
    {
        return begin_getChannelsInLicenseNumber(null, false, __cb);
    }

    public Ice.AsyncResult begin_getChannelsInLicenseNumber(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getChannelsInLicenseNumber(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getChannelsInLicenseNumber(Callback_MC3_getChannelsInLicenseNumber __cb)
    {
        return begin_getChannelsInLicenseNumber(null, false, __cb);
    }

    public Ice.AsyncResult begin_getChannelsInLicenseNumber(java.util.Map<String, String> __ctx, Callback_MC3_getChannelsInLicenseNumber __cb)
    {
        return begin_getChannelsInLicenseNumber(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getChannelsInLicenseNumber(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getChannelsInLicenseNumber_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getChannelsInLicenseNumber_name, __cb);
        try
        {
            __result.__prepare(__getChannelsInLicenseNumber_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_getChannelsInLicenseNumber(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getChannelsInLicenseNumber_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<Conference>
    getChannelsList()
    {
        return getChannelsList(null, false);
    }

    public java.util.List<Conference>
    getChannelsList(java.util.Map<String, String> __ctx)
    {
        return getChannelsList(__ctx, true);
    }

    private java.util.List<Conference>
    getChannelsList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getChannelsList");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getChannelsList(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getChannelsList_name = "getChannelsList";

    public Ice.AsyncResult begin_getChannelsList()
    {
        return begin_getChannelsList(null, false, null);
    }

    public Ice.AsyncResult begin_getChannelsList(java.util.Map<String, String> __ctx)
    {
        return begin_getChannelsList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getChannelsList(Ice.Callback __cb)
    {
        return begin_getChannelsList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getChannelsList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getChannelsList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getChannelsList(Callback_MC3_getChannelsList __cb)
    {
        return begin_getChannelsList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getChannelsList(java.util.Map<String, String> __ctx, Callback_MC3_getChannelsList __cb)
    {
        return begin_getChannelsList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getChannelsList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getChannelsList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getChannelsList_name, __cb);
        try
        {
            __result.__prepare(__getChannelsList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<Conference> end_getChannelsList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getChannelsList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<Conference> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = ConferenceListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<TerminalInfo>
    getConferenceIdleAudioTerminals(String meetnumber)
    {
        return getConferenceIdleAudioTerminals(meetnumber, null, false);
    }

    public java.util.List<TerminalInfo>
    getConferenceIdleAudioTerminals(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return getConferenceIdleAudioTerminals(meetnumber, __ctx, true);
    }

    private java.util.List<TerminalInfo>
    getConferenceIdleAudioTerminals(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getConferenceIdleAudioTerminals");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getConferenceIdleAudioTerminals(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getConferenceIdleAudioTerminals_name = "getConferenceIdleAudioTerminals";

    public Ice.AsyncResult begin_getConferenceIdleAudioTerminals(String meetnumber)
    {
        return begin_getConferenceIdleAudioTerminals(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_getConferenceIdleAudioTerminals(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_getConferenceIdleAudioTerminals(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getConferenceIdleAudioTerminals(String meetnumber, Ice.Callback __cb)
    {
        return begin_getConferenceIdleAudioTerminals(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getConferenceIdleAudioTerminals(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConferenceIdleAudioTerminals(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getConferenceIdleAudioTerminals(String meetnumber, Callback_MC3_getConferenceIdleAudioTerminals __cb)
    {
        return begin_getConferenceIdleAudioTerminals(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getConferenceIdleAudioTerminals(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_getConferenceIdleAudioTerminals __cb)
    {
        return begin_getConferenceIdleAudioTerminals(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConferenceIdleAudioTerminals(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConferenceIdleAudioTerminals_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConferenceIdleAudioTerminals_name, __cb);
        try
        {
            __result.__prepare(__getConferenceIdleAudioTerminals_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<TerminalInfo> end_getConferenceIdleAudioTerminals(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConferenceIdleAudioTerminals_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<TerminalInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TerminalListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<TerminalInfo>
    getConferenceIdleVedioTerminals(String meetnumber)
    {
        return getConferenceIdleVedioTerminals(meetnumber, null, false);
    }

    public java.util.List<TerminalInfo>
    getConferenceIdleVedioTerminals(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return getConferenceIdleVedioTerminals(meetnumber, __ctx, true);
    }

    private java.util.List<TerminalInfo>
    getConferenceIdleVedioTerminals(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getConferenceIdleVedioTerminals");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getConferenceIdleVedioTerminals(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getConferenceIdleVedioTerminals_name = "getConferenceIdleVedioTerminals";

    public Ice.AsyncResult begin_getConferenceIdleVedioTerminals(String meetnumber)
    {
        return begin_getConferenceIdleVedioTerminals(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_getConferenceIdleVedioTerminals(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_getConferenceIdleVedioTerminals(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getConferenceIdleVedioTerminals(String meetnumber, Ice.Callback __cb)
    {
        return begin_getConferenceIdleVedioTerminals(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getConferenceIdleVedioTerminals(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConferenceIdleVedioTerminals(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getConferenceIdleVedioTerminals(String meetnumber, Callback_MC3_getConferenceIdleVedioTerminals __cb)
    {
        return begin_getConferenceIdleVedioTerminals(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getConferenceIdleVedioTerminals(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_getConferenceIdleVedioTerminals __cb)
    {
        return begin_getConferenceIdleVedioTerminals(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConferenceIdleVedioTerminals(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConferenceIdleVedioTerminals_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConferenceIdleVedioTerminals_name, __cb);
        try
        {
            __result.__prepare(__getConferenceIdleVedioTerminals_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<TerminalInfo> end_getConferenceIdleVedioTerminals(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConferenceIdleVedioTerminals_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<TerminalInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TerminalListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<Conference>
    getConferenceInfo(String meetnumber)
    {
        return getConferenceInfo(meetnumber, null, false);
    }

    public java.util.List<Conference>
    getConferenceInfo(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return getConferenceInfo(meetnumber, __ctx, true);
    }

    private java.util.List<Conference>
    getConferenceInfo(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getConferenceInfo");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getConferenceInfo(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getConferenceInfo_name = "getConferenceInfo";

    public Ice.AsyncResult begin_getConferenceInfo(String meetnumber)
    {
        return begin_getConferenceInfo(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_getConferenceInfo(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_getConferenceInfo(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getConferenceInfo(String meetnumber, Ice.Callback __cb)
    {
        return begin_getConferenceInfo(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getConferenceInfo(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConferenceInfo(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getConferenceInfo(String meetnumber, Callback_MC3_getConferenceInfo __cb)
    {
        return begin_getConferenceInfo(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getConferenceInfo(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_getConferenceInfo __cb)
    {
        return begin_getConferenceInfo(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConferenceInfo(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConferenceInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConferenceInfo_name, __cb);
        try
        {
            __result.__prepare(__getConferenceInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<Conference> end_getConferenceInfo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConferenceInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<Conference> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = ConferenceListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<Conference>
    getConferenceInfoByTerminal(TerminalInfo ter)
    {
        return getConferenceInfoByTerminal(ter, null, false);
    }

    public java.util.List<Conference>
    getConferenceInfoByTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return getConferenceInfoByTerminal(ter, __ctx, true);
    }

    private java.util.List<Conference>
    getConferenceInfoByTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getConferenceInfoByTerminal");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getConferenceInfoByTerminal(ter, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getConferenceInfoByTerminal_name = "getConferenceInfoByTerminal";

    public Ice.AsyncResult begin_getConferenceInfoByTerminal(TerminalInfo ter)
    {
        return begin_getConferenceInfoByTerminal(ter, null, false, null);
    }

    public Ice.AsyncResult begin_getConferenceInfoByTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return begin_getConferenceInfoByTerminal(ter, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getConferenceInfoByTerminal(TerminalInfo ter, Ice.Callback __cb)
    {
        return begin_getConferenceInfoByTerminal(ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_getConferenceInfoByTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConferenceInfoByTerminal(ter, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getConferenceInfoByTerminal(TerminalInfo ter, Callback_MC3_getConferenceInfoByTerminal __cb)
    {
        return begin_getConferenceInfoByTerminal(ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_getConferenceInfoByTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx, Callback_MC3_getConferenceInfoByTerminal __cb)
    {
        return begin_getConferenceInfoByTerminal(ter, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConferenceInfoByTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConferenceInfoByTerminal_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConferenceInfoByTerminal_name, __cb);
        try
        {
            __result.__prepare(__getConferenceInfoByTerminal_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            ter.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<Conference> end_getConferenceInfoByTerminal(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConferenceInfoByTerminal_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<Conference> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = ConferenceListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<Conference>
    getConferenceList()
    {
        return getConferenceList(null, false);
    }

    public java.util.List<Conference>
    getConferenceList(java.util.Map<String, String> __ctx)
    {
        return getConferenceList(__ctx, true);
    }

    private java.util.List<Conference>
    getConferenceList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getConferenceList");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getConferenceList(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getConferenceList_name = "getConferenceList";

    public Ice.AsyncResult begin_getConferenceList()
    {
        return begin_getConferenceList(null, false, null);
    }

    public Ice.AsyncResult begin_getConferenceList(java.util.Map<String, String> __ctx)
    {
        return begin_getConferenceList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getConferenceList(Ice.Callback __cb)
    {
        return begin_getConferenceList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getConferenceList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConferenceList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getConferenceList(Callback_MC3_getConferenceList __cb)
    {
        return begin_getConferenceList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getConferenceList(java.util.Map<String, String> __ctx, Callback_MC3_getConferenceList __cb)
    {
        return begin_getConferenceList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConferenceList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConferenceList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConferenceList_name, __cb);
        try
        {
            __result.__prepare(__getConferenceList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<Conference> end_getConferenceList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConferenceList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<Conference> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = ConferenceListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<ConferenceParam>
    getConferenceParam(String number)
    {
        return getConferenceParam(number, null, false);
    }

    public java.util.List<ConferenceParam>
    getConferenceParam(String number, java.util.Map<String, String> __ctx)
    {
        return getConferenceParam(number, __ctx, true);
    }

    private java.util.List<ConferenceParam>
    getConferenceParam(String number, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getConferenceParam");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getConferenceParam(number, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getConferenceParam_name = "getConferenceParam";

    public Ice.AsyncResult begin_getConferenceParam(String number)
    {
        return begin_getConferenceParam(number, null, false, null);
    }

    public Ice.AsyncResult begin_getConferenceParam(String number, java.util.Map<String, String> __ctx)
    {
        return begin_getConferenceParam(number, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getConferenceParam(String number, Ice.Callback __cb)
    {
        return begin_getConferenceParam(number, null, false, __cb);
    }

    public Ice.AsyncResult begin_getConferenceParam(String number, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConferenceParam(number, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getConferenceParam(String number, Callback_MC3_getConferenceParam __cb)
    {
        return begin_getConferenceParam(number, null, false, __cb);
    }

    public Ice.AsyncResult begin_getConferenceParam(String number, java.util.Map<String, String> __ctx, Callback_MC3_getConferenceParam __cb)
    {
        return begin_getConferenceParam(number, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConferenceParam(String number, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConferenceParam_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConferenceParam_name, __cb);
        try
        {
            __result.__prepare(__getConferenceParam_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(number);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<ConferenceParam> end_getConferenceParam(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConferenceParam_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<ConferenceParam> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = ConferenceParamListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<TerminalInfo>
    getConferenceTerminals(String meetnumber)
    {
        return getConferenceTerminals(meetnumber, null, false);
    }

    public java.util.List<TerminalInfo>
    getConferenceTerminals(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return getConferenceTerminals(meetnumber, __ctx, true);
    }

    private java.util.List<TerminalInfo>
    getConferenceTerminals(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getConferenceTerminals");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getConferenceTerminals(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getConferenceTerminals_name = "getConferenceTerminals";

    public Ice.AsyncResult begin_getConferenceTerminals(String meetnumber)
    {
        return begin_getConferenceTerminals(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_getConferenceTerminals(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_getConferenceTerminals(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getConferenceTerminals(String meetnumber, Ice.Callback __cb)
    {
        return begin_getConferenceTerminals(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getConferenceTerminals(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConferenceTerminals(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getConferenceTerminals(String meetnumber, Callback_MC3_getConferenceTerminals __cb)
    {
        return begin_getConferenceTerminals(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getConferenceTerminals(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_getConferenceTerminals __cb)
    {
        return begin_getConferenceTerminals(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConferenceTerminals(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConferenceTerminals_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConferenceTerminals_name, __cb);
        try
        {
            __result.__prepare(__getConferenceTerminals_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<TerminalInfo> end_getConferenceTerminals(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConferenceTerminals_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<TerminalInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TerminalListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public LiveMeetTemplate
    getLiveMeetTemplate(String templateName)
    {
        return getLiveMeetTemplate(templateName, null, false);
    }

    public LiveMeetTemplate
    getLiveMeetTemplate(String templateName, java.util.Map<String, String> __ctx)
    {
        return getLiveMeetTemplate(templateName, __ctx, true);
    }

    private LiveMeetTemplate
    getLiveMeetTemplate(String templateName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLiveMeetTemplate");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getLiveMeetTemplate(templateName, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getLiveMeetTemplate_name = "getLiveMeetTemplate";

    public Ice.AsyncResult begin_getLiveMeetTemplate(String templateName)
    {
        return begin_getLiveMeetTemplate(templateName, null, false, null);
    }

    public Ice.AsyncResult begin_getLiveMeetTemplate(String templateName, java.util.Map<String, String> __ctx)
    {
        return begin_getLiveMeetTemplate(templateName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getLiveMeetTemplate(String templateName, Ice.Callback __cb)
    {
        return begin_getLiveMeetTemplate(templateName, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLiveMeetTemplate(String templateName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLiveMeetTemplate(templateName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getLiveMeetTemplate(String templateName, Callback_MC3_getLiveMeetTemplate __cb)
    {
        return begin_getLiveMeetTemplate(templateName, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLiveMeetTemplate(String templateName, java.util.Map<String, String> __ctx, Callback_MC3_getLiveMeetTemplate __cb)
    {
        return begin_getLiveMeetTemplate(templateName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLiveMeetTemplate(String templateName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLiveMeetTemplate_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLiveMeetTemplate_name, __cb);
        try
        {
            __result.__prepare(__getLiveMeetTemplate_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(templateName);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public LiveMeetTemplate end_getLiveMeetTemplate(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLiveMeetTemplate_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        LiveMeetTemplate __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new LiveMeetTemplate();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<LiveMeetTemplate>
    getLiveMeetTemplateList()
    {
        return getLiveMeetTemplateList(null, false);
    }

    public java.util.List<LiveMeetTemplate>
    getLiveMeetTemplateList(java.util.Map<String, String> __ctx)
    {
        return getLiveMeetTemplateList(__ctx, true);
    }

    private java.util.List<LiveMeetTemplate>
    getLiveMeetTemplateList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLiveMeetTemplateList");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getLiveMeetTemplateList(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getLiveMeetTemplateList_name = "getLiveMeetTemplateList";

    public Ice.AsyncResult begin_getLiveMeetTemplateList()
    {
        return begin_getLiveMeetTemplateList(null, false, null);
    }

    public Ice.AsyncResult begin_getLiveMeetTemplateList(java.util.Map<String, String> __ctx)
    {
        return begin_getLiveMeetTemplateList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getLiveMeetTemplateList(Ice.Callback __cb)
    {
        return begin_getLiveMeetTemplateList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getLiveMeetTemplateList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLiveMeetTemplateList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getLiveMeetTemplateList(Callback_MC3_getLiveMeetTemplateList __cb)
    {
        return begin_getLiveMeetTemplateList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getLiveMeetTemplateList(java.util.Map<String, String> __ctx, Callback_MC3_getLiveMeetTemplateList __cb)
    {
        return begin_getLiveMeetTemplateList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLiveMeetTemplateList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLiveMeetTemplateList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLiveMeetTemplateList_name, __cb);
        try
        {
            __result.__prepare(__getLiveMeetTemplateList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<LiveMeetTemplate> end_getLiveMeetTemplateList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLiveMeetTemplateList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<LiveMeetTemplate> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = LiveMeetTemplateListHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<PacketInfo>
    getMemberPacketStatus(String meetnumber)
    {
        return getMemberPacketStatus(meetnumber, null, false);
    }

    public java.util.List<PacketInfo>
    getMemberPacketStatus(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return getMemberPacketStatus(meetnumber, __ctx, true);
    }

    private java.util.List<PacketInfo>
    getMemberPacketStatus(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMemberPacketStatus");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getMemberPacketStatus(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getMemberPacketStatus_name = "getMemberPacketStatus";

    public Ice.AsyncResult begin_getMemberPacketStatus(String meetnumber)
    {
        return begin_getMemberPacketStatus(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_getMemberPacketStatus(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_getMemberPacketStatus(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getMemberPacketStatus(String meetnumber, Ice.Callback __cb)
    {
        return begin_getMemberPacketStatus(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMemberPacketStatus(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMemberPacketStatus(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMemberPacketStatus(String meetnumber, Callback_MC3_getMemberPacketStatus __cb)
    {
        return begin_getMemberPacketStatus(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMemberPacketStatus(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_getMemberPacketStatus __cb)
    {
        return begin_getMemberPacketStatus(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMemberPacketStatus(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMemberPacketStatus_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMemberPacketStatus_name, __cb);
        try
        {
            __result.__prepare(__getMemberPacketStatus_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<PacketInfo> end_getMemberPacketStatus(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getMemberPacketStatus_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<PacketInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = PacketInfoListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<ScreenInfo>
    getScreenInfo(String meetnumber, String vscreen)
    {
        return getScreenInfo(meetnumber, vscreen, null, false);
    }

    public java.util.List<ScreenInfo>
    getScreenInfo(String meetnumber, String vscreen, java.util.Map<String, String> __ctx)
    {
        return getScreenInfo(meetnumber, vscreen, __ctx, true);
    }

    private java.util.List<ScreenInfo>
    getScreenInfo(String meetnumber, String vscreen, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getScreenInfo");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getScreenInfo(meetnumber, vscreen, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getScreenInfo_name = "getScreenInfo";

    public Ice.AsyncResult begin_getScreenInfo(String meetnumber, String vscreen)
    {
        return begin_getScreenInfo(meetnumber, vscreen, null, false, null);
    }

    public Ice.AsyncResult begin_getScreenInfo(String meetnumber, String vscreen, java.util.Map<String, String> __ctx)
    {
        return begin_getScreenInfo(meetnumber, vscreen, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getScreenInfo(String meetnumber, String vscreen, Ice.Callback __cb)
    {
        return begin_getScreenInfo(meetnumber, vscreen, null, false, __cb);
    }

    public Ice.AsyncResult begin_getScreenInfo(String meetnumber, String vscreen, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getScreenInfo(meetnumber, vscreen, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getScreenInfo(String meetnumber, String vscreen, Callback_MC3_getScreenInfo __cb)
    {
        return begin_getScreenInfo(meetnumber, vscreen, null, false, __cb);
    }

    public Ice.AsyncResult begin_getScreenInfo(String meetnumber, String vscreen, java.util.Map<String, String> __ctx, Callback_MC3_getScreenInfo __cb)
    {
        return begin_getScreenInfo(meetnumber, vscreen, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getScreenInfo(String meetnumber, String vscreen, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getScreenInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getScreenInfo_name, __cb);
        try
        {
            __result.__prepare(__getScreenInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.writeString(vscreen);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<ScreenInfo> end_getScreenInfo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getScreenInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<ScreenInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = ScreenListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * add by penglong 20130114 gw start
     **/
    public CmdResult
    getServiceMode()
    {
        return getServiceMode(null, false);
    }

    /**
     * add by penglong 20130114 gw start
     * @param __ctx The Context map to send with the invocation.
     **/
    public CmdResult
    getServiceMode(java.util.Map<String, String> __ctx)
    {
        return getServiceMode(__ctx, true);
    }

    private CmdResult
    getServiceMode(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getServiceMode");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getServiceMode(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getServiceMode_name = "getServiceMode";

    /**
     * add by penglong 20130114 gw start
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getServiceMode()
    {
        return begin_getServiceMode(null, false, null);
    }

    /**
     * add by penglong 20130114 gw start
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getServiceMode(java.util.Map<String, String> __ctx)
    {
        return begin_getServiceMode(__ctx, true, null);
    }

    /**
     * add by penglong 20130114 gw start
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getServiceMode(Ice.Callback __cb)
    {
        return begin_getServiceMode(null, false, __cb);
    }

    /**
     * add by penglong 20130114 gw start
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getServiceMode(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getServiceMode(__ctx, true, __cb);
    }

    /**
     * add by penglong 20130114 gw start
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getServiceMode(Callback_MC3_getServiceMode __cb)
    {
        return begin_getServiceMode(null, false, __cb);
    }

    /**
     * add by penglong 20130114 gw start
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getServiceMode(java.util.Map<String, String> __ctx, Callback_MC3_getServiceMode __cb)
    {
        return begin_getServiceMode(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getServiceMode(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getServiceMode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getServiceMode_name, __cb);
        try
        {
            __result.__prepare(__getServiceMode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public CmdResult end_getServiceMode(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getServiceMode_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<TerminalInfo>
    getTemplateAudioIdleTerminList(String templatename)
    {
        return getTemplateAudioIdleTerminList(templatename, null, false);
    }

    public java.util.List<TerminalInfo>
    getTemplateAudioIdleTerminList(String templatename, java.util.Map<String, String> __ctx)
    {
        return getTemplateAudioIdleTerminList(templatename, __ctx, true);
    }

    private java.util.List<TerminalInfo>
    getTemplateAudioIdleTerminList(String templatename, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTemplateAudioIdleTerminList");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getTemplateAudioIdleTerminList(templatename, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getTemplateAudioIdleTerminList_name = "getTemplateAudioIdleTerminList";

    public Ice.AsyncResult begin_getTemplateAudioIdleTerminList(String templatename)
    {
        return begin_getTemplateAudioIdleTerminList(templatename, null, false, null);
    }

    public Ice.AsyncResult begin_getTemplateAudioIdleTerminList(String templatename, java.util.Map<String, String> __ctx)
    {
        return begin_getTemplateAudioIdleTerminList(templatename, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getTemplateAudioIdleTerminList(String templatename, Ice.Callback __cb)
    {
        return begin_getTemplateAudioIdleTerminList(templatename, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTemplateAudioIdleTerminList(String templatename, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTemplateAudioIdleTerminList(templatename, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTemplateAudioIdleTerminList(String templatename, Callback_MC3_getTemplateAudioIdleTerminList __cb)
    {
        return begin_getTemplateAudioIdleTerminList(templatename, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTemplateAudioIdleTerminList(String templatename, java.util.Map<String, String> __ctx, Callback_MC3_getTemplateAudioIdleTerminList __cb)
    {
        return begin_getTemplateAudioIdleTerminList(templatename, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTemplateAudioIdleTerminList(String templatename, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTemplateAudioIdleTerminList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTemplateAudioIdleTerminList_name, __cb);
        try
        {
            __result.__prepare(__getTemplateAudioIdleTerminList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(templatename);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<TerminalInfo> end_getTemplateAudioIdleTerminList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTemplateAudioIdleTerminList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<TerminalInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TerminalListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<TerminalInfo>
    getTemplateAudioTerminList(String templatename)
    {
        return getTemplateAudioTerminList(templatename, null, false);
    }

    public java.util.List<TerminalInfo>
    getTemplateAudioTerminList(String templatename, java.util.Map<String, String> __ctx)
    {
        return getTemplateAudioTerminList(templatename, __ctx, true);
    }

    private java.util.List<TerminalInfo>
    getTemplateAudioTerminList(String templatename, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTemplateAudioTerminList");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getTemplateAudioTerminList(templatename, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getTemplateAudioTerminList_name = "getTemplateAudioTerminList";

    public Ice.AsyncResult begin_getTemplateAudioTerminList(String templatename)
    {
        return begin_getTemplateAudioTerminList(templatename, null, false, null);
    }

    public Ice.AsyncResult begin_getTemplateAudioTerminList(String templatename, java.util.Map<String, String> __ctx)
    {
        return begin_getTemplateAudioTerminList(templatename, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getTemplateAudioTerminList(String templatename, Ice.Callback __cb)
    {
        return begin_getTemplateAudioTerminList(templatename, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTemplateAudioTerminList(String templatename, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTemplateAudioTerminList(templatename, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTemplateAudioTerminList(String templatename, Callback_MC3_getTemplateAudioTerminList __cb)
    {
        return begin_getTemplateAudioTerminList(templatename, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTemplateAudioTerminList(String templatename, java.util.Map<String, String> __ctx, Callback_MC3_getTemplateAudioTerminList __cb)
    {
        return begin_getTemplateAudioTerminList(templatename, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTemplateAudioTerminList(String templatename, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTemplateAudioTerminList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTemplateAudioTerminList_name, __cb);
        try
        {
            __result.__prepare(__getTemplateAudioTerminList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(templatename);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<TerminalInfo> end_getTemplateAudioTerminList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTemplateAudioTerminList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<TerminalInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TerminalListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<TerminalInfo>
    getTemplateH323IdleTerminList(String templatename)
    {
        return getTemplateH323IdleTerminList(templatename, null, false);
    }

    public java.util.List<TerminalInfo>
    getTemplateH323IdleTerminList(String templatename, java.util.Map<String, String> __ctx)
    {
        return getTemplateH323IdleTerminList(templatename, __ctx, true);
    }

    private java.util.List<TerminalInfo>
    getTemplateH323IdleTerminList(String templatename, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTemplateH323IdleTerminList");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getTemplateH323IdleTerminList(templatename, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getTemplateH323IdleTerminList_name = "getTemplateH323IdleTerminList";

    public Ice.AsyncResult begin_getTemplateH323IdleTerminList(String templatename)
    {
        return begin_getTemplateH323IdleTerminList(templatename, null, false, null);
    }

    public Ice.AsyncResult begin_getTemplateH323IdleTerminList(String templatename, java.util.Map<String, String> __ctx)
    {
        return begin_getTemplateH323IdleTerminList(templatename, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getTemplateH323IdleTerminList(String templatename, Ice.Callback __cb)
    {
        return begin_getTemplateH323IdleTerminList(templatename, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTemplateH323IdleTerminList(String templatename, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTemplateH323IdleTerminList(templatename, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTemplateH323IdleTerminList(String templatename, Callback_MC3_getTemplateH323IdleTerminList __cb)
    {
        return begin_getTemplateH323IdleTerminList(templatename, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTemplateH323IdleTerminList(String templatename, java.util.Map<String, String> __ctx, Callback_MC3_getTemplateH323IdleTerminList __cb)
    {
        return begin_getTemplateH323IdleTerminList(templatename, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTemplateH323IdleTerminList(String templatename, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTemplateH323IdleTerminList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTemplateH323IdleTerminList_name, __cb);
        try
        {
            __result.__prepare(__getTemplateH323IdleTerminList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(templatename);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<TerminalInfo> end_getTemplateH323IdleTerminList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTemplateH323IdleTerminList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<TerminalInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TerminalListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<TerminalInfo>
    getTemplateH323TerminList(String templatename)
    {
        return getTemplateH323TerminList(templatename, null, false);
    }

    public java.util.List<TerminalInfo>
    getTemplateH323TerminList(String templatename, java.util.Map<String, String> __ctx)
    {
        return getTemplateH323TerminList(templatename, __ctx, true);
    }

    private java.util.List<TerminalInfo>
    getTemplateH323TerminList(String templatename, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTemplateH323TerminList");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getTemplateH323TerminList(templatename, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getTemplateH323TerminList_name = "getTemplateH323TerminList";

    public Ice.AsyncResult begin_getTemplateH323TerminList(String templatename)
    {
        return begin_getTemplateH323TerminList(templatename, null, false, null);
    }

    public Ice.AsyncResult begin_getTemplateH323TerminList(String templatename, java.util.Map<String, String> __ctx)
    {
        return begin_getTemplateH323TerminList(templatename, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getTemplateH323TerminList(String templatename, Ice.Callback __cb)
    {
        return begin_getTemplateH323TerminList(templatename, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTemplateH323TerminList(String templatename, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTemplateH323TerminList(templatename, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTemplateH323TerminList(String templatename, Callback_MC3_getTemplateH323TerminList __cb)
    {
        return begin_getTemplateH323TerminList(templatename, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTemplateH323TerminList(String templatename, java.util.Map<String, String> __ctx, Callback_MC3_getTemplateH323TerminList __cb)
    {
        return begin_getTemplateH323TerminList(templatename, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTemplateH323TerminList(String templatename, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTemplateH323TerminList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTemplateH323TerminList_name, __cb);
        try
        {
            __result.__prepare(__getTemplateH323TerminList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(templatename);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<TerminalInfo> end_getTemplateH323TerminList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTemplateH323TerminList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<TerminalInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TerminalListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<TemplateInfo>
    getTemplateList()
    {
        return getTemplateList(null, false);
    }

    public java.util.List<TemplateInfo>
    getTemplateList(java.util.Map<String, String> __ctx)
    {
        return getTemplateList(__ctx, true);
    }

    private java.util.List<TemplateInfo>
    getTemplateList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTemplateList");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getTemplateList(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getTemplateList_name = "getTemplateList";

    public Ice.AsyncResult begin_getTemplateList()
    {
        return begin_getTemplateList(null, false, null);
    }

    public Ice.AsyncResult begin_getTemplateList(java.util.Map<String, String> __ctx)
    {
        return begin_getTemplateList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTemplateList(Ice.Callback __cb)
    {
        return begin_getTemplateList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTemplateList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTemplateList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTemplateList(Callback_MC3_getTemplateList __cb)
    {
        return begin_getTemplateList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTemplateList(java.util.Map<String, String> __ctx, Callback_MC3_getTemplateList __cb)
    {
        return begin_getTemplateList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTemplateList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTemplateList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTemplateList_name, __cb);
        try
        {
            __result.__prepare(__getTemplateList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<TemplateInfo> end_getTemplateList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTemplateList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<TemplateInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TemplateSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<TemplateParamInfo>
    getTemplateParam(String templatename)
    {
        return getTemplateParam(templatename, null, false);
    }

    public java.util.List<TemplateParamInfo>
    getTemplateParam(String templatename, java.util.Map<String, String> __ctx)
    {
        return getTemplateParam(templatename, __ctx, true);
    }

    private java.util.List<TemplateParamInfo>
    getTemplateParam(String templatename, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTemplateParam");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getTemplateParam(templatename, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getTemplateParam_name = "getTemplateParam";

    public Ice.AsyncResult begin_getTemplateParam(String templatename)
    {
        return begin_getTemplateParam(templatename, null, false, null);
    }

    public Ice.AsyncResult begin_getTemplateParam(String templatename, java.util.Map<String, String> __ctx)
    {
        return begin_getTemplateParam(templatename, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getTemplateParam(String templatename, Ice.Callback __cb)
    {
        return begin_getTemplateParam(templatename, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTemplateParam(String templatename, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTemplateParam(templatename, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTemplateParam(String templatename, Callback_MC3_getTemplateParam __cb)
    {
        return begin_getTemplateParam(templatename, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTemplateParam(String templatename, java.util.Map<String, String> __ctx, Callback_MC3_getTemplateParam __cb)
    {
        return begin_getTemplateParam(templatename, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTemplateParam(String templatename, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTemplateParam_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTemplateParam_name, __cb);
        try
        {
            __result.__prepare(__getTemplateParam_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(templatename);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<TemplateParamInfo> end_getTemplateParam(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTemplateParam_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<TemplateParamInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TemplateParamListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<TerminalTypeInfo>
    getTemplateTerminalTypeList(String name)
    {
        return getTemplateTerminalTypeList(name, null, false);
    }

    public java.util.List<TerminalTypeInfo>
    getTemplateTerminalTypeList(String name, java.util.Map<String, String> __ctx)
    {
        return getTemplateTerminalTypeList(name, __ctx, true);
    }

    private java.util.List<TerminalTypeInfo>
    getTemplateTerminalTypeList(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTemplateTerminalTypeList");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getTemplateTerminalTypeList(name, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getTemplateTerminalTypeList_name = "getTemplateTerminalTypeList";

    public Ice.AsyncResult begin_getTemplateTerminalTypeList(String name)
    {
        return begin_getTemplateTerminalTypeList(name, null, false, null);
    }

    public Ice.AsyncResult begin_getTemplateTerminalTypeList(String name, java.util.Map<String, String> __ctx)
    {
        return begin_getTemplateTerminalTypeList(name, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getTemplateTerminalTypeList(String name, Ice.Callback __cb)
    {
        return begin_getTemplateTerminalTypeList(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTemplateTerminalTypeList(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTemplateTerminalTypeList(name, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTemplateTerminalTypeList(String name, Callback_MC3_getTemplateTerminalTypeList __cb)
    {
        return begin_getTemplateTerminalTypeList(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTemplateTerminalTypeList(String name, java.util.Map<String, String> __ctx, Callback_MC3_getTemplateTerminalTypeList __cb)
    {
        return begin_getTemplateTerminalTypeList(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTemplateTerminalTypeList(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTemplateTerminalTypeList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTemplateTerminalTypeList_name, __cb);
        try
        {
            __result.__prepare(__getTemplateTerminalTypeList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<TerminalTypeInfo> end_getTemplateTerminalTypeList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTemplateTerminalTypeList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<TerminalTypeInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TerminalTypeListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<TerminalInfo>
    getVedioTerminalList()
    {
        return getVedioTerminalList(null, false);
    }

    public java.util.List<TerminalInfo>
    getVedioTerminalList(java.util.Map<String, String> __ctx)
    {
        return getVedioTerminalList(__ctx, true);
    }

    private java.util.List<TerminalInfo>
    getVedioTerminalList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getVedioTerminalList");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getVedioTerminalList(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getVedioTerminalList_name = "getVedioTerminalList";

    public Ice.AsyncResult begin_getVedioTerminalList()
    {
        return begin_getVedioTerminalList(null, false, null);
    }

    public Ice.AsyncResult begin_getVedioTerminalList(java.util.Map<String, String> __ctx)
    {
        return begin_getVedioTerminalList(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getVedioTerminalList(Ice.Callback __cb)
    {
        return begin_getVedioTerminalList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getVedioTerminalList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getVedioTerminalList(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getVedioTerminalList(Callback_MC3_getVedioTerminalList __cb)
    {
        return begin_getVedioTerminalList(null, false, __cb);
    }

    public Ice.AsyncResult begin_getVedioTerminalList(java.util.Map<String, String> __ctx, Callback_MC3_getVedioTerminalList __cb)
    {
        return begin_getVedioTerminalList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getVedioTerminalList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getVedioTerminalList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getVedioTerminalList_name, __cb);
        try
        {
            __result.__prepare(__getVedioTerminalList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<TerminalInfo> end_getVedioTerminalList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getVedioTerminalList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<TerminalInfo> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TerminalListSHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public String
    getVscreen(String meetnumber)
    {
        return getVscreen(meetnumber, null, false);
    }

    public String
    getVscreen(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return getVscreen(meetnumber, __ctx, true);
    }

    private String
    getVscreen(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getVscreen");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.getVscreen(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getVscreen_name = "getVscreen";

    public Ice.AsyncResult begin_getVscreen(String meetnumber)
    {
        return begin_getVscreen(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_getVscreen(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_getVscreen(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getVscreen(String meetnumber, Ice.Callback __cb)
    {
        return begin_getVscreen(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getVscreen(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getVscreen(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getVscreen(String meetnumber, Callback_MC3_getVscreen __cb)
    {
        return begin_getVscreen(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_getVscreen(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_getVscreen __cb)
    {
        return begin_getVscreen(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getVscreen(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getVscreen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getVscreen_name, __cb);
        try
        {
            __result.__prepare(__getVscreen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getVscreen(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getVscreen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    inviteAudioTerminal(java.util.List<TerminalInfo> terminalList, String meetnumber)
    {
        return inviteAudioTerminal(terminalList, meetnumber, null, false);
    }

    public CmdResult
    inviteAudioTerminal(java.util.List<TerminalInfo> terminalList, String meetnumber, java.util.Map<String, String> __ctx)
    {
        return inviteAudioTerminal(terminalList, meetnumber, __ctx, true);
    }

    private CmdResult
    inviteAudioTerminal(java.util.List<TerminalInfo> terminalList, String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("inviteAudioTerminal");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.inviteAudioTerminal(terminalList, meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __inviteAudioTerminal_name = "inviteAudioTerminal";

    public Ice.AsyncResult begin_inviteAudioTerminal(java.util.List<TerminalInfo> terminalList, String meetnumber)
    {
        return begin_inviteAudioTerminal(terminalList, meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_inviteAudioTerminal(java.util.List<TerminalInfo> terminalList, String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_inviteAudioTerminal(terminalList, meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_inviteAudioTerminal(java.util.List<TerminalInfo> terminalList, String meetnumber, Ice.Callback __cb)
    {
        return begin_inviteAudioTerminal(terminalList, meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_inviteAudioTerminal(java.util.List<TerminalInfo> terminalList, String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_inviteAudioTerminal(terminalList, meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_inviteAudioTerminal(java.util.List<TerminalInfo> terminalList, String meetnumber, Callback_MC3_inviteAudioTerminal __cb)
    {
        return begin_inviteAudioTerminal(terminalList, meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_inviteAudioTerminal(java.util.List<TerminalInfo> terminalList, String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_inviteAudioTerminal __cb)
    {
        return begin_inviteAudioTerminal(terminalList, meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_inviteAudioTerminal(java.util.List<TerminalInfo> terminalList, String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__inviteAudioTerminal_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __inviteAudioTerminal_name, __cb);
        try
        {
            __result.__prepare(__inviteAudioTerminal_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            TerminalListSHelper.write(__os, terminalList);
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_inviteAudioTerminal(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __inviteAudioTerminal_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    inviteVedioTerminal(java.util.List<TerminalInfo> terminalList, String qualityType, Conference conf, MutiTemplateInfo template)
    {
        return inviteVedioTerminal(terminalList, qualityType, conf, template, null, false);
    }

    public CmdResult
    inviteVedioTerminal(java.util.List<TerminalInfo> terminalList, String qualityType, Conference conf, MutiTemplateInfo template, java.util.Map<String, String> __ctx)
    {
        return inviteVedioTerminal(terminalList, qualityType, conf, template, __ctx, true);
    }

    private CmdResult
    inviteVedioTerminal(java.util.List<TerminalInfo> terminalList, String qualityType, Conference conf, MutiTemplateInfo template, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("inviteVedioTerminal");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.inviteVedioTerminal(terminalList, qualityType, conf, template, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __inviteVedioTerminal_name = "inviteVedioTerminal";

    public Ice.AsyncResult begin_inviteVedioTerminal(java.util.List<TerminalInfo> terminalList, String qualityType, Conference conf, MutiTemplateInfo template)
    {
        return begin_inviteVedioTerminal(terminalList, qualityType, conf, template, null, false, null);
    }

    public Ice.AsyncResult begin_inviteVedioTerminal(java.util.List<TerminalInfo> terminalList, String qualityType, Conference conf, MutiTemplateInfo template, java.util.Map<String, String> __ctx)
    {
        return begin_inviteVedioTerminal(terminalList, qualityType, conf, template, __ctx, true, null);
    }

    public Ice.AsyncResult begin_inviteVedioTerminal(java.util.List<TerminalInfo> terminalList, String qualityType, Conference conf, MutiTemplateInfo template, Ice.Callback __cb)
    {
        return begin_inviteVedioTerminal(terminalList, qualityType, conf, template, null, false, __cb);
    }

    public Ice.AsyncResult begin_inviteVedioTerminal(java.util.List<TerminalInfo> terminalList, String qualityType, Conference conf, MutiTemplateInfo template, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_inviteVedioTerminal(terminalList, qualityType, conf, template, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_inviteVedioTerminal(java.util.List<TerminalInfo> terminalList, String qualityType, Conference conf, MutiTemplateInfo template, Callback_MC3_inviteVedioTerminal __cb)
    {
        return begin_inviteVedioTerminal(terminalList, qualityType, conf, template, null, false, __cb);
    }

    public Ice.AsyncResult begin_inviteVedioTerminal(java.util.List<TerminalInfo> terminalList, String qualityType, Conference conf, MutiTemplateInfo template, java.util.Map<String, String> __ctx, Callback_MC3_inviteVedioTerminal __cb)
    {
        return begin_inviteVedioTerminal(terminalList, qualityType, conf, template, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_inviteVedioTerminal(java.util.List<TerminalInfo> terminalList, String qualityType, Conference conf, MutiTemplateInfo template, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__inviteVedioTerminal_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __inviteVedioTerminal_name, __cb);
        try
        {
            __result.__prepare(__inviteVedioTerminal_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            TerminalListSHelper.write(__os, terminalList);
            __os.writeString(qualityType);
            conf.__write(__os);
            template.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_inviteVedioTerminal(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __inviteVedioTerminal_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    kickMutiTerminal(String meetnumber, TerminalInfo ter)
    {
        return kickMutiTerminal(meetnumber, ter, null, false);
    }

    public CmdResult
    kickMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return kickMutiTerminal(meetnumber, ter, __ctx, true);
    }

    private CmdResult
    kickMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("kickMutiTerminal");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.kickMutiTerminal(meetnumber, ter, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __kickMutiTerminal_name = "kickMutiTerminal";

    public Ice.AsyncResult begin_kickMutiTerminal(String meetnumber, TerminalInfo ter)
    {
        return begin_kickMutiTerminal(meetnumber, ter, null, false, null);
    }

    public Ice.AsyncResult begin_kickMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return begin_kickMutiTerminal(meetnumber, ter, __ctx, true, null);
    }

    public Ice.AsyncResult begin_kickMutiTerminal(String meetnumber, TerminalInfo ter, Ice.Callback __cb)
    {
        return begin_kickMutiTerminal(meetnumber, ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_kickMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_kickMutiTerminal(meetnumber, ter, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_kickMutiTerminal(String meetnumber, TerminalInfo ter, Callback_MC3_kickMutiTerminal __cb)
    {
        return begin_kickMutiTerminal(meetnumber, ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_kickMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx, Callback_MC3_kickMutiTerminal __cb)
    {
        return begin_kickMutiTerminal(meetnumber, ter, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_kickMutiTerminal(String meetnumber, TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__kickMutiTerminal_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __kickMutiTerminal_name, __cb);
        try
        {
            __result.__prepare(__kickMutiTerminal_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            ter.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_kickMutiTerminal(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __kickMutiTerminal_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    meetShift(String meet1, String dstroomid)
    {
        return meetShift(meet1, dstroomid, null, false);
    }

    public CmdResult
    meetShift(String meet1, String dstroomid, java.util.Map<String, String> __ctx)
    {
        return meetShift(meet1, dstroomid, __ctx, true);
    }

    private CmdResult
    meetShift(String meet1, String dstroomid, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("meetShift");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.meetShift(meet1, dstroomid, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __meetShift_name = "meetShift";

    public Ice.AsyncResult begin_meetShift(String meet1, String dstroomid)
    {
        return begin_meetShift(meet1, dstroomid, null, false, null);
    }

    public Ice.AsyncResult begin_meetShift(String meet1, String dstroomid, java.util.Map<String, String> __ctx)
    {
        return begin_meetShift(meet1, dstroomid, __ctx, true, null);
    }

    public Ice.AsyncResult begin_meetShift(String meet1, String dstroomid, Ice.Callback __cb)
    {
        return begin_meetShift(meet1, dstroomid, null, false, __cb);
    }

    public Ice.AsyncResult begin_meetShift(String meet1, String dstroomid, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_meetShift(meet1, dstroomid, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_meetShift(String meet1, String dstroomid, Callback_MC3_meetShift __cb)
    {
        return begin_meetShift(meet1, dstroomid, null, false, __cb);
    }

    public Ice.AsyncResult begin_meetShift(String meet1, String dstroomid, java.util.Map<String, String> __ctx, Callback_MC3_meetShift __cb)
    {
        return begin_meetShift(meet1, dstroomid, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_meetShift(String meet1, String dstroomid, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__meetShift_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __meetShift_name, __cb);
        try
        {
            __result.__prepare(__meetShift_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meet1);
            __os.writeString(dstroomid);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_meetShift(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __meetShift_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    muteAllMicrophone(String meetnumber)
    {
        return muteAllMicrophone(meetnumber, null, false);
    }

    public CmdResult
    muteAllMicrophone(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return muteAllMicrophone(meetnumber, __ctx, true);
    }

    private CmdResult
    muteAllMicrophone(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("muteAllMicrophone");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.muteAllMicrophone(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __muteAllMicrophone_name = "muteAllMicrophone";

    public Ice.AsyncResult begin_muteAllMicrophone(String meetnumber)
    {
        return begin_muteAllMicrophone(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_muteAllMicrophone(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_muteAllMicrophone(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_muteAllMicrophone(String meetnumber, Ice.Callback __cb)
    {
        return begin_muteAllMicrophone(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_muteAllMicrophone(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_muteAllMicrophone(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_muteAllMicrophone(String meetnumber, Callback_MC3_muteAllMicrophone __cb)
    {
        return begin_muteAllMicrophone(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_muteAllMicrophone(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_muteAllMicrophone __cb)
    {
        return begin_muteAllMicrophone(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_muteAllMicrophone(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__muteAllMicrophone_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __muteAllMicrophone_name, __cb);
        try
        {
            __result.__prepare(__muteAllMicrophone_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_muteAllMicrophone(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __muteAllMicrophone_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    muteAllSpeaker(String meetnumber)
    {
        return muteAllSpeaker(meetnumber, null, false);
    }

    public CmdResult
    muteAllSpeaker(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return muteAllSpeaker(meetnumber, __ctx, true);
    }

    private CmdResult
    muteAllSpeaker(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("muteAllSpeaker");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.muteAllSpeaker(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __muteAllSpeaker_name = "muteAllSpeaker";

    public Ice.AsyncResult begin_muteAllSpeaker(String meetnumber)
    {
        return begin_muteAllSpeaker(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_muteAllSpeaker(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_muteAllSpeaker(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_muteAllSpeaker(String meetnumber, Ice.Callback __cb)
    {
        return begin_muteAllSpeaker(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_muteAllSpeaker(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_muteAllSpeaker(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_muteAllSpeaker(String meetnumber, Callback_MC3_muteAllSpeaker __cb)
    {
        return begin_muteAllSpeaker(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_muteAllSpeaker(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_muteAllSpeaker __cb)
    {
        return begin_muteAllSpeaker(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_muteAllSpeaker(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__muteAllSpeaker_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __muteAllSpeaker_name, __cb);
        try
        {
            __result.__prepare(__muteAllSpeaker_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_muteAllSpeaker(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __muteAllSpeaker_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    muteMutiMicrophone(String meetnumber, TerminalInfo terminal, String mic)
    {
        return muteMutiMicrophone(meetnumber, terminal, mic, null, false);
    }

    public CmdResult
    muteMutiMicrophone(String meetnumber, TerminalInfo terminal, String mic, java.util.Map<String, String> __ctx)
    {
        return muteMutiMicrophone(meetnumber, terminal, mic, __ctx, true);
    }

    private CmdResult
    muteMutiMicrophone(String meetnumber, TerminalInfo terminal, String mic, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("muteMutiMicrophone");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.muteMutiMicrophone(meetnumber, terminal, mic, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __muteMutiMicrophone_name = "muteMutiMicrophone";

    public Ice.AsyncResult begin_muteMutiMicrophone(String meetnumber, TerminalInfo terminal, String mic)
    {
        return begin_muteMutiMicrophone(meetnumber, terminal, mic, null, false, null);
    }

    public Ice.AsyncResult begin_muteMutiMicrophone(String meetnumber, TerminalInfo terminal, String mic, java.util.Map<String, String> __ctx)
    {
        return begin_muteMutiMicrophone(meetnumber, terminal, mic, __ctx, true, null);
    }

    public Ice.AsyncResult begin_muteMutiMicrophone(String meetnumber, TerminalInfo terminal, String mic, Ice.Callback __cb)
    {
        return begin_muteMutiMicrophone(meetnumber, terminal, mic, null, false, __cb);
    }

    public Ice.AsyncResult begin_muteMutiMicrophone(String meetnumber, TerminalInfo terminal, String mic, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_muteMutiMicrophone(meetnumber, terminal, mic, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_muteMutiMicrophone(String meetnumber, TerminalInfo terminal, String mic, Callback_MC3_muteMutiMicrophone __cb)
    {
        return begin_muteMutiMicrophone(meetnumber, terminal, mic, null, false, __cb);
    }

    public Ice.AsyncResult begin_muteMutiMicrophone(String meetnumber, TerminalInfo terminal, String mic, java.util.Map<String, String> __ctx, Callback_MC3_muteMutiMicrophone __cb)
    {
        return begin_muteMutiMicrophone(meetnumber, terminal, mic, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_muteMutiMicrophone(String meetnumber, TerminalInfo terminal, String mic, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__muteMutiMicrophone_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __muteMutiMicrophone_name, __cb);
        try
        {
            __result.__prepare(__muteMutiMicrophone_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            terminal.__write(__os);
            __os.writeString(mic);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_muteMutiMicrophone(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __muteMutiMicrophone_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    muteMutiSpeaker(String meetnumber, TerminalInfo terminal, String speaker)
    {
        return muteMutiSpeaker(meetnumber, terminal, speaker, null, false);
    }

    public CmdResult
    muteMutiSpeaker(String meetnumber, TerminalInfo terminal, String speaker, java.util.Map<String, String> __ctx)
    {
        return muteMutiSpeaker(meetnumber, terminal, speaker, __ctx, true);
    }

    private CmdResult
    muteMutiSpeaker(String meetnumber, TerminalInfo terminal, String speaker, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("muteMutiSpeaker");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.muteMutiSpeaker(meetnumber, terminal, speaker, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __muteMutiSpeaker_name = "muteMutiSpeaker";

    public Ice.AsyncResult begin_muteMutiSpeaker(String meetnumber, TerminalInfo terminal, String speaker)
    {
        return begin_muteMutiSpeaker(meetnumber, terminal, speaker, null, false, null);
    }

    public Ice.AsyncResult begin_muteMutiSpeaker(String meetnumber, TerminalInfo terminal, String speaker, java.util.Map<String, String> __ctx)
    {
        return begin_muteMutiSpeaker(meetnumber, terminal, speaker, __ctx, true, null);
    }

    public Ice.AsyncResult begin_muteMutiSpeaker(String meetnumber, TerminalInfo terminal, String speaker, Ice.Callback __cb)
    {
        return begin_muteMutiSpeaker(meetnumber, terminal, speaker, null, false, __cb);
    }

    public Ice.AsyncResult begin_muteMutiSpeaker(String meetnumber, TerminalInfo terminal, String speaker, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_muteMutiSpeaker(meetnumber, terminal, speaker, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_muteMutiSpeaker(String meetnumber, TerminalInfo terminal, String speaker, Callback_MC3_muteMutiSpeaker __cb)
    {
        return begin_muteMutiSpeaker(meetnumber, terminal, speaker, null, false, __cb);
    }

    public Ice.AsyncResult begin_muteMutiSpeaker(String meetnumber, TerminalInfo terminal, String speaker, java.util.Map<String, String> __ctx, Callback_MC3_muteMutiSpeaker __cb)
    {
        return begin_muteMutiSpeaker(meetnumber, terminal, speaker, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_muteMutiSpeaker(String meetnumber, TerminalInfo terminal, String speaker, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__muteMutiSpeaker_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __muteMutiSpeaker_name, __cb);
        try
        {
            __result.__prepare(__muteMutiSpeaker_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            terminal.__write(__os);
            __os.writeString(speaker);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_muteMutiSpeaker(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __muteMutiSpeaker_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    openAllMicrophone(String meetnumber)
    {
        return openAllMicrophone(meetnumber, null, false);
    }

    public CmdResult
    openAllMicrophone(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return openAllMicrophone(meetnumber, __ctx, true);
    }

    private CmdResult
    openAllMicrophone(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("openAllMicrophone");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.openAllMicrophone(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __openAllMicrophone_name = "openAllMicrophone";

    public Ice.AsyncResult begin_openAllMicrophone(String meetnumber)
    {
        return begin_openAllMicrophone(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_openAllMicrophone(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_openAllMicrophone(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_openAllMicrophone(String meetnumber, Ice.Callback __cb)
    {
        return begin_openAllMicrophone(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_openAllMicrophone(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openAllMicrophone(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_openAllMicrophone(String meetnumber, Callback_MC3_openAllMicrophone __cb)
    {
        return begin_openAllMicrophone(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_openAllMicrophone(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_openAllMicrophone __cb)
    {
        return begin_openAllMicrophone(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openAllMicrophone(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openAllMicrophone_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openAllMicrophone_name, __cb);
        try
        {
            __result.__prepare(__openAllMicrophone_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_openAllMicrophone(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __openAllMicrophone_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    openAllSpeaker(String meetnumber)
    {
        return openAllSpeaker(meetnumber, null, false);
    }

    public CmdResult
    openAllSpeaker(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return openAllSpeaker(meetnumber, __ctx, true);
    }

    private CmdResult
    openAllSpeaker(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("openAllSpeaker");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.openAllSpeaker(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __openAllSpeaker_name = "openAllSpeaker";

    public Ice.AsyncResult begin_openAllSpeaker(String meetnumber)
    {
        return begin_openAllSpeaker(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_openAllSpeaker(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_openAllSpeaker(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_openAllSpeaker(String meetnumber, Ice.Callback __cb)
    {
        return begin_openAllSpeaker(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_openAllSpeaker(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_openAllSpeaker(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_openAllSpeaker(String meetnumber, Callback_MC3_openAllSpeaker __cb)
    {
        return begin_openAllSpeaker(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_openAllSpeaker(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_openAllSpeaker __cb)
    {
        return begin_openAllSpeaker(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_openAllSpeaker(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__openAllSpeaker_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __openAllSpeaker_name, __cb);
        try
        {
            __result.__prepare(__openAllSpeaker_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_openAllSpeaker(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __openAllSpeaker_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    powerPickUp(String num1, String targetnum)
    {
        return powerPickUp(num1, targetnum, null, false);
    }

    public CmdResult
    powerPickUp(String num1, String targetnum, java.util.Map<String, String> __ctx)
    {
        return powerPickUp(num1, targetnum, __ctx, true);
    }

    private CmdResult
    powerPickUp(String num1, String targetnum, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("powerPickUp");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.powerPickUp(num1, targetnum, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __powerPickUp_name = "powerPickUp";

    public Ice.AsyncResult begin_powerPickUp(String num1, String targetnum)
    {
        return begin_powerPickUp(num1, targetnum, null, false, null);
    }

    public Ice.AsyncResult begin_powerPickUp(String num1, String targetnum, java.util.Map<String, String> __ctx)
    {
        return begin_powerPickUp(num1, targetnum, __ctx, true, null);
    }

    public Ice.AsyncResult begin_powerPickUp(String num1, String targetnum, Ice.Callback __cb)
    {
        return begin_powerPickUp(num1, targetnum, null, false, __cb);
    }

    public Ice.AsyncResult begin_powerPickUp(String num1, String targetnum, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_powerPickUp(num1, targetnum, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_powerPickUp(String num1, String targetnum, Callback_MC3_powerPickUp __cb)
    {
        return begin_powerPickUp(num1, targetnum, null, false, __cb);
    }

    public Ice.AsyncResult begin_powerPickUp(String num1, String targetnum, java.util.Map<String, String> __ctx, Callback_MC3_powerPickUp __cb)
    {
        return begin_powerPickUp(num1, targetnum, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_powerPickUp(String num1, String targetnum, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__powerPickUp_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __powerPickUp_name, __cb);
        try
        {
            __result.__prepare(__powerPickUp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(num1);
            __os.writeString(targetnum);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_powerPickUp(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __powerPickUp_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    reconnectH323Call2Channels(TerminalInfo h323Terminal, String number)
    {
        return reconnectH323Call2Channels(h323Terminal, number, null, false);
    }

    public CmdResult
    reconnectH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx)
    {
        return reconnectH323Call2Channels(h323Terminal, number, __ctx, true);
    }

    private CmdResult
    reconnectH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("reconnectH323Call2Channels");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.reconnectH323Call2Channels(h323Terminal, number, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __reconnectH323Call2Channels_name = "reconnectH323Call2Channels";

    public Ice.AsyncResult begin_reconnectH323Call2Channels(TerminalInfo h323Terminal, String number)
    {
        return begin_reconnectH323Call2Channels(h323Terminal, number, null, false, null);
    }

    public Ice.AsyncResult begin_reconnectH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx)
    {
        return begin_reconnectH323Call2Channels(h323Terminal, number, __ctx, true, null);
    }

    public Ice.AsyncResult begin_reconnectH323Call2Channels(TerminalInfo h323Terminal, String number, Ice.Callback __cb)
    {
        return begin_reconnectH323Call2Channels(h323Terminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_reconnectH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_reconnectH323Call2Channels(h323Terminal, number, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_reconnectH323Call2Channels(TerminalInfo h323Terminal, String number, Callback_MC3_reconnectH323Call2Channels __cb)
    {
        return begin_reconnectH323Call2Channels(h323Terminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_reconnectH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, Callback_MC3_reconnectH323Call2Channels __cb)
    {
        return begin_reconnectH323Call2Channels(h323Terminal, number, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_reconnectH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__reconnectH323Call2Channels_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __reconnectH323Call2Channels_name, __cb);
        try
        {
            __result.__prepare(__reconnectH323Call2Channels_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            h323Terminal.__write(__os);
            __os.writeString(number);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_reconnectH323Call2Channels(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __reconnectH323Call2Channels_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    reconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number)
    {
        return reconnectRtspCall2Channels(rtspTerminal, number, null, false);
    }

    public CmdResult
    reconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx)
    {
        return reconnectRtspCall2Channels(rtspTerminal, number, __ctx, true);
    }

    private CmdResult
    reconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("reconnectRtspCall2Channels");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.reconnectRtspCall2Channels(rtspTerminal, number, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __reconnectRtspCall2Channels_name = "reconnectRtspCall2Channels";

    public Ice.AsyncResult begin_reconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number)
    {
        return begin_reconnectRtspCall2Channels(rtspTerminal, number, null, false, null);
    }

    public Ice.AsyncResult begin_reconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx)
    {
        return begin_reconnectRtspCall2Channels(rtspTerminal, number, __ctx, true, null);
    }

    public Ice.AsyncResult begin_reconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, Ice.Callback __cb)
    {
        return begin_reconnectRtspCall2Channels(rtspTerminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_reconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_reconnectRtspCall2Channels(rtspTerminal, number, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_reconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, Callback_MC3_reconnectRtspCall2Channels __cb)
    {
        return begin_reconnectRtspCall2Channels(rtspTerminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_reconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, Callback_MC3_reconnectRtspCall2Channels __cb)
    {
        return begin_reconnectRtspCall2Channels(rtspTerminal, number, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_reconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__reconnectRtspCall2Channels_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __reconnectRtspCall2Channels_name, __cb);
        try
        {
            __result.__prepare(__reconnectRtspCall2Channels_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            rtspTerminal.__write(__os);
            __os.writeString(number);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_reconnectRtspCall2Channels(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __reconnectRtspCall2Channels_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    restartServer()
    {
        return restartServer(null, false);
    }

    public CmdResult
    restartServer(java.util.Map<String, String> __ctx)
    {
        return restartServer(__ctx, true);
    }

    private CmdResult
    restartServer(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("restartServer");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.restartServer(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __restartServer_name = "restartServer";

    public Ice.AsyncResult begin_restartServer()
    {
        return begin_restartServer(null, false, null);
    }

    public Ice.AsyncResult begin_restartServer(java.util.Map<String, String> __ctx)
    {
        return begin_restartServer(__ctx, true, null);
    }

    public Ice.AsyncResult begin_restartServer(Ice.Callback __cb)
    {
        return begin_restartServer(null, false, __cb);
    }

    public Ice.AsyncResult begin_restartServer(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_restartServer(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_restartServer(Callback_MC3_restartServer __cb)
    {
        return begin_restartServer(null, false, __cb);
    }

    public Ice.AsyncResult begin_restartServer(java.util.Map<String, String> __ctx, Callback_MC3_restartServer __cb)
    {
        return begin_restartServer(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_restartServer(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__restartServer_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __restartServer_name, __cb);
        try
        {
            __result.__prepare(__restartServer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_restartServer(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __restartServer_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public int
    saveConferenceParam(String number, ConferenceParam cp)
    {
        return saveConferenceParam(number, cp, null, false);
    }

    public int
    saveConferenceParam(String number, ConferenceParam cp, java.util.Map<String, String> __ctx)
    {
        return saveConferenceParam(number, cp, __ctx, true);
    }

    private int
    saveConferenceParam(String number, ConferenceParam cp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("saveConferenceParam");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.saveConferenceParam(number, cp, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __saveConferenceParam_name = "saveConferenceParam";

    public Ice.AsyncResult begin_saveConferenceParam(String number, ConferenceParam cp)
    {
        return begin_saveConferenceParam(number, cp, null, false, null);
    }

    public Ice.AsyncResult begin_saveConferenceParam(String number, ConferenceParam cp, java.util.Map<String, String> __ctx)
    {
        return begin_saveConferenceParam(number, cp, __ctx, true, null);
    }

    public Ice.AsyncResult begin_saveConferenceParam(String number, ConferenceParam cp, Ice.Callback __cb)
    {
        return begin_saveConferenceParam(number, cp, null, false, __cb);
    }

    public Ice.AsyncResult begin_saveConferenceParam(String number, ConferenceParam cp, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveConferenceParam(number, cp, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_saveConferenceParam(String number, ConferenceParam cp, Callback_MC3_saveConferenceParam __cb)
    {
        return begin_saveConferenceParam(number, cp, null, false, __cb);
    }

    public Ice.AsyncResult begin_saveConferenceParam(String number, ConferenceParam cp, java.util.Map<String, String> __ctx, Callback_MC3_saveConferenceParam __cb)
    {
        return begin_saveConferenceParam(number, cp, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_saveConferenceParam(String number, ConferenceParam cp, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__saveConferenceParam_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __saveConferenceParam_name, __cb);
        try
        {
            __result.__prepare(__saveConferenceParam_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(number);
            cp.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_saveConferenceParam(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __saveConferenceParam_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    setAudioServ(String servip, String username, String pwd)
    {
        return setAudioServ(servip, username, pwd, null, false);
    }

    public CmdResult
    setAudioServ(String servip, String username, String pwd, java.util.Map<String, String> __ctx)
    {
        return setAudioServ(servip, username, pwd, __ctx, true);
    }

    private CmdResult
    setAudioServ(String servip, String username, String pwd, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setAudioServ");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.setAudioServ(servip, username, pwd, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setAudioServ_name = "setAudioServ";

    public Ice.AsyncResult begin_setAudioServ(String servip, String username, String pwd)
    {
        return begin_setAudioServ(servip, username, pwd, null, false, null);
    }

    public Ice.AsyncResult begin_setAudioServ(String servip, String username, String pwd, java.util.Map<String, String> __ctx)
    {
        return begin_setAudioServ(servip, username, pwd, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setAudioServ(String servip, String username, String pwd, Ice.Callback __cb)
    {
        return begin_setAudioServ(servip, username, pwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_setAudioServ(String servip, String username, String pwd, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setAudioServ(servip, username, pwd, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setAudioServ(String servip, String username, String pwd, Callback_MC3_setAudioServ __cb)
    {
        return begin_setAudioServ(servip, username, pwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_setAudioServ(String servip, String username, String pwd, java.util.Map<String, String> __ctx, Callback_MC3_setAudioServ __cb)
    {
        return begin_setAudioServ(servip, username, pwd, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setAudioServ(String servip, String username, String pwd, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setAudioServ_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setAudioServ_name, __cb);
        try
        {
            __result.__prepare(__setAudioServ_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(servip);
            __os.writeString(username);
            __os.writeString(pwd);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_setAudioServ(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setAudioServ_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public int
    setChair(String meetnumber, TerminalInfo ter, String chair)
    {
        return setChair(meetnumber, ter, chair, null, false);
    }

    public int
    setChair(String meetnumber, TerminalInfo ter, String chair, java.util.Map<String, String> __ctx)
    {
        return setChair(meetnumber, ter, chair, __ctx, true);
    }

    private int
    setChair(String meetnumber, TerminalInfo ter, String chair, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setChair");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.setChair(meetnumber, ter, chair, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setChair_name = "setChair";

    public Ice.AsyncResult begin_setChair(String meetnumber, TerminalInfo ter, String chair)
    {
        return begin_setChair(meetnumber, ter, chair, null, false, null);
    }

    public Ice.AsyncResult begin_setChair(String meetnumber, TerminalInfo ter, String chair, java.util.Map<String, String> __ctx)
    {
        return begin_setChair(meetnumber, ter, chair, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setChair(String meetnumber, TerminalInfo ter, String chair, Ice.Callback __cb)
    {
        return begin_setChair(meetnumber, ter, chair, null, false, __cb);
    }

    public Ice.AsyncResult begin_setChair(String meetnumber, TerminalInfo ter, String chair, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setChair(meetnumber, ter, chair, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setChair(String meetnumber, TerminalInfo ter, String chair, Callback_MC3_setChair __cb)
    {
        return begin_setChair(meetnumber, ter, chair, null, false, __cb);
    }

    public Ice.AsyncResult begin_setChair(String meetnumber, TerminalInfo ter, String chair, java.util.Map<String, String> __ctx, Callback_MC3_setChair __cb)
    {
        return begin_setChair(meetnumber, ter, chair, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setChair(String meetnumber, TerminalInfo ter, String chair, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setChair_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setChair_name, __cb);
        try
        {
            __result.__prepare(__setChair_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            ter.__write(__os);
            __os.writeString(chair);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_setChair(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setChair_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    setChairsee(String meetnumber, String mode, java.util.List<TerminalInfo> terminalList)
    {
        return setChairsee(meetnumber, mode, terminalList, null, false);
    }

    public CmdResult
    setChairsee(String meetnumber, String mode, java.util.List<TerminalInfo> terminalList, java.util.Map<String, String> __ctx)
    {
        return setChairsee(meetnumber, mode, terminalList, __ctx, true);
    }

    private CmdResult
    setChairsee(String meetnumber, String mode, java.util.List<TerminalInfo> terminalList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setChairsee");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.setChairsee(meetnumber, mode, terminalList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setChairsee_name = "setChairsee";

    public Ice.AsyncResult begin_setChairsee(String meetnumber, String mode, java.util.List<TerminalInfo> terminalList)
    {
        return begin_setChairsee(meetnumber, mode, terminalList, null, false, null);
    }

    public Ice.AsyncResult begin_setChairsee(String meetnumber, String mode, java.util.List<TerminalInfo> terminalList, java.util.Map<String, String> __ctx)
    {
        return begin_setChairsee(meetnumber, mode, terminalList, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setChairsee(String meetnumber, String mode, java.util.List<TerminalInfo> terminalList, Ice.Callback __cb)
    {
        return begin_setChairsee(meetnumber, mode, terminalList, null, false, __cb);
    }

    public Ice.AsyncResult begin_setChairsee(String meetnumber, String mode, java.util.List<TerminalInfo> terminalList, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setChairsee(meetnumber, mode, terminalList, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setChairsee(String meetnumber, String mode, java.util.List<TerminalInfo> terminalList, Callback_MC3_setChairsee __cb)
    {
        return begin_setChairsee(meetnumber, mode, terminalList, null, false, __cb);
    }

    public Ice.AsyncResult begin_setChairsee(String meetnumber, String mode, java.util.List<TerminalInfo> terminalList, java.util.Map<String, String> __ctx, Callback_MC3_setChairsee __cb)
    {
        return begin_setChairsee(meetnumber, mode, terminalList, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setChairsee(String meetnumber, String mode, java.util.List<TerminalInfo> terminalList, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setChairsee_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setChairsee_name, __cb);
        try
        {
            __result.__prepare(__setChairsee_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.writeString(mode);
            TerminalListSHelper.write(__os, terminalList);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_setChairsee(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setChairsee_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public int
    setFecc(String number, TerminalInfo ter, int actionType)
    {
        return setFecc(number, ter, actionType, null, false);
    }

    public int
    setFecc(String number, TerminalInfo ter, int actionType, java.util.Map<String, String> __ctx)
    {
        return setFecc(number, ter, actionType, __ctx, true);
    }

    private int
    setFecc(String number, TerminalInfo ter, int actionType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setFecc");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.setFecc(number, ter, actionType, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setFecc_name = "setFecc";

    public Ice.AsyncResult begin_setFecc(String number, TerminalInfo ter, int actionType)
    {
        return begin_setFecc(number, ter, actionType, null, false, null);
    }

    public Ice.AsyncResult begin_setFecc(String number, TerminalInfo ter, int actionType, java.util.Map<String, String> __ctx)
    {
        return begin_setFecc(number, ter, actionType, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setFecc(String number, TerminalInfo ter, int actionType, Ice.Callback __cb)
    {
        return begin_setFecc(number, ter, actionType, null, false, __cb);
    }

    public Ice.AsyncResult begin_setFecc(String number, TerminalInfo ter, int actionType, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setFecc(number, ter, actionType, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setFecc(String number, TerminalInfo ter, int actionType, Callback_MC3_setFecc __cb)
    {
        return begin_setFecc(number, ter, actionType, null, false, __cb);
    }

    public Ice.AsyncResult begin_setFecc(String number, TerminalInfo ter, int actionType, java.util.Map<String, String> __ctx, Callback_MC3_setFecc __cb)
    {
        return begin_setFecc(number, ter, actionType, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setFecc(String number, TerminalInfo ter, int actionType, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setFecc_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setFecc_name, __cb);
        try
        {
            __result.__prepare(__setFecc_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(number);
            ter.__write(__os);
            __os.writeInt(actionType);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_setFecc(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setFecc_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    setFixGWIP(String fixVirtualIp, String subNetmask)
    {
        return setFixGWIP(fixVirtualIp, subNetmask, null, false);
    }

    public CmdResult
    setFixGWIP(String fixVirtualIp, String subNetmask, java.util.Map<String, String> __ctx)
    {
        return setFixGWIP(fixVirtualIp, subNetmask, __ctx, true);
    }

    private CmdResult
    setFixGWIP(String fixVirtualIp, String subNetmask, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setFixGWIP");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.setFixGWIP(fixVirtualIp, subNetmask, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setFixGWIP_name = "setFixGWIP";

    public Ice.AsyncResult begin_setFixGWIP(String fixVirtualIp, String subNetmask)
    {
        return begin_setFixGWIP(fixVirtualIp, subNetmask, null, false, null);
    }

    public Ice.AsyncResult begin_setFixGWIP(String fixVirtualIp, String subNetmask, java.util.Map<String, String> __ctx)
    {
        return begin_setFixGWIP(fixVirtualIp, subNetmask, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setFixGWIP(String fixVirtualIp, String subNetmask, Ice.Callback __cb)
    {
        return begin_setFixGWIP(fixVirtualIp, subNetmask, null, false, __cb);
    }

    public Ice.AsyncResult begin_setFixGWIP(String fixVirtualIp, String subNetmask, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setFixGWIP(fixVirtualIp, subNetmask, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setFixGWIP(String fixVirtualIp, String subNetmask, Callback_MC3_setFixGWIP __cb)
    {
        return begin_setFixGWIP(fixVirtualIp, subNetmask, null, false, __cb);
    }

    public Ice.AsyncResult begin_setFixGWIP(String fixVirtualIp, String subNetmask, java.util.Map<String, String> __ctx, Callback_MC3_setFixGWIP __cb)
    {
        return begin_setFixGWIP(fixVirtualIp, subNetmask, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setFixGWIP(String fixVirtualIp, String subNetmask, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setFixGWIP_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setFixGWIP_name, __cb);
        try
        {
            __result.__prepare(__setFixGWIP_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(fixVirtualIp);
            __os.writeString(subNetmask);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_setFixGWIP(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setFixGWIP_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    setGWIP(String virtualFromIp, String virtualToIp, String subNetmask)
    {
        return setGWIP(virtualFromIp, virtualToIp, subNetmask, null, false);
    }

    public CmdResult
    setGWIP(String virtualFromIp, String virtualToIp, String subNetmask, java.util.Map<String, String> __ctx)
    {
        return setGWIP(virtualFromIp, virtualToIp, subNetmask, __ctx, true);
    }

    private CmdResult
    setGWIP(String virtualFromIp, String virtualToIp, String subNetmask, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setGWIP");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.setGWIP(virtualFromIp, virtualToIp, subNetmask, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setGWIP_name = "setGWIP";

    public Ice.AsyncResult begin_setGWIP(String virtualFromIp, String virtualToIp, String subNetmask)
    {
        return begin_setGWIP(virtualFromIp, virtualToIp, subNetmask, null, false, null);
    }

    public Ice.AsyncResult begin_setGWIP(String virtualFromIp, String virtualToIp, String subNetmask, java.util.Map<String, String> __ctx)
    {
        return begin_setGWIP(virtualFromIp, virtualToIp, subNetmask, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setGWIP(String virtualFromIp, String virtualToIp, String subNetmask, Ice.Callback __cb)
    {
        return begin_setGWIP(virtualFromIp, virtualToIp, subNetmask, null, false, __cb);
    }

    public Ice.AsyncResult begin_setGWIP(String virtualFromIp, String virtualToIp, String subNetmask, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setGWIP(virtualFromIp, virtualToIp, subNetmask, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setGWIP(String virtualFromIp, String virtualToIp, String subNetmask, Callback_MC3_setGWIP __cb)
    {
        return begin_setGWIP(virtualFromIp, virtualToIp, subNetmask, null, false, __cb);
    }

    public Ice.AsyncResult begin_setGWIP(String virtualFromIp, String virtualToIp, String subNetmask, java.util.Map<String, String> __ctx, Callback_MC3_setGWIP __cb)
    {
        return begin_setGWIP(virtualFromIp, virtualToIp, subNetmask, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setGWIP(String virtualFromIp, String virtualToIp, String subNetmask, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setGWIP_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setGWIP_name, __cb);
        try
        {
            __result.__prepare(__setGWIP_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(virtualFromIp);
            __os.writeString(virtualToIp);
            __os.writeString(subNetmask);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_setGWIP(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setGWIP_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public int
    setLecture(String meetnumber, TerminalInfo ter, String lecture)
    {
        return setLecture(meetnumber, ter, lecture, null, false);
    }

    public int
    setLecture(String meetnumber, TerminalInfo ter, String lecture, java.util.Map<String, String> __ctx)
    {
        return setLecture(meetnumber, ter, lecture, __ctx, true);
    }

    private int
    setLecture(String meetnumber, TerminalInfo ter, String lecture, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLecture");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.setLecture(meetnumber, ter, lecture, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setLecture_name = "setLecture";

    public Ice.AsyncResult begin_setLecture(String meetnumber, TerminalInfo ter, String lecture)
    {
        return begin_setLecture(meetnumber, ter, lecture, null, false, null);
    }

    public Ice.AsyncResult begin_setLecture(String meetnumber, TerminalInfo ter, String lecture, java.util.Map<String, String> __ctx)
    {
        return begin_setLecture(meetnumber, ter, lecture, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setLecture(String meetnumber, TerminalInfo ter, String lecture, Ice.Callback __cb)
    {
        return begin_setLecture(meetnumber, ter, lecture, null, false, __cb);
    }

    public Ice.AsyncResult begin_setLecture(String meetnumber, TerminalInfo ter, String lecture, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setLecture(meetnumber, ter, lecture, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setLecture(String meetnumber, TerminalInfo ter, String lecture, Callback_MC3_setLecture __cb)
    {
        return begin_setLecture(meetnumber, ter, lecture, null, false, __cb);
    }

    public Ice.AsyncResult begin_setLecture(String meetnumber, TerminalInfo ter, String lecture, java.util.Map<String, String> __ctx, Callback_MC3_setLecture __cb)
    {
        return begin_setLecture(meetnumber, ter, lecture, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setLecture(String meetnumber, TerminalInfo ter, String lecture, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setLecture_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setLecture_name, __cb);
        try
        {
            __result.__prepare(__setLecture_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            ter.__write(__os);
            __os.writeString(lecture);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_setLecture(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setLecture_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    setLogoPath2Channels(String logoPath)
    {
        return setLogoPath2Channels(logoPath, null, false);
    }

    public CmdResult
    setLogoPath2Channels(String logoPath, java.util.Map<String, String> __ctx)
    {
        return setLogoPath2Channels(logoPath, __ctx, true);
    }

    private CmdResult
    setLogoPath2Channels(String logoPath, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setLogoPath2Channels");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.setLogoPath2Channels(logoPath, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setLogoPath2Channels_name = "setLogoPath2Channels";

    public Ice.AsyncResult begin_setLogoPath2Channels(String logoPath)
    {
        return begin_setLogoPath2Channels(logoPath, null, false, null);
    }

    public Ice.AsyncResult begin_setLogoPath2Channels(String logoPath, java.util.Map<String, String> __ctx)
    {
        return begin_setLogoPath2Channels(logoPath, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setLogoPath2Channels(String logoPath, Ice.Callback __cb)
    {
        return begin_setLogoPath2Channels(logoPath, null, false, __cb);
    }

    public Ice.AsyncResult begin_setLogoPath2Channels(String logoPath, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setLogoPath2Channels(logoPath, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setLogoPath2Channels(String logoPath, Callback_MC3_setLogoPath2Channels __cb)
    {
        return begin_setLogoPath2Channels(logoPath, null, false, __cb);
    }

    public Ice.AsyncResult begin_setLogoPath2Channels(String logoPath, java.util.Map<String, String> __ctx, Callback_MC3_setLogoPath2Channels __cb)
    {
        return begin_setLogoPath2Channels(logoPath, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setLogoPath2Channels(String logoPath, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setLogoPath2Channels_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setLogoPath2Channels_name, __cb);
        try
        {
            __result.__prepare(__setLogoPath2Channels_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(logoPath);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_setLogoPath2Channels(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setLogoPath2Channels_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public int
    setQualityH323(String number, TerminalInfo ter, String bandwidth, String vsize)
    {
        return setQualityH323(number, ter, bandwidth, vsize, null, false);
    }

    public int
    setQualityH323(String number, TerminalInfo ter, String bandwidth, String vsize, java.util.Map<String, String> __ctx)
    {
        return setQualityH323(number, ter, bandwidth, vsize, __ctx, true);
    }

    private int
    setQualityH323(String number, TerminalInfo ter, String bandwidth, String vsize, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setQualityH323");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.setQualityH323(number, ter, bandwidth, vsize, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setQualityH323_name = "setQualityH323";

    public Ice.AsyncResult begin_setQualityH323(String number, TerminalInfo ter, String bandwidth, String vsize)
    {
        return begin_setQualityH323(number, ter, bandwidth, vsize, null, false, null);
    }

    public Ice.AsyncResult begin_setQualityH323(String number, TerminalInfo ter, String bandwidth, String vsize, java.util.Map<String, String> __ctx)
    {
        return begin_setQualityH323(number, ter, bandwidth, vsize, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setQualityH323(String number, TerminalInfo ter, String bandwidth, String vsize, Ice.Callback __cb)
    {
        return begin_setQualityH323(number, ter, bandwidth, vsize, null, false, __cb);
    }

    public Ice.AsyncResult begin_setQualityH323(String number, TerminalInfo ter, String bandwidth, String vsize, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setQualityH323(number, ter, bandwidth, vsize, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setQualityH323(String number, TerminalInfo ter, String bandwidth, String vsize, Callback_MC3_setQualityH323 __cb)
    {
        return begin_setQualityH323(number, ter, bandwidth, vsize, null, false, __cb);
    }

    public Ice.AsyncResult begin_setQualityH323(String number, TerminalInfo ter, String bandwidth, String vsize, java.util.Map<String, String> __ctx, Callback_MC3_setQualityH323 __cb)
    {
        return begin_setQualityH323(number, ter, bandwidth, vsize, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setQualityH323(String number, TerminalInfo ter, String bandwidth, String vsize, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setQualityH323_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setQualityH323_name, __cb);
        try
        {
            __result.__prepare(__setQualityH323_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(number);
            ter.__write(__os);
            __os.writeString(bandwidth);
            __os.writeString(vsize);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_setQualityH323(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setQualityH323_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public int
    setQualitySoft(String number, TerminalInfo ter, String type)
    {
        return setQualitySoft(number, ter, type, null, false);
    }

    public int
    setQualitySoft(String number, TerminalInfo ter, String type, java.util.Map<String, String> __ctx)
    {
        return setQualitySoft(number, ter, type, __ctx, true);
    }

    private int
    setQualitySoft(String number, TerminalInfo ter, String type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setQualitySoft");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.setQualitySoft(number, ter, type, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setQualitySoft_name = "setQualitySoft";

    public Ice.AsyncResult begin_setQualitySoft(String number, TerminalInfo ter, String type)
    {
        return begin_setQualitySoft(number, ter, type, null, false, null);
    }

    public Ice.AsyncResult begin_setQualitySoft(String number, TerminalInfo ter, String type, java.util.Map<String, String> __ctx)
    {
        return begin_setQualitySoft(number, ter, type, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setQualitySoft(String number, TerminalInfo ter, String type, Ice.Callback __cb)
    {
        return begin_setQualitySoft(number, ter, type, null, false, __cb);
    }

    public Ice.AsyncResult begin_setQualitySoft(String number, TerminalInfo ter, String type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setQualitySoft(number, ter, type, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setQualitySoft(String number, TerminalInfo ter, String type, Callback_MC3_setQualitySoft __cb)
    {
        return begin_setQualitySoft(number, ter, type, null, false, __cb);
    }

    public Ice.AsyncResult begin_setQualitySoft(String number, TerminalInfo ter, String type, java.util.Map<String, String> __ctx, Callback_MC3_setQualitySoft __cb)
    {
        return begin_setQualitySoft(number, ter, type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setQualitySoft(String number, TerminalInfo ter, String type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setQualitySoft_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setQualitySoft_name, __cb);
        try
        {
            __result.__prepare(__setQualitySoft_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(number);
            ter.__write(__os);
            __os.writeString(type);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_setQualitySoft(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setQualitySoft_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public int
    setQueue(String meetnumber, String index, TerminalInfo ter)
    {
        return setQueue(meetnumber, index, ter, null, false);
    }

    public int
    setQueue(String meetnumber, String index, TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return setQueue(meetnumber, index, ter, __ctx, true);
    }

    private int
    setQueue(String meetnumber, String index, TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setQueue");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.setQueue(meetnumber, index, ter, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setQueue_name = "setQueue";

    public Ice.AsyncResult begin_setQueue(String meetnumber, String index, TerminalInfo ter)
    {
        return begin_setQueue(meetnumber, index, ter, null, false, null);
    }

    public Ice.AsyncResult begin_setQueue(String meetnumber, String index, TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return begin_setQueue(meetnumber, index, ter, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setQueue(String meetnumber, String index, TerminalInfo ter, Ice.Callback __cb)
    {
        return begin_setQueue(meetnumber, index, ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_setQueue(String meetnumber, String index, TerminalInfo ter, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setQueue(meetnumber, index, ter, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setQueue(String meetnumber, String index, TerminalInfo ter, Callback_MC3_setQueue __cb)
    {
        return begin_setQueue(meetnumber, index, ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_setQueue(String meetnumber, String index, TerminalInfo ter, java.util.Map<String, String> __ctx, Callback_MC3_setQueue __cb)
    {
        return begin_setQueue(meetnumber, index, ter, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setQueue(String meetnumber, String index, TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setQueue_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setQueue_name, __cb);
        try
        {
            __result.__prepare(__setQueue_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.writeString(index);
            ter.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_setQueue(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setQueue_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    setScreen(java.util.List<TerminalInfo> terList, String number, String vscreen, String index, String mode)
    {
        return setScreen(terList, number, vscreen, index, mode, null, false);
    }

    public CmdResult
    setScreen(java.util.List<TerminalInfo> terList, String number, String vscreen, String index, String mode, java.util.Map<String, String> __ctx)
    {
        return setScreen(terList, number, vscreen, index, mode, __ctx, true);
    }

    private CmdResult
    setScreen(java.util.List<TerminalInfo> terList, String number, String vscreen, String index, String mode, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setScreen");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.setScreen(terList, number, vscreen, index, mode, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setScreen_name = "setScreen";

    public Ice.AsyncResult begin_setScreen(java.util.List<TerminalInfo> terList, String number, String vscreen, String index, String mode)
    {
        return begin_setScreen(terList, number, vscreen, index, mode, null, false, null);
    }

    public Ice.AsyncResult begin_setScreen(java.util.List<TerminalInfo> terList, String number, String vscreen, String index, String mode, java.util.Map<String, String> __ctx)
    {
        return begin_setScreen(terList, number, vscreen, index, mode, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setScreen(java.util.List<TerminalInfo> terList, String number, String vscreen, String index, String mode, Ice.Callback __cb)
    {
        return begin_setScreen(terList, number, vscreen, index, mode, null, false, __cb);
    }

    public Ice.AsyncResult begin_setScreen(java.util.List<TerminalInfo> terList, String number, String vscreen, String index, String mode, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setScreen(terList, number, vscreen, index, mode, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setScreen(java.util.List<TerminalInfo> terList, String number, String vscreen, String index, String mode, Callback_MC3_setScreen __cb)
    {
        return begin_setScreen(terList, number, vscreen, index, mode, null, false, __cb);
    }

    public Ice.AsyncResult begin_setScreen(java.util.List<TerminalInfo> terList, String number, String vscreen, String index, String mode, java.util.Map<String, String> __ctx, Callback_MC3_setScreen __cb)
    {
        return begin_setScreen(terList, number, vscreen, index, mode, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setScreen(java.util.List<TerminalInfo> terList, String number, String vscreen, String index, String mode, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setScreen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setScreen_name, __cb);
        try
        {
            __result.__prepare(__setScreen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            TerminalListSHelper.write(__os, terList);
            __os.writeString(number);
            __os.writeString(vscreen);
            __os.writeString(index);
            __os.writeString(mode);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_setScreen(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setScreen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    startChannels(Conference channelsInfo)
    {
        return startChannels(channelsInfo, null, false);
    }

    public CmdResult
    startChannels(Conference channelsInfo, java.util.Map<String, String> __ctx)
    {
        return startChannels(channelsInfo, __ctx, true);
    }

    private CmdResult
    startChannels(Conference channelsInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("startChannels");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.startChannels(channelsInfo, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __startChannels_name = "startChannels";

    public Ice.AsyncResult begin_startChannels(Conference channelsInfo)
    {
        return begin_startChannels(channelsInfo, null, false, null);
    }

    public Ice.AsyncResult begin_startChannels(Conference channelsInfo, java.util.Map<String, String> __ctx)
    {
        return begin_startChannels(channelsInfo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_startChannels(Conference channelsInfo, Ice.Callback __cb)
    {
        return begin_startChannels(channelsInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_startChannels(Conference channelsInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_startChannels(channelsInfo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_startChannels(Conference channelsInfo, Callback_MC3_startChannels __cb)
    {
        return begin_startChannels(channelsInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_startChannels(Conference channelsInfo, java.util.Map<String, String> __ctx, Callback_MC3_startChannels __cb)
    {
        return begin_startChannels(channelsInfo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_startChannels(Conference channelsInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__startChannels_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __startChannels_name, __cb);
        try
        {
            __result.__prepare(__startChannels_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            channelsInfo.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_startChannels(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __startChannels_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    startLiveMeet(String livetemplatename, java.util.List<TerminalInfo> vediotermList, java.util.List<TerminalInfo> audioTermList)
    {
        return startLiveMeet(livetemplatename, vediotermList, audioTermList, null, false);
    }

    public CmdResult
    startLiveMeet(String livetemplatename, java.util.List<TerminalInfo> vediotermList, java.util.List<TerminalInfo> audioTermList, java.util.Map<String, String> __ctx)
    {
        return startLiveMeet(livetemplatename, vediotermList, audioTermList, __ctx, true);
    }

    private CmdResult
    startLiveMeet(String livetemplatename, java.util.List<TerminalInfo> vediotermList, java.util.List<TerminalInfo> audioTermList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("startLiveMeet");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.startLiveMeet(livetemplatename, vediotermList, audioTermList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __startLiveMeet_name = "startLiveMeet";

    public Ice.AsyncResult begin_startLiveMeet(String livetemplatename, java.util.List<TerminalInfo> vediotermList, java.util.List<TerminalInfo> audioTermList)
    {
        return begin_startLiveMeet(livetemplatename, vediotermList, audioTermList, null, false, null);
    }

    public Ice.AsyncResult begin_startLiveMeet(String livetemplatename, java.util.List<TerminalInfo> vediotermList, java.util.List<TerminalInfo> audioTermList, java.util.Map<String, String> __ctx)
    {
        return begin_startLiveMeet(livetemplatename, vediotermList, audioTermList, __ctx, true, null);
    }

    public Ice.AsyncResult begin_startLiveMeet(String livetemplatename, java.util.List<TerminalInfo> vediotermList, java.util.List<TerminalInfo> audioTermList, Ice.Callback __cb)
    {
        return begin_startLiveMeet(livetemplatename, vediotermList, audioTermList, null, false, __cb);
    }

    public Ice.AsyncResult begin_startLiveMeet(String livetemplatename, java.util.List<TerminalInfo> vediotermList, java.util.List<TerminalInfo> audioTermList, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_startLiveMeet(livetemplatename, vediotermList, audioTermList, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_startLiveMeet(String livetemplatename, java.util.List<TerminalInfo> vediotermList, java.util.List<TerminalInfo> audioTermList, Callback_MC3_startLiveMeet __cb)
    {
        return begin_startLiveMeet(livetemplatename, vediotermList, audioTermList, null, false, __cb);
    }

    public Ice.AsyncResult begin_startLiveMeet(String livetemplatename, java.util.List<TerminalInfo> vediotermList, java.util.List<TerminalInfo> audioTermList, java.util.Map<String, String> __ctx, Callback_MC3_startLiveMeet __cb)
    {
        return begin_startLiveMeet(livetemplatename, vediotermList, audioTermList, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_startLiveMeet(String livetemplatename, java.util.List<TerminalInfo> vediotermList, java.util.List<TerminalInfo> audioTermList, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__startLiveMeet_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __startLiveMeet_name, __cb);
        try
        {
            __result.__prepare(__startLiveMeet_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(livetemplatename);
            TerminalListSHelper.write(__os, vediotermList);
            TerminalListSHelper.write(__os, audioTermList);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_startLiveMeet(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __startLiveMeet_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    startTemplateMeet(Conference conf, String template)
    {
        return startTemplateMeet(conf, template, null, false);
    }

    public CmdResult
    startTemplateMeet(Conference conf, String template, java.util.Map<String, String> __ctx)
    {
        return startTemplateMeet(conf, template, __ctx, true);
    }

    private CmdResult
    startTemplateMeet(Conference conf, String template, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("startTemplateMeet");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.startTemplateMeet(conf, template, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __startTemplateMeet_name = "startTemplateMeet";

    public Ice.AsyncResult begin_startTemplateMeet(Conference conf, String template)
    {
        return begin_startTemplateMeet(conf, template, null, false, null);
    }

    public Ice.AsyncResult begin_startTemplateMeet(Conference conf, String template, java.util.Map<String, String> __ctx)
    {
        return begin_startTemplateMeet(conf, template, __ctx, true, null);
    }

    public Ice.AsyncResult begin_startTemplateMeet(Conference conf, String template, Ice.Callback __cb)
    {
        return begin_startTemplateMeet(conf, template, null, false, __cb);
    }

    public Ice.AsyncResult begin_startTemplateMeet(Conference conf, String template, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_startTemplateMeet(conf, template, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_startTemplateMeet(Conference conf, String template, Callback_MC3_startTemplateMeet __cb)
    {
        return begin_startTemplateMeet(conf, template, null, false, __cb);
    }

    public Ice.AsyncResult begin_startTemplateMeet(Conference conf, String template, java.util.Map<String, String> __ctx, Callback_MC3_startTemplateMeet __cb)
    {
        return begin_startTemplateMeet(conf, template, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_startTemplateMeet(Conference conf, String template, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__startTemplateMeet_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __startTemplateMeet_name, __cb);
        try
        {
            __result.__prepare(__startTemplateMeet_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            conf.__write(__os);
            __os.writeString(template);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_startTemplateMeet(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __startTemplateMeet_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    stopChannels(String channelsNumber)
    {
        return stopChannels(channelsNumber, null, false);
    }

    public CmdResult
    stopChannels(String channelsNumber, java.util.Map<String, String> __ctx)
    {
        return stopChannels(channelsNumber, __ctx, true);
    }

    private CmdResult
    stopChannels(String channelsNumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("stopChannels");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.stopChannels(channelsNumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __stopChannels_name = "stopChannels";

    public Ice.AsyncResult begin_stopChannels(String channelsNumber)
    {
        return begin_stopChannels(channelsNumber, null, false, null);
    }

    public Ice.AsyncResult begin_stopChannels(String channelsNumber, java.util.Map<String, String> __ctx)
    {
        return begin_stopChannels(channelsNumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_stopChannels(String channelsNumber, Ice.Callback __cb)
    {
        return begin_stopChannels(channelsNumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopChannels(String channelsNumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopChannels(channelsNumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_stopChannels(String channelsNumber, Callback_MC3_stopChannels __cb)
    {
        return begin_stopChannels(channelsNumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopChannels(String channelsNumber, java.util.Map<String, String> __ctx, Callback_MC3_stopChannels __cb)
    {
        return begin_stopChannels(channelsNumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stopChannels(String channelsNumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stopChannels_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stopChannels_name, __cb);
        try
        {
            __result.__prepare(__stopChannels_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(channelsNumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_stopChannels(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __stopChannels_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public int
    stopFecc(String number, TerminalInfo ter)
    {
        return stopFecc(number, ter, null, false);
    }

    public int
    stopFecc(String number, TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return stopFecc(number, ter, __ctx, true);
    }

    private int
    stopFecc(String number, TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("stopFecc");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.stopFecc(number, ter, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __stopFecc_name = "stopFecc";

    public Ice.AsyncResult begin_stopFecc(String number, TerminalInfo ter)
    {
        return begin_stopFecc(number, ter, null, false, null);
    }

    public Ice.AsyncResult begin_stopFecc(String number, TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return begin_stopFecc(number, ter, __ctx, true, null);
    }

    public Ice.AsyncResult begin_stopFecc(String number, TerminalInfo ter, Ice.Callback __cb)
    {
        return begin_stopFecc(number, ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopFecc(String number, TerminalInfo ter, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopFecc(number, ter, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_stopFecc(String number, TerminalInfo ter, Callback_MC3_stopFecc __cb)
    {
        return begin_stopFecc(number, ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopFecc(String number, TerminalInfo ter, java.util.Map<String, String> __ctx, Callback_MC3_stopFecc __cb)
    {
        return begin_stopFecc(number, ter, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stopFecc(String number, TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stopFecc_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stopFecc_name, __cb);
        try
        {
            __result.__prepare(__stopFecc_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(number);
            ter.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_stopFecc(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __stopFecc_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    stopH323Call2Channels(TerminalInfo h323Terminal, String number)
    {
        return stopH323Call2Channels(h323Terminal, number, null, false);
    }

    public CmdResult
    stopH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx)
    {
        return stopH323Call2Channels(h323Terminal, number, __ctx, true);
    }

    private CmdResult
    stopH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("stopH323Call2Channels");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.stopH323Call2Channels(h323Terminal, number, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __stopH323Call2Channels_name = "stopH323Call2Channels";

    public Ice.AsyncResult begin_stopH323Call2Channels(TerminalInfo h323Terminal, String number)
    {
        return begin_stopH323Call2Channels(h323Terminal, number, null, false, null);
    }

    public Ice.AsyncResult begin_stopH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx)
    {
        return begin_stopH323Call2Channels(h323Terminal, number, __ctx, true, null);
    }

    public Ice.AsyncResult begin_stopH323Call2Channels(TerminalInfo h323Terminal, String number, Ice.Callback __cb)
    {
        return begin_stopH323Call2Channels(h323Terminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopH323Call2Channels(h323Terminal, number, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_stopH323Call2Channels(TerminalInfo h323Terminal, String number, Callback_MC3_stopH323Call2Channels __cb)
    {
        return begin_stopH323Call2Channels(h323Terminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, Callback_MC3_stopH323Call2Channels __cb)
    {
        return begin_stopH323Call2Channels(h323Terminal, number, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stopH323Call2Channels(TerminalInfo h323Terminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stopH323Call2Channels_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stopH323Call2Channels_name, __cb);
        try
        {
            __result.__prepare(__stopH323Call2Channels_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            h323Terminal.__write(__os);
            __os.writeString(number);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_stopH323Call2Channels(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __stopH323Call2Channels_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    stopMutiConference(String meetnumber)
    {
        return stopMutiConference(meetnumber, null, false);
    }

    public CmdResult
    stopMutiConference(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return stopMutiConference(meetnumber, __ctx, true);
    }

    private CmdResult
    stopMutiConference(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("stopMutiConference");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.stopMutiConference(meetnumber, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __stopMutiConference_name = "stopMutiConference";

    public Ice.AsyncResult begin_stopMutiConference(String meetnumber)
    {
        return begin_stopMutiConference(meetnumber, null, false, null);
    }

    public Ice.AsyncResult begin_stopMutiConference(String meetnumber, java.util.Map<String, String> __ctx)
    {
        return begin_stopMutiConference(meetnumber, __ctx, true, null);
    }

    public Ice.AsyncResult begin_stopMutiConference(String meetnumber, Ice.Callback __cb)
    {
        return begin_stopMutiConference(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopMutiConference(String meetnumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopMutiConference(meetnumber, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_stopMutiConference(String meetnumber, Callback_MC3_stopMutiConference __cb)
    {
        return begin_stopMutiConference(meetnumber, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopMutiConference(String meetnumber, java.util.Map<String, String> __ctx, Callback_MC3_stopMutiConference __cb)
    {
        return begin_stopMutiConference(meetnumber, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stopMutiConference(String meetnumber, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stopMutiConference_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stopMutiConference_name, __cb);
        try
        {
            __result.__prepare(__stopMutiConference_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(meetnumber);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_stopMutiConference(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __stopMutiConference_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    stopRtspCall2Channels(TerminalInfo rtspTerminal, String number)
    {
        return stopRtspCall2Channels(rtspTerminal, number, null, false);
    }

    public CmdResult
    stopRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx)
    {
        return stopRtspCall2Channels(rtspTerminal, number, __ctx, true);
    }

    private CmdResult
    stopRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("stopRtspCall2Channels");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.stopRtspCall2Channels(rtspTerminal, number, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __stopRtspCall2Channels_name = "stopRtspCall2Channels";

    public Ice.AsyncResult begin_stopRtspCall2Channels(TerminalInfo rtspTerminal, String number)
    {
        return begin_stopRtspCall2Channels(rtspTerminal, number, null, false, null);
    }

    public Ice.AsyncResult begin_stopRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx)
    {
        return begin_stopRtspCall2Channels(rtspTerminal, number, __ctx, true, null);
    }

    public Ice.AsyncResult begin_stopRtspCall2Channels(TerminalInfo rtspTerminal, String number, Ice.Callback __cb)
    {
        return begin_stopRtspCall2Channels(rtspTerminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopRtspCall2Channels(rtspTerminal, number, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_stopRtspCall2Channels(TerminalInfo rtspTerminal, String number, Callback_MC3_stopRtspCall2Channels __cb)
    {
        return begin_stopRtspCall2Channels(rtspTerminal, number, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, Callback_MC3_stopRtspCall2Channels __cb)
    {
        return begin_stopRtspCall2Channels(rtspTerminal, number, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stopRtspCall2Channels(TerminalInfo rtspTerminal, String number, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stopRtspCall2Channels_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stopRtspCall2Channels_name, __cb);
        try
        {
            __result.__prepare(__stopRtspCall2Channels_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            rtspTerminal.__write(__os);
            __os.writeString(number);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_stopRtspCall2Channels(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __stopRtspCall2Channels_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    updateLiveMeetTemplate(LiveMeetTemplate template)
    {
        return updateLiveMeetTemplate(template, null, false);
    }

    public CmdResult
    updateLiveMeetTemplate(LiveMeetTemplate template, java.util.Map<String, String> __ctx)
    {
        return updateLiveMeetTemplate(template, __ctx, true);
    }

    private CmdResult
    updateLiveMeetTemplate(LiveMeetTemplate template, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("updateLiveMeetTemplate");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.updateLiveMeetTemplate(template, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __updateLiveMeetTemplate_name = "updateLiveMeetTemplate";

    public Ice.AsyncResult begin_updateLiveMeetTemplate(LiveMeetTemplate template)
    {
        return begin_updateLiveMeetTemplate(template, null, false, null);
    }

    public Ice.AsyncResult begin_updateLiveMeetTemplate(LiveMeetTemplate template, java.util.Map<String, String> __ctx)
    {
        return begin_updateLiveMeetTemplate(template, __ctx, true, null);
    }

    public Ice.AsyncResult begin_updateLiveMeetTemplate(LiveMeetTemplate template, Ice.Callback __cb)
    {
        return begin_updateLiveMeetTemplate(template, null, false, __cb);
    }

    public Ice.AsyncResult begin_updateLiveMeetTemplate(LiveMeetTemplate template, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateLiveMeetTemplate(template, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_updateLiveMeetTemplate(LiveMeetTemplate template, Callback_MC3_updateLiveMeetTemplate __cb)
    {
        return begin_updateLiveMeetTemplate(template, null, false, __cb);
    }

    public Ice.AsyncResult begin_updateLiveMeetTemplate(LiveMeetTemplate template, java.util.Map<String, String> __ctx, Callback_MC3_updateLiveMeetTemplate __cb)
    {
        return begin_updateLiveMeetTemplate(template, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_updateLiveMeetTemplate(LiveMeetTemplate template, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateLiveMeetTemplate_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __updateLiveMeetTemplate_name, __cb);
        try
        {
            __result.__prepare(__updateLiveMeetTemplate_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            template.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_updateLiveMeetTemplate(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __updateLiveMeetTemplate_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    updateMutiTemplate(MutiTemplateInfo template)
    {
        return updateMutiTemplate(template, null, false);
    }

    public CmdResult
    updateMutiTemplate(MutiTemplateInfo template, java.util.Map<String, String> __ctx)
    {
        return updateMutiTemplate(template, __ctx, true);
    }

    private CmdResult
    updateMutiTemplate(MutiTemplateInfo template, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("updateMutiTemplate");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.updateMutiTemplate(template, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __updateMutiTemplate_name = "updateMutiTemplate";

    public Ice.AsyncResult begin_updateMutiTemplate(MutiTemplateInfo template)
    {
        return begin_updateMutiTemplate(template, null, false, null);
    }

    public Ice.AsyncResult begin_updateMutiTemplate(MutiTemplateInfo template, java.util.Map<String, String> __ctx)
    {
        return begin_updateMutiTemplate(template, __ctx, true, null);
    }

    public Ice.AsyncResult begin_updateMutiTemplate(MutiTemplateInfo template, Ice.Callback __cb)
    {
        return begin_updateMutiTemplate(template, null, false, __cb);
    }

    public Ice.AsyncResult begin_updateMutiTemplate(MutiTemplateInfo template, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateMutiTemplate(template, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_updateMutiTemplate(MutiTemplateInfo template, Callback_MC3_updateMutiTemplate __cb)
    {
        return begin_updateMutiTemplate(template, null, false, __cb);
    }

    public Ice.AsyncResult begin_updateMutiTemplate(MutiTemplateInfo template, java.util.Map<String, String> __ctx, Callback_MC3_updateMutiTemplate __cb)
    {
        return begin_updateMutiTemplate(template, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_updateMutiTemplate(MutiTemplateInfo template, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateMutiTemplate_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __updateMutiTemplate_name, __cb);
        try
        {
            __result.__prepare(__updateMutiTemplate_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            template.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_updateMutiTemplate(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __updateMutiTemplate_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public CmdResult
    updateTerminal(TerminalInfo ter)
    {
        return updateTerminal(ter, null, false);
    }

    public CmdResult
    updateTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return updateTerminal(ter, __ctx, true);
    }

    private CmdResult
    updateTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("updateTerminal");
                __delBase = __getDelegate(false);
                _MC3Del __del = (_MC3Del)__delBase;
                return __del.updateTerminal(ter, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __updateTerminal_name = "updateTerminal";

    public Ice.AsyncResult begin_updateTerminal(TerminalInfo ter)
    {
        return begin_updateTerminal(ter, null, false, null);
    }

    public Ice.AsyncResult begin_updateTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx)
    {
        return begin_updateTerminal(ter, __ctx, true, null);
    }

    public Ice.AsyncResult begin_updateTerminal(TerminalInfo ter, Ice.Callback __cb)
    {
        return begin_updateTerminal(ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_updateTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateTerminal(ter, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_updateTerminal(TerminalInfo ter, Callback_MC3_updateTerminal __cb)
    {
        return begin_updateTerminal(ter, null, false, __cb);
    }

    public Ice.AsyncResult begin_updateTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx, Callback_MC3_updateTerminal __cb)
    {
        return begin_updateTerminal(ter, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_updateTerminal(TerminalInfo ter, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateTerminal_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __updateTerminal_name, __cb);
        try
        {
            __result.__prepare(__updateTerminal_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            ter.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public CmdResult end_updateTerminal(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __updateTerminal_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        CmdResult __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new CmdResult();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public static MC3Prx
    checkedCast(Ice.ObjectPrx __obj)
    {
        MC3Prx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MC3Prx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    MC3PrxHelper __h = new MC3PrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MC3Prx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        MC3Prx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MC3Prx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    MC3PrxHelper __h = new MC3PrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MC3Prx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MC3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    MC3PrxHelper __h = new MC3PrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MC3Prx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        MC3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    MC3PrxHelper __h = new MC3PrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MC3Prx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        MC3Prx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MC3Prx)__obj;
            }
            catch(ClassCastException ex)
            {
                MC3PrxHelper __h = new MC3PrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static MC3Prx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MC3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            MC3PrxHelper __h = new MC3PrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::vmxICE::MC3"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _MC3DelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _MC3DelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, MC3Prx v)
    {
        __os.writeProxy(v);
    }

    public static MC3Prx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MC3PrxHelper result = new MC3PrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
