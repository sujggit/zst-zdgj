// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_MC3Disp.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.vmediax.oneplusn.ice.api.vmxICE;

public abstract class _MC3Disp extends Ice.ObjectImpl implements MC3
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::vmxICE::MC3"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[1];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    public final CmdResult
    addLiveMeetTemplate(LiveMeetTemplate template)
    {
        return addLiveMeetTemplate(template, null);
    }

    public final CmdResult
    addMutiTemplate(MutiTemplateInfo template)
    {
        return addMutiTemplate(template, null);
    }

    public final CmdResult
    addTerminal(TerminalInfo ter)
    {
        return addTerminal(ter, null);
    }

    public final CmdResult
    audioDismantle(String ternumber)
    {
        return audioDismantle(ternumber, null);
    }

    public final CmdResult
    audioHold(String terIp)
    {
        return audioHold(terIp, null);
    }

    public final CmdResult
    audioInsert(String ternumber1, String ternumberInsert)
    {
        return audioInsert(ternumber1, ternumberInsert, null);
    }

    public final CmdResult
    audioStartRecord(String ternumber)
    {
        return audioStartRecord(ternumber, null);
    }

    public final CmdResult
    audioStartSpy(String spyer, String ternumber)
    {
        return audioStartSpy(spyer, ternumber, null);
    }

    public final CmdResult
    audioStopRecord(String ternumber)
    {
        return audioStopRecord(ternumber, null);
    }

    public final CmdResult
    audioStopSpy(String spyer)
    {
        return audioStopSpy(spyer, null);
    }

    public final CmdResult
    audioTansfer(String ternumber, String targetnumber)
    {
        return audioTansfer(ternumber, targetnumber, null);
    }

    public final CmdResult
    audioUnHold(String terIp)
    {
        return audioUnHold(terIp, null);
    }

    public final CmdResult
    callH323Terminal2Channels(TerminalInfo h323Terminal, String number)
    {
        return callH323Terminal2Channels(h323Terminal, number, null);
    }

    public final CmdResult
    callRtspTerminal2Channels(TerminalInfo rtspTerminal, String number)
    {
        return callRtspTerminal2Channels(rtspTerminal, number, null);
    }

    public final CmdResult
    callback(String numa, String numb)
    {
        return callback(numa, numb, null);
    }

    public final CmdResult
    clearAllGWIP()
    {
        return clearAllGWIP(null);
    }

    public final CmdResult
    connectAll(String meetnumber)
    {
        return connectAll(meetnumber, null);
    }

    public final CmdResult
    connectMutiTerminal(String meetnumber, TerminalInfo ter)
    {
        return connectMutiTerminal(meetnumber, ter, null);
    }

    public final CmdResult
    consult(String conNum, String targetNum)
    {
        return consult(conNum, targetNum, null);
    }

    public final CmdResult
    deleteFixGWIP(String fixVirtualIp)
    {
        return deleteFixGWIP(fixVirtualIp, null);
    }

    public final CmdResult
    deleteGWIP(String virtualFromIp, String virtualToIp)
    {
        return deleteGWIP(virtualFromIp, virtualToIp, null);
    }

    public final CmdResult
    deleteLiveMeetTemplate(String templateName)
    {
        return deleteLiveMeetTemplate(templateName, null);
    }

    public final CmdResult
    deleteMutiTemplate(String templateName)
    {
        return deleteMutiTemplate(templateName, null);
    }

    public final CmdResult
    deleteTerminal(String name)
    {
        return deleteTerminal(name, null);
    }

    public final CmdResult
    disconnectAll(String meetnumber)
    {
        return disconnectAll(meetnumber, null);
    }

    public final CmdResult
    disconnectH323Call2Channels(TerminalInfo h323Terminal, String number)
    {
        return disconnectH323Call2Channels(h323Terminal, number, null);
    }

    public final CmdResult
    disconnectMutiTerminal(String meetnumber, TerminalInfo ter)
    {
        return disconnectMutiTerminal(meetnumber, ter, null);
    }

    public final CmdResult
    disconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number)
    {
        return disconnectRtspCall2Channels(rtspTerminal, number, null);
    }

    public final java.util.List<TerminalInfo>
    getAudioTerminal(String ternumber)
    {
        return getAudioTerminal(ternumber, null);
    }

    public final java.util.List<TerminalInfo>
    getAudioTerminalList()
    {
        return getAudioTerminalList(null);
    }

    public final java.util.List<ChairCycleInfo>
    getChaircycleList(String meetnumber)
    {
        return getChaircycleList(meetnumber, null);
    }

    public final java.util.List<ChairCycleInfo>
    getChairseeList(String meetnumber)
    {
        return getChairseeList(meetnumber, null);
    }

    public final CmdResult
    getChannelsInLicenseNumber()
    {
        return getChannelsInLicenseNumber(null);
    }

    public final java.util.List<Conference>
    getChannelsList()
    {
        return getChannelsList(null);
    }

    public final java.util.List<TerminalInfo>
    getConferenceIdleAudioTerminals(String meetnumber)
    {
        return getConferenceIdleAudioTerminals(meetnumber, null);
    }

    public final java.util.List<TerminalInfo>
    getConferenceIdleVedioTerminals(String meetnumber)
    {
        return getConferenceIdleVedioTerminals(meetnumber, null);
    }

    public final java.util.List<Conference>
    getConferenceInfo(String meetnumber)
    {
        return getConferenceInfo(meetnumber, null);
    }

    public final java.util.List<Conference>
    getConferenceInfoByTerminal(TerminalInfo ter)
    {
        return getConferenceInfoByTerminal(ter, null);
    }

    public final java.util.List<Conference>
    getConferenceList()
    {
        return getConferenceList(null);
    }

    public final java.util.List<ConferenceParam>
    getConferenceParam(String number)
    {
        return getConferenceParam(number, null);
    }

    public final java.util.List<TerminalInfo>
    getConferenceTerminals(String meetnumber)
    {
        return getConferenceTerminals(meetnumber, null);
    }

    public final LiveMeetTemplate
    getLiveMeetTemplate(String templateName)
    {
        return getLiveMeetTemplate(templateName, null);
    }

    public final java.util.List<LiveMeetTemplate>
    getLiveMeetTemplateList()
    {
        return getLiveMeetTemplateList(null);
    }

    public final java.util.List<PacketInfo>
    getMemberPacketStatus(String meetnumber)
    {
        return getMemberPacketStatus(meetnumber, null);
    }

    public final java.util.List<ScreenInfo>
    getScreenInfo(String meetnumber, String vscreen)
    {
        return getScreenInfo(meetnumber, vscreen, null);
    }

    /**
     * add by penglong 20130114 gw start
     **/
    public final CmdResult
    getServiceMode()
    {
        return getServiceMode(null);
    }

    public final java.util.List<TerminalInfo>
    getTemplateAudioIdleTerminList(String templatename)
    {
        return getTemplateAudioIdleTerminList(templatename, null);
    }

    public final java.util.List<TerminalInfo>
    getTemplateAudioTerminList(String templatename)
    {
        return getTemplateAudioTerminList(templatename, null);
    }

    public final java.util.List<TerminalInfo>
    getTemplateH323IdleTerminList(String templatename)
    {
        return getTemplateH323IdleTerminList(templatename, null);
    }

    public final java.util.List<TerminalInfo>
    getTemplateH323TerminList(String templatename)
    {
        return getTemplateH323TerminList(templatename, null);
    }

    public final java.util.List<TemplateInfo>
    getTemplateList()
    {
        return getTemplateList(null);
    }

    public final java.util.List<TemplateParamInfo>
    getTemplateParam(String templatename)
    {
        return getTemplateParam(templatename, null);
    }

    public final java.util.List<TerminalTypeInfo>
    getTemplateTerminalTypeList(String name)
    {
        return getTemplateTerminalTypeList(name, null);
    }

    public final java.util.List<TerminalInfo>
    getVedioTerminalList()
    {
        return getVedioTerminalList(null);
    }

    public final String
    getVscreen(String meetnumber)
    {
        return getVscreen(meetnumber, null);
    }

    public final CmdResult
    inviteAudioTerminal(java.util.List<TerminalInfo> terminalList, String meetnumber)
    {
        return inviteAudioTerminal(terminalList, meetnumber, null);
    }

    public final CmdResult
    inviteVedioTerminal(java.util.List<TerminalInfo> terminalList, String qualityType, Conference conf, MutiTemplateInfo template)
    {
        return inviteVedioTerminal(terminalList, qualityType, conf, template, null);
    }

    public final CmdResult
    kickMutiTerminal(String meetnumber, TerminalInfo ter)
    {
        return kickMutiTerminal(meetnumber, ter, null);
    }

    public final CmdResult
    meetShift(String meet1, String dstroomid)
    {
        return meetShift(meet1, dstroomid, null);
    }

    public final CmdResult
    muteAllMicrophone(String meetnumber)
    {
        return muteAllMicrophone(meetnumber, null);
    }

    public final CmdResult
    muteAllSpeaker(String meetnumber)
    {
        return muteAllSpeaker(meetnumber, null);
    }

    public final CmdResult
    muteMutiMicrophone(String meetnumber, TerminalInfo terminal, String mic)
    {
        return muteMutiMicrophone(meetnumber, terminal, mic, null);
    }

    public final CmdResult
    muteMutiSpeaker(String meetnumber, TerminalInfo terminal, String speaker)
    {
        return muteMutiSpeaker(meetnumber, terminal, speaker, null);
    }

    public final CmdResult
    openAllMicrophone(String meetnumber)
    {
        return openAllMicrophone(meetnumber, null);
    }

    public final CmdResult
    openAllSpeaker(String meetnumber)
    {
        return openAllSpeaker(meetnumber, null);
    }

    public final CmdResult
    powerPickUp(String num1, String targetnum)
    {
        return powerPickUp(num1, targetnum, null);
    }

    public final CmdResult
    reconnectH323Call2Channels(TerminalInfo h323Terminal, String number)
    {
        return reconnectH323Call2Channels(h323Terminal, number, null);
    }

    public final CmdResult
    reconnectRtspCall2Channels(TerminalInfo rtspTerminal, String number)
    {
        return reconnectRtspCall2Channels(rtspTerminal, number, null);
    }

    public final CmdResult
    restartServer()
    {
        return restartServer(null);
    }

    public final int
    saveConferenceParam(String number, ConferenceParam cp)
    {
        return saveConferenceParam(number, cp, null);
    }

    public final CmdResult
    setAudioServ(String servip, String username, String pwd)
    {
        return setAudioServ(servip, username, pwd, null);
    }

    public final int
    setChair(String meetnumber, TerminalInfo ter, String chair)
    {
        return setChair(meetnumber, ter, chair, null);
    }

    public final CmdResult
    setChairsee(String meetnumber, String mode, java.util.List<TerminalInfo> terminalList)
    {
        return setChairsee(meetnumber, mode, terminalList, null);
    }

    public final int
    setFecc(String number, TerminalInfo ter, int actionType)
    {
        return setFecc(number, ter, actionType, null);
    }

    public final CmdResult
    setFixGWIP(String fixVirtualIp, String subNetmask)
    {
        return setFixGWIP(fixVirtualIp, subNetmask, null);
    }

    public final CmdResult
    setGWIP(String virtualFromIp, String virtualToIp, String subNetmask)
    {
        return setGWIP(virtualFromIp, virtualToIp, subNetmask, null);
    }

    public final int
    setLecture(String meetnumber, TerminalInfo ter, String lecture)
    {
        return setLecture(meetnumber, ter, lecture, null);
    }

    public final CmdResult
    setLogoPath2Channels(String logoPath)
    {
        return setLogoPath2Channels(logoPath, null);
    }

    public final int
    setQualityH323(String number, TerminalInfo ter, String bandwidth, String vsize)
    {
        return setQualityH323(number, ter, bandwidth, vsize, null);
    }

    public final int
    setQualitySoft(String number, TerminalInfo ter, String type)
    {
        return setQualitySoft(number, ter, type, null);
    }

    public final int
    setQueue(String meetnumber, String index, TerminalInfo ter)
    {
        return setQueue(meetnumber, index, ter, null);
    }

    public final CmdResult
    setScreen(java.util.List<TerminalInfo> terList, String number, String vscreen, String index, String mode)
    {
        return setScreen(terList, number, vscreen, index, mode, null);
    }

    public final CmdResult
    startChannels(Conference channelsInfo)
    {
        return startChannels(channelsInfo, null);
    }

    public final CmdResult
    startLiveMeet(String livetemplatename, java.util.List<TerminalInfo> vediotermList, java.util.List<TerminalInfo> audioTermList)
    {
        return startLiveMeet(livetemplatename, vediotermList, audioTermList, null);
    }

    public final CmdResult
    startTemplateMeet(Conference conf, String template)
    {
        return startTemplateMeet(conf, template, null);
    }

    public final CmdResult
    stopChannels(String channelsNumber)
    {
        return stopChannels(channelsNumber, null);
    }

    public final int
    stopFecc(String number, TerminalInfo ter)
    {
        return stopFecc(number, ter, null);
    }

    public final CmdResult
    stopH323Call2Channels(TerminalInfo h323Terminal, String number)
    {
        return stopH323Call2Channels(h323Terminal, number, null);
    }

    public final CmdResult
    stopMutiConference(String meetnumber)
    {
        return stopMutiConference(meetnumber, null);
    }

    public final CmdResult
    stopRtspCall2Channels(TerminalInfo rtspTerminal, String number)
    {
        return stopRtspCall2Channels(rtspTerminal, number, null);
    }

    public final CmdResult
    updateLiveMeetTemplate(LiveMeetTemplate template)
    {
        return updateLiveMeetTemplate(template, null);
    }

    public final CmdResult
    updateMutiTemplate(MutiTemplateInfo template)
    {
        return updateMutiTemplate(template, null);
    }

    public final CmdResult
    updateTerminal(TerminalInfo ter)
    {
        return updateTerminal(ter, null);
    }

    public static Ice.DispatchStatus
    ___addTerminal(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        TerminalInfo ter;
        ter = new TerminalInfo();
        ter.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.addTerminal(ter, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___updateTerminal(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        TerminalInfo ter;
        ter = new TerminalInfo();
        ter.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.updateTerminal(ter, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___deleteTerminal(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String name;
        name = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.deleteTerminal(name, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getVedioTerminalList(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<TerminalInfo> __ret = __obj.getVedioTerminalList(__current);
        TerminalListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getAudioTerminalList(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<TerminalInfo> __ret = __obj.getAudioTerminalList(__current);
        TerminalListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getTemplateTerminalTypeList(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String name;
        name = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<TerminalTypeInfo> __ret = __obj.getTemplateTerminalTypeList(name, __current);
        TerminalTypeListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getTemplateH323TerminList(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String templatename;
        templatename = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<TerminalInfo> __ret = __obj.getTemplateH323TerminList(templatename, __current);
        TerminalListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getTemplateH323IdleTerminList(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String templatename;
        templatename = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<TerminalInfo> __ret = __obj.getTemplateH323IdleTerminList(templatename, __current);
        TerminalListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getTemplateAudioTerminList(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String templatename;
        templatename = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<TerminalInfo> __ret = __obj.getTemplateAudioTerminList(templatename, __current);
        TerminalListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getTemplateAudioIdleTerminList(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String templatename;
        templatename = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<TerminalInfo> __ret = __obj.getTemplateAudioIdleTerminList(templatename, __current);
        TerminalListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getTemplateList(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<TemplateInfo> __ret = __obj.getTemplateList(__current);
        TemplateSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___addMutiTemplate(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        MutiTemplateInfo template;
        template = new MutiTemplateInfo();
        template.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.addMutiTemplate(template, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___updateMutiTemplate(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        MutiTemplateInfo template;
        template = new MutiTemplateInfo();
        template.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.updateMutiTemplate(template, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___deleteMutiTemplate(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String templateName;
        templateName = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.deleteMutiTemplate(templateName, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getLiveMeetTemplateList(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<LiveMeetTemplate> __ret = __obj.getLiveMeetTemplateList(__current);
        LiveMeetTemplateListHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___addLiveMeetTemplate(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        LiveMeetTemplate template;
        template = new LiveMeetTemplate();
        template.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.addLiveMeetTemplate(template, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___updateLiveMeetTemplate(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        LiveMeetTemplate template;
        template = new LiveMeetTemplate();
        template.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.updateLiveMeetTemplate(template, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___deleteLiveMeetTemplate(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String templateName;
        templateName = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.deleteLiveMeetTemplate(templateName, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getLiveMeetTemplate(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String templateName;
        templateName = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        LiveMeetTemplate __ret = __obj.getLiveMeetTemplate(templateName, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getTemplateParam(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String templatename;
        templatename = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<TemplateParamInfo> __ret = __obj.getTemplateParam(templatename, __current);
        TemplateParamListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getConferenceTerminals(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<TerminalInfo> __ret = __obj.getConferenceTerminals(meetnumber, __current);
        TerminalListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getConferenceList(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<Conference> __ret = __obj.getConferenceList(__current);
        ConferenceListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getConferenceInfo(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<Conference> __ret = __obj.getConferenceInfo(meetnumber, __current);
        ConferenceListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getConferenceParam(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String number;
        number = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<ConferenceParam> __ret = __obj.getConferenceParam(number, __current);
        ConferenceParamListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___saveConferenceParam(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String number;
        number = __is.readString();
        ConferenceParam cp;
        cp = new ConferenceParam();
        cp.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.saveConferenceParam(number, cp, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getConferenceIdleVedioTerminals(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<TerminalInfo> __ret = __obj.getConferenceIdleVedioTerminals(meetnumber, __current);
        TerminalListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getConferenceIdleAudioTerminals(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<TerminalInfo> __ret = __obj.getConferenceIdleAudioTerminals(meetnumber, __current);
        TerminalListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getConferenceInfoByTerminal(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        TerminalInfo ter;
        ter = new TerminalInfo();
        ter.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<Conference> __ret = __obj.getConferenceInfoByTerminal(ter, __current);
        ConferenceListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getAudioTerminal(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String ternumber;
        ternumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<TerminalInfo> __ret = __obj.getAudioTerminal(ternumber, __current);
        TerminalListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___startLiveMeet(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String livetemplatename;
        livetemplatename = __is.readString();
        java.util.List<TerminalInfo> vediotermList;
        vediotermList = TerminalListSHelper.read(__is);
        java.util.List<TerminalInfo> audioTermList;
        audioTermList = TerminalListSHelper.read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.startLiveMeet(livetemplatename, vediotermList, audioTermList, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___startTemplateMeet(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        Conference conf;
        conf = new Conference();
        conf.__read(__is);
        String template;
        template = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.startTemplateMeet(conf, template, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___stopMutiConference(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.stopMutiConference(meetnumber, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___inviteVedioTerminal(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        java.util.List<TerminalInfo> terminalList;
        terminalList = TerminalListSHelper.read(__is);
        String qualityType;
        qualityType = __is.readString();
        Conference conf;
        conf = new Conference();
        conf.__read(__is);
        MutiTemplateInfo template;
        template = new MutiTemplateInfo();
        template.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.inviteVedioTerminal(terminalList, qualityType, conf, template, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___inviteAudioTerminal(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        java.util.List<TerminalInfo> terminalList;
        terminalList = TerminalListSHelper.read(__is);
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.inviteAudioTerminal(terminalList, meetnumber, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___kickMutiTerminal(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        TerminalInfo ter;
        ter = new TerminalInfo();
        ter.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.kickMutiTerminal(meetnumber, ter, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___disconnectMutiTerminal(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        TerminalInfo ter;
        ter = new TerminalInfo();
        ter.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.disconnectMutiTerminal(meetnumber, ter, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___connectMutiTerminal(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        TerminalInfo ter;
        ter = new TerminalInfo();
        ter.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.connectMutiTerminal(meetnumber, ter, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___disconnectAll(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.disconnectAll(meetnumber, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___connectAll(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.connectAll(meetnumber, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___muteMutiSpeaker(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        TerminalInfo terminal;
        terminal = new TerminalInfo();
        terminal.__read(__is);
        String speaker;
        speaker = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.muteMutiSpeaker(meetnumber, terminal, speaker, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___muteMutiMicrophone(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        TerminalInfo terminal;
        terminal = new TerminalInfo();
        terminal.__read(__is);
        String mic;
        mic = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.muteMutiMicrophone(meetnumber, terminal, mic, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___muteAllMicrophone(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.muteAllMicrophone(meetnumber, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___openAllMicrophone(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.openAllMicrophone(meetnumber, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___muteAllSpeaker(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.muteAllSpeaker(meetnumber, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___openAllSpeaker(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.openAllSpeaker(meetnumber, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getVscreen(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        String __ret = __obj.getVscreen(meetnumber, __current);
        __os.writeString(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getScreenInfo(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        String vscreen;
        vscreen = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<ScreenInfo> __ret = __obj.getScreenInfo(meetnumber, vscreen, __current);
        ScreenListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setScreen(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        java.util.List<TerminalInfo> terList;
        terList = TerminalListSHelper.read(__is);
        String number;
        number = __is.readString();
        String vscreen;
        vscreen = __is.readString();
        String index;
        index = __is.readString();
        String mode;
        mode = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.setScreen(terList, number, vscreen, index, mode, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setQueue(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        String index;
        index = __is.readString();
        TerminalInfo ter;
        ter = new TerminalInfo();
        ter.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setQueue(meetnumber, index, ter, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setLecture(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        TerminalInfo ter;
        ter = new TerminalInfo();
        ter.__read(__is);
        String lecture;
        lecture = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setLecture(meetnumber, ter, lecture, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setChair(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        TerminalInfo ter;
        ter = new TerminalInfo();
        ter.__read(__is);
        String chair;
        chair = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setChair(meetnumber, ter, chair, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setChairsee(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        String mode;
        mode = __is.readString();
        java.util.List<TerminalInfo> terminalList;
        terminalList = TerminalListSHelper.read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.setChairsee(meetnumber, mode, terminalList, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getChaircycleList(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<ChairCycleInfo> __ret = __obj.getChaircycleList(meetnumber, __current);
        ChairCycleInfoListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getChairseeList(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<ChairCycleInfo> __ret = __obj.getChairseeList(meetnumber, __current);
        ChairCycleInfoListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setFecc(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String number;
        number = __is.readString();
        TerminalInfo ter;
        ter = new TerminalInfo();
        ter.__read(__is);
        int actionType;
        actionType = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setFecc(number, ter, actionType, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___stopFecc(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String number;
        number = __is.readString();
        TerminalInfo ter;
        ter = new TerminalInfo();
        ter.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.stopFecc(number, ter, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setQualityH323(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String number;
        number = __is.readString();
        TerminalInfo ter;
        ter = new TerminalInfo();
        ter.__read(__is);
        String bandwidth;
        bandwidth = __is.readString();
        String vsize;
        vsize = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setQualityH323(number, ter, bandwidth, vsize, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setQualitySoft(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String number;
        number = __is.readString();
        TerminalInfo ter;
        ter = new TerminalInfo();
        ter.__read(__is);
        String type;
        type = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setQualitySoft(number, ter, type, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___audioInsert(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String ternumber1;
        ternumber1 = __is.readString();
        String ternumberInsert;
        ternumberInsert = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.audioInsert(ternumber1, ternumberInsert, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___audioDismantle(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String ternumber;
        ternumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.audioDismantle(ternumber, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___audioHold(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String terIp;
        terIp = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.audioHold(terIp, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___audioUnHold(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String terIp;
        terIp = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.audioUnHold(terIp, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___audioTansfer(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String ternumber;
        ternumber = __is.readString();
        String targetnumber;
        targetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.audioTansfer(ternumber, targetnumber, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___audioStartSpy(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String spyer;
        spyer = __is.readString();
        String ternumber;
        ternumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.audioStartSpy(spyer, ternumber, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___audioStopSpy(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String spyer;
        spyer = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.audioStopSpy(spyer, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___audioStartRecord(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String ternumber;
        ternumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.audioStartRecord(ternumber, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___audioStopRecord(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String ternumber;
        ternumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.audioStopRecord(ternumber, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___powerPickUp(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String num1;
        num1 = __is.readString();
        String targetnum;
        targetnum = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.powerPickUp(num1, targetnum, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___callback(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String numa;
        numa = __is.readString();
        String numb;
        numb = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.callback(numa, numb, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___consult(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String conNum;
        conNum = __is.readString();
        String targetNum;
        targetNum = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.consult(conNum, targetNum, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___meetShift(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meet1;
        meet1 = __is.readString();
        String dstroomid;
        dstroomid = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.meetShift(meet1, dstroomid, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setAudioServ(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String servip;
        servip = __is.readString();
        String username;
        username = __is.readString();
        String pwd;
        pwd = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.setAudioServ(servip, username, pwd, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getMemberPacketStatus(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String meetnumber;
        meetnumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<PacketInfo> __ret = __obj.getMemberPacketStatus(meetnumber, __current);
        PacketInfoListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getServiceMode(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.getServiceMode(__current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getChannelsInLicenseNumber(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.getChannelsInLicenseNumber(__current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setGWIP(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String virtualFromIp;
        virtualFromIp = __is.readString();
        String virtualToIp;
        virtualToIp = __is.readString();
        String subNetmask;
        subNetmask = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.setGWIP(virtualFromIp, virtualToIp, subNetmask, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setFixGWIP(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String fixVirtualIp;
        fixVirtualIp = __is.readString();
        String subNetmask;
        subNetmask = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.setFixGWIP(fixVirtualIp, subNetmask, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___deleteGWIP(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String virtualFromIp;
        virtualFromIp = __is.readString();
        String virtualToIp;
        virtualToIp = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.deleteGWIP(virtualFromIp, virtualToIp, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___deleteFixGWIP(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String fixVirtualIp;
        fixVirtualIp = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.deleteFixGWIP(fixVirtualIp, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___clearAllGWIP(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.clearAllGWIP(__current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___restartServer(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.restartServer(__current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___startChannels(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        Conference channelsInfo;
        channelsInfo = new Conference();
        channelsInfo.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.startChannels(channelsInfo, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___stopChannels(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String channelsNumber;
        channelsNumber = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.stopChannels(channelsNumber, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getChannelsList(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<Conference> __ret = __obj.getChannelsList(__current);
        ConferenceListSHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___callH323Terminal2Channels(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        TerminalInfo h323Terminal;
        h323Terminal = new TerminalInfo();
        h323Terminal.__read(__is);
        String number;
        number = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.callH323Terminal2Channels(h323Terminal, number, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___disconnectH323Call2Channels(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        TerminalInfo h323Terminal;
        h323Terminal = new TerminalInfo();
        h323Terminal.__read(__is);
        String number;
        number = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.disconnectH323Call2Channels(h323Terminal, number, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___reconnectH323Call2Channels(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        TerminalInfo h323Terminal;
        h323Terminal = new TerminalInfo();
        h323Terminal.__read(__is);
        String number;
        number = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.reconnectH323Call2Channels(h323Terminal, number, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___stopH323Call2Channels(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        TerminalInfo h323Terminal;
        h323Terminal = new TerminalInfo();
        h323Terminal.__read(__is);
        String number;
        number = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.stopH323Call2Channels(h323Terminal, number, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___callRtspTerminal2Channels(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        TerminalInfo rtspTerminal;
        rtspTerminal = new TerminalInfo();
        rtspTerminal.__read(__is);
        String number;
        number = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.callRtspTerminal2Channels(rtspTerminal, number, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___stopRtspCall2Channels(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        TerminalInfo rtspTerminal;
        rtspTerminal = new TerminalInfo();
        rtspTerminal.__read(__is);
        String number;
        number = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.stopRtspCall2Channels(rtspTerminal, number, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___disconnectRtspCall2Channels(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        TerminalInfo rtspTerminal;
        rtspTerminal = new TerminalInfo();
        rtspTerminal.__read(__is);
        String number;
        number = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.disconnectRtspCall2Channels(rtspTerminal, number, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___reconnectRtspCall2Channels(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        TerminalInfo rtspTerminal;
        rtspTerminal = new TerminalInfo();
        rtspTerminal.__read(__is);
        String number;
        number = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.reconnectRtspCall2Channels(rtspTerminal, number, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setLogoPath2Channels(MC3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String logoPath;
        logoPath = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        CmdResult __ret = __obj.setLogoPath2Channels(logoPath, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "addLiveMeetTemplate",
        "addMutiTemplate",
        "addTerminal",
        "audioDismantle",
        "audioHold",
        "audioInsert",
        "audioStartRecord",
        "audioStartSpy",
        "audioStopRecord",
        "audioStopSpy",
        "audioTansfer",
        "audioUnHold",
        "callH323Terminal2Channels",
        "callRtspTerminal2Channels",
        "callback",
        "clearAllGWIP",
        "connectAll",
        "connectMutiTerminal",
        "consult",
        "deleteFixGWIP",
        "deleteGWIP",
        "deleteLiveMeetTemplate",
        "deleteMutiTemplate",
        "deleteTerminal",
        "disconnectAll",
        "disconnectH323Call2Channels",
        "disconnectMutiTerminal",
        "disconnectRtspCall2Channels",
        "getAudioTerminal",
        "getAudioTerminalList",
        "getChaircycleList",
        "getChairseeList",
        "getChannelsInLicenseNumber",
        "getChannelsList",
        "getConferenceIdleAudioTerminals",
        "getConferenceIdleVedioTerminals",
        "getConferenceInfo",
        "getConferenceInfoByTerminal",
        "getConferenceList",
        "getConferenceParam",
        "getConferenceTerminals",
        "getLiveMeetTemplate",
        "getLiveMeetTemplateList",
        "getMemberPacketStatus",
        "getScreenInfo",
        "getServiceMode",
        "getTemplateAudioIdleTerminList",
        "getTemplateAudioTerminList",
        "getTemplateH323IdleTerminList",
        "getTemplateH323TerminList",
        "getTemplateList",
        "getTemplateParam",
        "getTemplateTerminalTypeList",
        "getVedioTerminalList",
        "getVscreen",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "inviteAudioTerminal",
        "inviteVedioTerminal",
        "kickMutiTerminal",
        "meetShift",
        "muteAllMicrophone",
        "muteAllSpeaker",
        "muteMutiMicrophone",
        "muteMutiSpeaker",
        "openAllMicrophone",
        "openAllSpeaker",
        "powerPickUp",
        "reconnectH323Call2Channels",
        "reconnectRtspCall2Channels",
        "restartServer",
        "saveConferenceParam",
        "setAudioServ",
        "setChair",
        "setChairsee",
        "setFecc",
        "setFixGWIP",
        "setGWIP",
        "setLecture",
        "setLogoPath2Channels",
        "setQualityH323",
        "setQualitySoft",
        "setQueue",
        "setScreen",
        "startChannels",
        "startLiveMeet",
        "startTemplateMeet",
        "stopChannels",
        "stopFecc",
        "stopH323Call2Channels",
        "stopMutiConference",
        "stopRtspCall2Channels",
        "updateLiveMeetTemplate",
        "updateMutiTemplate",
        "updateTerminal"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___addLiveMeetTemplate(this, in, __current);
            }
            case 1:
            {
                return ___addMutiTemplate(this, in, __current);
            }
            case 2:
            {
                return ___addTerminal(this, in, __current);
            }
            case 3:
            {
                return ___audioDismantle(this, in, __current);
            }
            case 4:
            {
                return ___audioHold(this, in, __current);
            }
            case 5:
            {
                return ___audioInsert(this, in, __current);
            }
            case 6:
            {
                return ___audioStartRecord(this, in, __current);
            }
            case 7:
            {
                return ___audioStartSpy(this, in, __current);
            }
            case 8:
            {
                return ___audioStopRecord(this, in, __current);
            }
            case 9:
            {
                return ___audioStopSpy(this, in, __current);
            }
            case 10:
            {
                return ___audioTansfer(this, in, __current);
            }
            case 11:
            {
                return ___audioUnHold(this, in, __current);
            }
            case 12:
            {
                return ___callH323Terminal2Channels(this, in, __current);
            }
            case 13:
            {
                return ___callRtspTerminal2Channels(this, in, __current);
            }
            case 14:
            {
                return ___callback(this, in, __current);
            }
            case 15:
            {
                return ___clearAllGWIP(this, in, __current);
            }
            case 16:
            {
                return ___connectAll(this, in, __current);
            }
            case 17:
            {
                return ___connectMutiTerminal(this, in, __current);
            }
            case 18:
            {
                return ___consult(this, in, __current);
            }
            case 19:
            {
                return ___deleteFixGWIP(this, in, __current);
            }
            case 20:
            {
                return ___deleteGWIP(this, in, __current);
            }
            case 21:
            {
                return ___deleteLiveMeetTemplate(this, in, __current);
            }
            case 22:
            {
                return ___deleteMutiTemplate(this, in, __current);
            }
            case 23:
            {
                return ___deleteTerminal(this, in, __current);
            }
            case 24:
            {
                return ___disconnectAll(this, in, __current);
            }
            case 25:
            {
                return ___disconnectH323Call2Channels(this, in, __current);
            }
            case 26:
            {
                return ___disconnectMutiTerminal(this, in, __current);
            }
            case 27:
            {
                return ___disconnectRtspCall2Channels(this, in, __current);
            }
            case 28:
            {
                return ___getAudioTerminal(this, in, __current);
            }
            case 29:
            {
                return ___getAudioTerminalList(this, in, __current);
            }
            case 30:
            {
                return ___getChaircycleList(this, in, __current);
            }
            case 31:
            {
                return ___getChairseeList(this, in, __current);
            }
            case 32:
            {
                return ___getChannelsInLicenseNumber(this, in, __current);
            }
            case 33:
            {
                return ___getChannelsList(this, in, __current);
            }
            case 34:
            {
                return ___getConferenceIdleAudioTerminals(this, in, __current);
            }
            case 35:
            {
                return ___getConferenceIdleVedioTerminals(this, in, __current);
            }
            case 36:
            {
                return ___getConferenceInfo(this, in, __current);
            }
            case 37:
            {
                return ___getConferenceInfoByTerminal(this, in, __current);
            }
            case 38:
            {
                return ___getConferenceList(this, in, __current);
            }
            case 39:
            {
                return ___getConferenceParam(this, in, __current);
            }
            case 40:
            {
                return ___getConferenceTerminals(this, in, __current);
            }
            case 41:
            {
                return ___getLiveMeetTemplate(this, in, __current);
            }
            case 42:
            {
                return ___getLiveMeetTemplateList(this, in, __current);
            }
            case 43:
            {
                return ___getMemberPacketStatus(this, in, __current);
            }
            case 44:
            {
                return ___getScreenInfo(this, in, __current);
            }
            case 45:
            {
                return ___getServiceMode(this, in, __current);
            }
            case 46:
            {
                return ___getTemplateAudioIdleTerminList(this, in, __current);
            }
            case 47:
            {
                return ___getTemplateAudioTerminList(this, in, __current);
            }
            case 48:
            {
                return ___getTemplateH323IdleTerminList(this, in, __current);
            }
            case 49:
            {
                return ___getTemplateH323TerminList(this, in, __current);
            }
            case 50:
            {
                return ___getTemplateList(this, in, __current);
            }
            case 51:
            {
                return ___getTemplateParam(this, in, __current);
            }
            case 52:
            {
                return ___getTemplateTerminalTypeList(this, in, __current);
            }
            case 53:
            {
                return ___getVedioTerminalList(this, in, __current);
            }
            case 54:
            {
                return ___getVscreen(this, in, __current);
            }
            case 55:
            {
                return ___ice_id(this, in, __current);
            }
            case 56:
            {
                return ___ice_ids(this, in, __current);
            }
            case 57:
            {
                return ___ice_isA(this, in, __current);
            }
            case 58:
            {
                return ___ice_ping(this, in, __current);
            }
            case 59:
            {
                return ___inviteAudioTerminal(this, in, __current);
            }
            case 60:
            {
                return ___inviteVedioTerminal(this, in, __current);
            }
            case 61:
            {
                return ___kickMutiTerminal(this, in, __current);
            }
            case 62:
            {
                return ___meetShift(this, in, __current);
            }
            case 63:
            {
                return ___muteAllMicrophone(this, in, __current);
            }
            case 64:
            {
                return ___muteAllSpeaker(this, in, __current);
            }
            case 65:
            {
                return ___muteMutiMicrophone(this, in, __current);
            }
            case 66:
            {
                return ___muteMutiSpeaker(this, in, __current);
            }
            case 67:
            {
                return ___openAllMicrophone(this, in, __current);
            }
            case 68:
            {
                return ___openAllSpeaker(this, in, __current);
            }
            case 69:
            {
                return ___powerPickUp(this, in, __current);
            }
            case 70:
            {
                return ___reconnectH323Call2Channels(this, in, __current);
            }
            case 71:
            {
                return ___reconnectRtspCall2Channels(this, in, __current);
            }
            case 72:
            {
                return ___restartServer(this, in, __current);
            }
            case 73:
            {
                return ___saveConferenceParam(this, in, __current);
            }
            case 74:
            {
                return ___setAudioServ(this, in, __current);
            }
            case 75:
            {
                return ___setChair(this, in, __current);
            }
            case 76:
            {
                return ___setChairsee(this, in, __current);
            }
            case 77:
            {
                return ___setFecc(this, in, __current);
            }
            case 78:
            {
                return ___setFixGWIP(this, in, __current);
            }
            case 79:
            {
                return ___setGWIP(this, in, __current);
            }
            case 80:
            {
                return ___setLecture(this, in, __current);
            }
            case 81:
            {
                return ___setLogoPath2Channels(this, in, __current);
            }
            case 82:
            {
                return ___setQualityH323(this, in, __current);
            }
            case 83:
            {
                return ___setQualitySoft(this, in, __current);
            }
            case 84:
            {
                return ___setQueue(this, in, __current);
            }
            case 85:
            {
                return ___setScreen(this, in, __current);
            }
            case 86:
            {
                return ___startChannels(this, in, __current);
            }
            case 87:
            {
                return ___startLiveMeet(this, in, __current);
            }
            case 88:
            {
                return ___startTemplateMeet(this, in, __current);
            }
            case 89:
            {
                return ___stopChannels(this, in, __current);
            }
            case 90:
            {
                return ___stopFecc(this, in, __current);
            }
            case 91:
            {
                return ___stopH323Call2Channels(this, in, __current);
            }
            case 92:
            {
                return ___stopMutiConference(this, in, __current);
            }
            case 93:
            {
                return ___stopRtspCall2Channels(this, in, __current);
            }
            case 94:
            {
                return ___updateLiveMeetTemplate(this, in, __current);
            }
            case 95:
            {
                return ___updateMutiTemplate(this, in, __current);
            }
            case 96:
            {
                return ___updateTerminal(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type vmxICE::MC3 was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type vmxICE::MC3 was not generated with stream support";
        throw ex;
    }
}
