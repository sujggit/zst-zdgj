// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `TerminalInfo.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.vmediax.oneplusn.ice.api.vmxICE;

public class TerminalInfo implements java.lang.Cloneable, java.io.Serializable
{
    public String id;

    public String name;

    public String ipaddr;

    public String h323;

    public String e164;

    public String called;

    public String descripe;

    public String audio;

    public String video;

    public String fecc;

    public String microphone;

    public String speaker;

    public String isConnected;

    public String type;

    public String lecture;

    public String chair;

    public String terminalType;

    public String ext;

    public String isRegister;

    public String isExt;

    public String isScreen;

    public TerminalInfo()
    {
    }

    public TerminalInfo(String ipaddr, String type, String name) {
		super();
		this.ipaddr = ipaddr;
		this.type = type;
		this.name = isScreen;
	}

	public TerminalInfo(String id, String name, String ipaddr, String h323, String e164, String called, String descripe, String audio, String video, String fecc, String microphone, String speaker, String isConnected, String type, String lecture, String chair, String terminalType, String ext, String isRegister, String isExt, String isScreen)
    {
        this.id = id;
        this.name = name;
        this.ipaddr = ipaddr;
        this.h323 = h323;
        this.e164 = e164;
        this.called = called;
        this.descripe = descripe;
        this.audio = audio;
        this.video = video;
        this.fecc = fecc;
        this.microphone = microphone;
        this.speaker = speaker;
        this.isConnected = isConnected;
        this.type = type;
        this.lecture = lecture;
        this.chair = chair;
        this.terminalType = terminalType;
        this.ext = ext;
        this.isRegister = isRegister;
        this.isExt = isExt;
        this.isScreen = isScreen;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TerminalInfo _r = null;
        try
        {
            _r = (TerminalInfo)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                if(id == null || _r.id == null || !id.equals(_r.id))
                {
                    return false;
                }
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(ipaddr != _r.ipaddr)
            {
                if(ipaddr == null || _r.ipaddr == null || !ipaddr.equals(_r.ipaddr))
                {
                    return false;
                }
            }
            if(h323 != _r.h323)
            {
                if(h323 == null || _r.h323 == null || !h323.equals(_r.h323))
                {
                    return false;
                }
            }
            if(e164 != _r.e164)
            {
                if(e164 == null || _r.e164 == null || !e164.equals(_r.e164))
                {
                    return false;
                }
            }
            if(called != _r.called)
            {
                if(called == null || _r.called == null || !called.equals(_r.called))
                {
                    return false;
                }
            }
            if(descripe != _r.descripe)
            {
                if(descripe == null || _r.descripe == null || !descripe.equals(_r.descripe))
                {
                    return false;
                }
            }
            if(audio != _r.audio)
            {
                if(audio == null || _r.audio == null || !audio.equals(_r.audio))
                {
                    return false;
                }
            }
            if(video != _r.video)
            {
                if(video == null || _r.video == null || !video.equals(_r.video))
                {
                    return false;
                }
            }
            if(fecc != _r.fecc)
            {
                if(fecc == null || _r.fecc == null || !fecc.equals(_r.fecc))
                {
                    return false;
                }
            }
            if(microphone != _r.microphone)
            {
                if(microphone == null || _r.microphone == null || !microphone.equals(_r.microphone))
                {
                    return false;
                }
            }
            if(speaker != _r.speaker)
            {
                if(speaker == null || _r.speaker == null || !speaker.equals(_r.speaker))
                {
                    return false;
                }
            }
            if(isConnected != _r.isConnected)
            {
                if(isConnected == null || _r.isConnected == null || !isConnected.equals(_r.isConnected))
                {
                    return false;
                }
            }
            if(type != _r.type)
            {
                if(type == null || _r.type == null || !type.equals(_r.type))
                {
                    return false;
                }
            }
            if(lecture != _r.lecture)
            {
                if(lecture == null || _r.lecture == null || !lecture.equals(_r.lecture))
                {
                    return false;
                }
            }
            if(chair != _r.chair)
            {
                if(chair == null || _r.chair == null || !chair.equals(_r.chair))
                {
                    return false;
                }
            }
            if(terminalType != _r.terminalType)
            {
                if(terminalType == null || _r.terminalType == null || !terminalType.equals(_r.terminalType))
                {
                    return false;
                }
            }
            if(ext != _r.ext)
            {
                if(ext == null || _r.ext == null || !ext.equals(_r.ext))
                {
                    return false;
                }
            }
            if(isRegister != _r.isRegister)
            {
                if(isRegister == null || _r.isRegister == null || !isRegister.equals(_r.isRegister))
                {
                    return false;
                }
            }
            if(isExt != _r.isExt)
            {
                if(isExt == null || _r.isExt == null || !isExt.equals(_r.isExt))
                {
                    return false;
                }
            }
            if(isScreen != _r.isScreen)
            {
                if(isScreen == null || _r.isScreen == null || !isScreen.equals(_r.isScreen))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(id != null)
        {
            __h = 5 * __h + id.hashCode();
        }
        if(name != null)
        {
            __h = 5 * __h + name.hashCode();
        }
        if(ipaddr != null)
        {
            __h = 5 * __h + ipaddr.hashCode();
        }
        if(h323 != null)
        {
            __h = 5 * __h + h323.hashCode();
        }
        if(e164 != null)
        {
            __h = 5 * __h + e164.hashCode();
        }
        if(called != null)
        {
            __h = 5 * __h + called.hashCode();
        }
        if(descripe != null)
        {
            __h = 5 * __h + descripe.hashCode();
        }
        if(audio != null)
        {
            __h = 5 * __h + audio.hashCode();
        }
        if(video != null)
        {
            __h = 5 * __h + video.hashCode();
        }
        if(fecc != null)
        {
            __h = 5 * __h + fecc.hashCode();
        }
        if(microphone != null)
        {
            __h = 5 * __h + microphone.hashCode();
        }
        if(speaker != null)
        {
            __h = 5 * __h + speaker.hashCode();
        }
        if(isConnected != null)
        {
            __h = 5 * __h + isConnected.hashCode();
        }
        if(type != null)
        {
            __h = 5 * __h + type.hashCode();
        }
        if(lecture != null)
        {
            __h = 5 * __h + lecture.hashCode();
        }
        if(chair != null)
        {
            __h = 5 * __h + chair.hashCode();
        }
        if(terminalType != null)
        {
            __h = 5 * __h + terminalType.hashCode();
        }
        if(ext != null)
        {
            __h = 5 * __h + ext.hashCode();
        }
        if(isRegister != null)
        {
            __h = 5 * __h + isRegister.hashCode();
        }
        if(isExt != null)
        {
            __h = 5 * __h + isExt.hashCode();
        }
        if(isScreen != null)
        {
            __h = 5 * __h + isScreen.hashCode();
        }
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(id);
        __os.writeString(name);
        __os.writeString(ipaddr);
        __os.writeString(h323);
        __os.writeString(e164);
        __os.writeString(called);
        __os.writeString(descripe);
        __os.writeString(audio);
        __os.writeString(video);
        __os.writeString(fecc);
        __os.writeString(microphone);
        __os.writeString(speaker);
        __os.writeString(isConnected);
        __os.writeString(type);
        __os.writeString(lecture);
        __os.writeString(chair);
        __os.writeString(terminalType);
        __os.writeString(ext);
        __os.writeString(isRegister);
        __os.writeString(isExt);
        __os.writeString(isScreen);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readString();
        name = __is.readString();
        ipaddr = __is.readString();
        h323 = __is.readString();
        e164 = __is.readString();
        called = __is.readString();
        descripe = __is.readString();
        audio = __is.readString();
        video = __is.readString();
        fecc = __is.readString();
        microphone = __is.readString();
        speaker = __is.readString();
        isConnected = __is.readString();
        type = __is.readString();
        lecture = __is.readString();
        chair = __is.readString();
        terminalType = __is.readString();
        ext = __is.readString();
        isRegister = __is.readString();
        isExt = __is.readString();
        isScreen = __is.readString();
    }
}
