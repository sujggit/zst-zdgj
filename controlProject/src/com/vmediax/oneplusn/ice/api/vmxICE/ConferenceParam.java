// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ConferenceParam.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.vmediax.oneplusn.ice.api.vmxICE;

public class ConferenceParam implements java.lang.Cloneable, java.io.Serializable
{
    public String meetingLong;

    public int autoConnectTimes;

    public String autoSound;

    public String meetName;

    public String delay;

    public String mnameFont;

    public String nameColor;

    public String useColor;

    public String mnameTop;

    public String nameBgColor;

    public String useWord;

    public String content;

    public String scrollSpeed;

    public String transparent;

    public String conftransparent;

    public String wordSize;

    public String wordLoction;

    public String fontBgColor;

    public String fontColor;

    public String poll;

    public String hBandWidth;

    public String hVideoSize;

    public String mBandWidth;

    public String mVideoSize;

    public String lBandWidth;

    public String lVideoSize;

    public String ext;

    public ConferenceParam()
    {
    }

    public ConferenceParam(String meetingLong, int autoConnectTimes, String autoSound, String meetName, String delay, String mnameFont, String nameColor, String useColor, String mnameTop, String nameBgColor, String useWord, String content, String scrollSpeed, String transparent, String conftransparent, String wordSize, String wordLoction, String fontBgColor, String fontColor, String poll, String hBandWidth, String hVideoSize, String mBandWidth, String mVideoSize, String lBandWidth, String lVideoSize, String ext)
    {
        this.meetingLong = meetingLong;
        this.autoConnectTimes = autoConnectTimes;
        this.autoSound = autoSound;
        this.meetName = meetName;
        this.delay = delay;
        this.mnameFont = mnameFont;
        this.nameColor = nameColor;
        this.useColor = useColor;
        this.mnameTop = mnameTop;
        this.nameBgColor = nameBgColor;
        this.useWord = useWord;
        this.content = content;
        this.scrollSpeed = scrollSpeed;
        this.transparent = transparent;
        this.conftransparent = conftransparent;
        this.wordSize = wordSize;
        this.wordLoction = wordLoction;
        this.fontBgColor = fontBgColor;
        this.fontColor = fontColor;
        this.poll = poll;
        this.hBandWidth = hBandWidth;
        this.hVideoSize = hVideoSize;
        this.mBandWidth = mBandWidth;
        this.mVideoSize = mVideoSize;
        this.lBandWidth = lBandWidth;
        this.lVideoSize = lVideoSize;
        this.ext = ext;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ConferenceParam _r = null;
        try
        {
            _r = (ConferenceParam)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(meetingLong != _r.meetingLong)
            {
                if(meetingLong == null || _r.meetingLong == null || !meetingLong.equals(_r.meetingLong))
                {
                    return false;
                }
            }
            if(autoConnectTimes != _r.autoConnectTimes)
            {
                return false;
            }
            if(autoSound != _r.autoSound)
            {
                if(autoSound == null || _r.autoSound == null || !autoSound.equals(_r.autoSound))
                {
                    return false;
                }
            }
            if(meetName != _r.meetName)
            {
                if(meetName == null || _r.meetName == null || !meetName.equals(_r.meetName))
                {
                    return false;
                }
            }
            if(delay != _r.delay)
            {
                if(delay == null || _r.delay == null || !delay.equals(_r.delay))
                {
                    return false;
                }
            }
            if(mnameFont != _r.mnameFont)
            {
                if(mnameFont == null || _r.mnameFont == null || !mnameFont.equals(_r.mnameFont))
                {
                    return false;
                }
            }
            if(nameColor != _r.nameColor)
            {
                if(nameColor == null || _r.nameColor == null || !nameColor.equals(_r.nameColor))
                {
                    return false;
                }
            }
            if(useColor != _r.useColor)
            {
                if(useColor == null || _r.useColor == null || !useColor.equals(_r.useColor))
                {
                    return false;
                }
            }
            if(mnameTop != _r.mnameTop)
            {
                if(mnameTop == null || _r.mnameTop == null || !mnameTop.equals(_r.mnameTop))
                {
                    return false;
                }
            }
            if(nameBgColor != _r.nameBgColor)
            {
                if(nameBgColor == null || _r.nameBgColor == null || !nameBgColor.equals(_r.nameBgColor))
                {
                    return false;
                }
            }
            if(useWord != _r.useWord)
            {
                if(useWord == null || _r.useWord == null || !useWord.equals(_r.useWord))
                {
                    return false;
                }
            }
            if(content != _r.content)
            {
                if(content == null || _r.content == null || !content.equals(_r.content))
                {
                    return false;
                }
            }
            if(scrollSpeed != _r.scrollSpeed)
            {
                if(scrollSpeed == null || _r.scrollSpeed == null || !scrollSpeed.equals(_r.scrollSpeed))
                {
                    return false;
                }
            }
            if(transparent != _r.transparent)
            {
                if(transparent == null || _r.transparent == null || !transparent.equals(_r.transparent))
                {
                    return false;
                }
            }
            if(conftransparent != _r.conftransparent)
            {
                if(conftransparent == null || _r.conftransparent == null || !conftransparent.equals(_r.conftransparent))
                {
                    return false;
                }
            }
            if(wordSize != _r.wordSize)
            {
                if(wordSize == null || _r.wordSize == null || !wordSize.equals(_r.wordSize))
                {
                    return false;
                }
            }
            if(wordLoction != _r.wordLoction)
            {
                if(wordLoction == null || _r.wordLoction == null || !wordLoction.equals(_r.wordLoction))
                {
                    return false;
                }
            }
            if(fontBgColor != _r.fontBgColor)
            {
                if(fontBgColor == null || _r.fontBgColor == null || !fontBgColor.equals(_r.fontBgColor))
                {
                    return false;
                }
            }
            if(fontColor != _r.fontColor)
            {
                if(fontColor == null || _r.fontColor == null || !fontColor.equals(_r.fontColor))
                {
                    return false;
                }
            }
            if(poll != _r.poll)
            {
                if(poll == null || _r.poll == null || !poll.equals(_r.poll))
                {
                    return false;
                }
            }
            if(hBandWidth != _r.hBandWidth)
            {
                if(hBandWidth == null || _r.hBandWidth == null || !hBandWidth.equals(_r.hBandWidth))
                {
                    return false;
                }
            }
            if(hVideoSize != _r.hVideoSize)
            {
                if(hVideoSize == null || _r.hVideoSize == null || !hVideoSize.equals(_r.hVideoSize))
                {
                    return false;
                }
            }
            if(mBandWidth != _r.mBandWidth)
            {
                if(mBandWidth == null || _r.mBandWidth == null || !mBandWidth.equals(_r.mBandWidth))
                {
                    return false;
                }
            }
            if(mVideoSize != _r.mVideoSize)
            {
                if(mVideoSize == null || _r.mVideoSize == null || !mVideoSize.equals(_r.mVideoSize))
                {
                    return false;
                }
            }
            if(lBandWidth != _r.lBandWidth)
            {
                if(lBandWidth == null || _r.lBandWidth == null || !lBandWidth.equals(_r.lBandWidth))
                {
                    return false;
                }
            }
            if(lVideoSize != _r.lVideoSize)
            {
                if(lVideoSize == null || _r.lVideoSize == null || !lVideoSize.equals(_r.lVideoSize))
                {
                    return false;
                }
            }
            if(ext != _r.ext)
            {
                if(ext == null || _r.ext == null || !ext.equals(_r.ext))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(meetingLong != null)
        {
            __h = 5 * __h + meetingLong.hashCode();
        }
        __h = 5 * __h + autoConnectTimes;
        if(autoSound != null)
        {
            __h = 5 * __h + autoSound.hashCode();
        }
        if(meetName != null)
        {
            __h = 5 * __h + meetName.hashCode();
        }
        if(delay != null)
        {
            __h = 5 * __h + delay.hashCode();
        }
        if(mnameFont != null)
        {
            __h = 5 * __h + mnameFont.hashCode();
        }
        if(nameColor != null)
        {
            __h = 5 * __h + nameColor.hashCode();
        }
        if(useColor != null)
        {
            __h = 5 * __h + useColor.hashCode();
        }
        if(mnameTop != null)
        {
            __h = 5 * __h + mnameTop.hashCode();
        }
        if(nameBgColor != null)
        {
            __h = 5 * __h + nameBgColor.hashCode();
        }
        if(useWord != null)
        {
            __h = 5 * __h + useWord.hashCode();
        }
        if(content != null)
        {
            __h = 5 * __h + content.hashCode();
        }
        if(scrollSpeed != null)
        {
            __h = 5 * __h + scrollSpeed.hashCode();
        }
        if(transparent != null)
        {
            __h = 5 * __h + transparent.hashCode();
        }
        if(conftransparent != null)
        {
            __h = 5 * __h + conftransparent.hashCode();
        }
        if(wordSize != null)
        {
            __h = 5 * __h + wordSize.hashCode();
        }
        if(wordLoction != null)
        {
            __h = 5 * __h + wordLoction.hashCode();
        }
        if(fontBgColor != null)
        {
            __h = 5 * __h + fontBgColor.hashCode();
        }
        if(fontColor != null)
        {
            __h = 5 * __h + fontColor.hashCode();
        }
        if(poll != null)
        {
            __h = 5 * __h + poll.hashCode();
        }
        if(hBandWidth != null)
        {
            __h = 5 * __h + hBandWidth.hashCode();
        }
        if(hVideoSize != null)
        {
            __h = 5 * __h + hVideoSize.hashCode();
        }
        if(mBandWidth != null)
        {
            __h = 5 * __h + mBandWidth.hashCode();
        }
        if(mVideoSize != null)
        {
            __h = 5 * __h + mVideoSize.hashCode();
        }
        if(lBandWidth != null)
        {
            __h = 5 * __h + lBandWidth.hashCode();
        }
        if(lVideoSize != null)
        {
            __h = 5 * __h + lVideoSize.hashCode();
        }
        if(ext != null)
        {
            __h = 5 * __h + ext.hashCode();
        }
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(meetingLong);
        __os.writeInt(autoConnectTimes);
        __os.writeString(autoSound);
        __os.writeString(meetName);
        __os.writeString(delay);
        __os.writeString(mnameFont);
        __os.writeString(nameColor);
        __os.writeString(useColor);
        __os.writeString(mnameTop);
        __os.writeString(nameBgColor);
        __os.writeString(useWord);
        __os.writeString(content);
        __os.writeString(scrollSpeed);
        __os.writeString(transparent);
        __os.writeString(conftransparent);
        __os.writeString(wordSize);
        __os.writeString(wordLoction);
        __os.writeString(fontBgColor);
        __os.writeString(fontColor);
        __os.writeString(poll);
        __os.writeString(hBandWidth);
        __os.writeString(hVideoSize);
        __os.writeString(mBandWidth);
        __os.writeString(mVideoSize);
        __os.writeString(lBandWidth);
        __os.writeString(lVideoSize);
        __os.writeString(ext);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        meetingLong = __is.readString();
        autoConnectTimes = __is.readInt();
        autoSound = __is.readString();
        meetName = __is.readString();
        delay = __is.readString();
        mnameFont = __is.readString();
        nameColor = __is.readString();
        useColor = __is.readString();
        mnameTop = __is.readString();
        nameBgColor = __is.readString();
        useWord = __is.readString();
        content = __is.readString();
        scrollSpeed = __is.readString();
        transparent = __is.readString();
        conftransparent = __is.readString();
        wordSize = __is.readString();
        wordLoction = __is.readString();
        fontBgColor = __is.readString();
        fontColor = __is.readString();
        poll = __is.readString();
        hBandWidth = __is.readString();
        hVideoSize = __is.readString();
        mBandWidth = __is.readString();
        mVideoSize = __is.readString();
        lBandWidth = __is.readString();
        lVideoSize = __is.readString();
        ext = __is.readString();
    }
}
