// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `MediaNodePrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package vmxICE;

/**
 * [MediaNode]是mmap6框架中的多媒体节点基类，提供了多媒体节点的通用接口。
 **/
public final class MediaNodePrxHelper extends Ice.ObjectPrxHelperBase implements MediaNodePrx
{
    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addDeliverDst(String dst)
    {
        return addDeliverDst(dst, null, false);
    }

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addDeliverDst(String dst, java.util.Map<String, String> __ctx)
    {
        return addDeliverDst(dst, __ctx, true);
    }

    private int
    addDeliverDst(String dst, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addDeliverDst");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.addDeliverDst(dst, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addDeliverDst_name = "addDeliverDst";

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 接收数据的节点的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_addDeliverDst(String dst)
    {
        return begin_addDeliverDst(dst, null, false, null);
    }

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 接收数据的节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addDeliverDst(String dst, java.util.Map<String, String> __ctx)
    {
        return begin_addDeliverDst(dst, __ctx, true, null);
    }

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 接收数据的节点的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_addDeliverDst(String dst, Ice.Callback __cb)
    {
        return begin_addDeliverDst(dst, null, false, __cb);
    }

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 接收数据的节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addDeliverDst(String dst, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addDeliverDst(dst, __ctx, true, __cb);
    }

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 接收数据的节点的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_addDeliverDst(String dst, Callback_MediaNode_addDeliverDst __cb)
    {
        return begin_addDeliverDst(dst, null, false, __cb);
    }

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 接收数据的节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addDeliverDst(String dst, java.util.Map<String, String> __ctx, Callback_MediaNode_addDeliverDst __cb)
    {
        return begin_addDeliverDst(dst, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addDeliverDst(String dst, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addDeliverDst_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addDeliverDst_name, __cb);
        try
        {
            __result.__prepare(__addDeliverDst_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(dst);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addDeliverDst(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addDeliverDst_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * @param dstPadIndex 接收数据的节点的输入pad索引，如果为[InvalidPadIndex]则表示不指定.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex)
    {
        return addDeliverDstEx(dst, dstPadIndex, srcPadIndex, null, false);
    }

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * @param dstPadIndex 接收数据的节点的输入pad索引，如果为[InvalidPadIndex]则表示不指定.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx)
    {
        return addDeliverDstEx(dst, dstPadIndex, srcPadIndex, __ctx, true);
    }

    private int
    addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addDeliverDstEx");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.addDeliverDstEx(dst, dstPadIndex, srcPadIndex, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addDeliverDstEx_name = "addDeliverDstEx";

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 接收数据的节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     **/
    public Ice.AsyncResult begin_addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex)
    {
        return begin_addDeliverDstEx(dst, dstPadIndex, srcPadIndex, null, false, null);
    }

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 接收数据的节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx)
    {
        return begin_addDeliverDstEx(dst, dstPadIndex, srcPadIndex, __ctx, true, null);
    }

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 接收数据的节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     **/
    public Ice.AsyncResult begin_addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, Ice.Callback __cb)
    {
        return begin_addDeliverDstEx(dst, dstPadIndex, srcPadIndex, null, false, __cb);
    }

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 接收数据的节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addDeliverDstEx(dst, dstPadIndex, srcPadIndex, __ctx, true, __cb);
    }

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 接收数据的节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     **/
    public Ice.AsyncResult begin_addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, Callback_MediaNode_addDeliverDstEx __cb)
    {
        return begin_addDeliverDstEx(dst, dstPadIndex, srcPadIndex, null, false, __cb);
    }

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 接收数据的节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx, Callback_MediaNode_addDeliverDstEx __cb)
    {
        return begin_addDeliverDstEx(dst, dstPadIndex, srcPadIndex, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addDeliverDstEx_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addDeliverDstEx_name, __cb);
        try
        {
            __result.__prepare(__addDeliverDstEx_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(dst);
            __os.writeInt(dstPadIndex);
            __os.writeInt(srcPadIndex);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addDeliverDstEx(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addDeliverDstEx_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourcePadIndex 上游节点的pad索引.
     * @param sourceName 上游节点的名称.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并通过输出参数[outDstPadIndex]返回给调用者。
     * @param outDstPadIndex 下游节点的pad索引。
     * @param dstNodeName 下游节点的名称，由下游节点返回给调用者.
     * @param dstMgrID 下游节点所在池的ice ID.
     * @param dstNodeIndex 下游节点所在池中节点自身的索引，用于通过池来传输数据.
     * @param mode 数据传输的模式
     * @param modeInfo 传输模式的附加信息，根据传输模式的参数来确定其中包含的信息，谁提供传输模式，谁就必须给出传输信息。例如如果调用者设定传输模式为共享内存，则需要调用者填充共享内存的名称.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, Ice.IntHolder outDstPadIndex, Ice.StringHolder dstNodeName, Ice.StringHolder dstMgrID, Ice.IntHolder dstNodeIndex)
    {
        return addSource(sourceID, sourcePadIndex, sourceName, dstPadIndex, mode, modeInfo, outDstPadIndex, dstNodeName, dstMgrID, dstNodeIndex, null, false);
    }

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourcePadIndex 上游节点的pad索引.
     * @param sourceName 上游节点的名称.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并通过输出参数[outDstPadIndex]返回给调用者。
     * @param outDstPadIndex 下游节点的pad索引。
     * @param dstNodeName 下游节点的名称，由下游节点返回给调用者.
     * @param dstMgrID 下游节点所在池的ice ID.
     * @param dstNodeIndex 下游节点所在池中节点自身的索引，用于通过池来传输数据.
     * @param mode 数据传输的模式
     * @param modeInfo 传输模式的附加信息，根据传输模式的参数来确定其中包含的信息，谁提供传输模式，谁就必须给出传输信息。例如如果调用者设定传输模式为共享内存，则需要调用者填充共享内存的名称.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, Ice.IntHolder outDstPadIndex, Ice.StringHolder dstNodeName, Ice.StringHolder dstMgrID, Ice.IntHolder dstNodeIndex, java.util.Map<String, String> __ctx)
    {
        return addSource(sourceID, sourcePadIndex, sourceName, dstPadIndex, mode, modeInfo, outDstPadIndex, dstNodeName, dstMgrID, dstNodeIndex, __ctx, true);
    }

    private int
    addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, Ice.IntHolder outDstPadIndex, Ice.StringHolder dstNodeName, Ice.StringHolder dstMgrID, Ice.IntHolder dstNodeIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addSource");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.addSource(sourceID, sourcePadIndex, sourceName, dstPadIndex, mode, modeInfo, outDstPadIndex, dstNodeName, dstMgrID, dstNodeIndex, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addSource_name = "addSource";

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param __cb The callback object for the operation.
     * @param sourceID 上游节点的ID.
     * @param sourceName 上游节点的名称.
     * @param mode 数据传输的模式
     **/
    public Ice.AsyncResult begin_addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo)
    {
        return begin_addSource(sourceID, sourcePadIndex, sourceName, dstPadIndex, mode, modeInfo, null, false, null);
    }

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param __cb The callback object for the operation.
     * @param sourceID 上游节点的ID.
     * @param sourceName 上游节点的名称.
     * @param mode 数据传输的模式
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, java.util.Map<String, String> __ctx)
    {
        return begin_addSource(sourceID, sourcePadIndex, sourceName, dstPadIndex, mode, modeInfo, __ctx, true, null);
    }

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param __cb The callback object for the operation.
     * @param sourceID 上游节点的ID.
     * @param sourceName 上游节点的名称.
     * @param mode 数据传输的模式
     **/
    public Ice.AsyncResult begin_addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, Ice.Callback __cb)
    {
        return begin_addSource(sourceID, sourcePadIndex, sourceName, dstPadIndex, mode, modeInfo, null, false, __cb);
    }

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param __cb The callback object for the operation.
     * @param sourceID 上游节点的ID.
     * @param sourceName 上游节点的名称.
     * @param mode 数据传输的模式
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addSource(sourceID, sourcePadIndex, sourceName, dstPadIndex, mode, modeInfo, __ctx, true, __cb);
    }

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param __cb The callback object for the operation.
     * @param sourceID 上游节点的ID.
     * @param sourceName 上游节点的名称.
     * @param mode 数据传输的模式
     **/
    public Ice.AsyncResult begin_addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, Callback_MediaNode_addSource __cb)
    {
        return begin_addSource(sourceID, sourcePadIndex, sourceName, dstPadIndex, mode, modeInfo, null, false, __cb);
    }

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param __cb The callback object for the operation.
     * @param sourceID 上游节点的ID.
     * @param sourceName 上游节点的名称.
     * @param mode 数据传输的模式
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, java.util.Map<String, String> __ctx, Callback_MediaNode_addSource __cb)
    {
        return begin_addSource(sourceID, sourcePadIndex, sourceName, dstPadIndex, mode, modeInfo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addSource_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addSource_name, __cb);
        try
        {
            __result.__prepare(__addSource_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(sourceID);
            __os.writeInt(sourcePadIndex);
            __os.writeString(sourceName);
            __os.writeInt(dstPadIndex);
            mode.__write(__os);
            __os.writeString(modeInfo);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param outDstPadIndex 下游节点的pad索引。
     * @param dstMgrID 下游节点所在池的ice ID.
     **/
    public int end_addSource(Ice.IntHolder outDstPadIndex, Ice.StringHolder dstNodeName, Ice.StringHolder dstMgrID, Ice.IntHolder dstNodeIndex, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addSource_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        outDstPadIndex.value = __is.readInt();
        dstNodeName.value = __is.readString();
        dstMgrID.value = __is.readString();
        dstNodeIndex.value = __is.readInt();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param msgList 事件ID列表，在vmx_msg::CEvent类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumEventList(EventDescListHolder eventList)
    {
        return enumEventList(eventList, null, false);
    }

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param msgList 事件ID列表，在vmx_msg::CEvent类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumEventList(EventDescListHolder eventList, java.util.Map<String, String> __ctx)
    {
        return enumEventList(eventList, __ctx, true);
    }

    private int
    enumEventList(EventDescListHolder eventList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumEventList");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.enumEventList(eventList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumEventList_name = "enumEventList";

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumEventList()
    {
        return begin_enumEventList(null, false, null);
    }

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumEventList(java.util.Map<String, String> __ctx)
    {
        return begin_enumEventList(__ctx, true, null);
    }

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumEventList(Ice.Callback __cb)
    {
        return begin_enumEventList(null, false, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumEventList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumEventList(__ctx, true, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumEventList(Callback_MediaNode_enumEventList __cb)
    {
        return begin_enumEventList(null, false, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumEventList(java.util.Map<String, String> __ctx, Callback_MediaNode_enumEventList __cb)
    {
        return begin_enumEventList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumEventList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumEventList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumEventList_name, __cb);
        try
        {
            __result.__prepare(__enumEventList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_enumEventList(EventDescListHolder eventList, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumEventList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        eventList.value = EventDescListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param list Pad信息列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumPadList(PadListHolder list)
    {
        return enumPadList(list, null, false);
    }

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param list Pad信息列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumPadList(PadListHolder list, java.util.Map<String, String> __ctx)
    {
        return enumPadList(list, __ctx, true);
    }

    private int
    enumPadList(PadListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumPadList");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.enumPadList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumPadList_name = "enumPadList";

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPadList()
    {
        return begin_enumPadList(null, false, null);
    }

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPadList(java.util.Map<String, String> __ctx)
    {
        return begin_enumPadList(__ctx, true, null);
    }

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPadList(Ice.Callback __cb)
    {
        return begin_enumPadList(null, false, __cb);
    }

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPadList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumPadList(__ctx, true, __cb);
    }

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPadList(Callback_MediaNode_enumPadList __cb)
    {
        return begin_enumPadList(null, false, __cb);
    }

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPadList(java.util.Map<String, String> __ctx, Callback_MediaNode_enumPadList __cb)
    {
        return begin_enumPadList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumPadList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumPadList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumPadList_name, __cb);
        try
        {
            __result.__prepare(__enumPadList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list Pad信息列表.
     * 
     **/
    public int end_enumPadList(PadListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumPadList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = PadListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param list 下游节点的描述列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getDeliverList(LinkListHolder list)
    {
        return getDeliverList(list, null, false);
    }

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param list 下游节点的描述列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getDeliverList(LinkListHolder list, java.util.Map<String, String> __ctx)
    {
        return getDeliverList(list, __ctx, true);
    }

    private int
    getDeliverList(LinkListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDeliverList");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.getDeliverList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getDeliverList_name = "getDeliverList";

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getDeliverList()
    {
        return begin_getDeliverList(null, false, null);
    }

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getDeliverList(java.util.Map<String, String> __ctx)
    {
        return begin_getDeliverList(__ctx, true, null);
    }

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getDeliverList(Ice.Callback __cb)
    {
        return begin_getDeliverList(null, false, __cb);
    }

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getDeliverList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDeliverList(__ctx, true, __cb);
    }

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getDeliverList(Callback_MediaNode_getDeliverList __cb)
    {
        return begin_getDeliverList(null, false, __cb);
    }

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getDeliverList(java.util.Map<String, String> __ctx, Callback_MediaNode_getDeliverList __cb)
    {
        return begin_getDeliverList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDeliverList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDeliverList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDeliverList_name, __cb);
        try
        {
            __result.__prepare(__getDeliverList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 下游节点的描述列表.
     * 
     **/
    public int end_getDeliverList(LinkListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getDeliverList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = LinkListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param capability 媒体流的详细描述.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getPadCapability(PadDirection dir, int index, Ice.StringHolder capability)
    {
        return getPadCapability(dir, index, capability, null, false);
    }

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param capability 媒体流的详细描述.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getPadCapability(PadDirection dir, int index, Ice.StringHolder capability, java.util.Map<String, String> __ctx)
    {
        return getPadCapability(dir, index, capability, __ctx, true);
    }

    private int
    getPadCapability(PadDirection dir, int index, Ice.StringHolder capability, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPadCapability");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.getPadCapability(dir, index, capability, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getPadCapability_name = "getPadCapability";

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     **/
    public Ice.AsyncResult begin_getPadCapability(PadDirection dir, int index)
    {
        return begin_getPadCapability(dir, index, null, false, null);
    }

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPadCapability(PadDirection dir, int index, java.util.Map<String, String> __ctx)
    {
        return begin_getPadCapability(dir, index, __ctx, true, null);
    }

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     **/
    public Ice.AsyncResult begin_getPadCapability(PadDirection dir, int index, Ice.Callback __cb)
    {
        return begin_getPadCapability(dir, index, null, false, __cb);
    }

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPadCapability(PadDirection dir, int index, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPadCapability(dir, index, __ctx, true, __cb);
    }

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     **/
    public Ice.AsyncResult begin_getPadCapability(PadDirection dir, int index, Callback_MediaNode_getPadCapability __cb)
    {
        return begin_getPadCapability(dir, index, null, false, __cb);
    }

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPadCapability(PadDirection dir, int index, java.util.Map<String, String> __ctx, Callback_MediaNode_getPadCapability __cb)
    {
        return begin_getPadCapability(dir, index, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPadCapability(PadDirection dir, int index, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPadCapability_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPadCapability_name, __cb);
        try
        {
            __result.__prepare(__getPadCapability_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            dir.__write(__os);
            __os.writeInt(index);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param capability 媒体流的详细描述.
     * 
     **/
    public int end_getPadCapability(Ice.StringHolder capability, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPadCapability_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        capability.value = __is.readString();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param list 上游节点的描述列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getSourceList(LinkListHolder list)
    {
        return getSourceList(list, null, false);
    }

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param list 上游节点的描述列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getSourceList(LinkListHolder list, java.util.Map<String, String> __ctx)
    {
        return getSourceList(list, __ctx, true);
    }

    private int
    getSourceList(LinkListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSourceList");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.getSourceList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getSourceList_name = "getSourceList";

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSourceList()
    {
        return begin_getSourceList(null, false, null);
    }

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSourceList(java.util.Map<String, String> __ctx)
    {
        return begin_getSourceList(__ctx, true, null);
    }

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSourceList(Ice.Callback __cb)
    {
        return begin_getSourceList(null, false, __cb);
    }

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSourceList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSourceList(__ctx, true, __cb);
    }

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSourceList(Callback_MediaNode_getSourceList __cb)
    {
        return begin_getSourceList(null, false, __cb);
    }

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSourceList(java.util.Map<String, String> __ctx, Callback_MediaNode_getSourceList __cb)
    {
        return begin_getSourceList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSourceList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSourceList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSourceList_name, __cb);
        try
        {
            __result.__prepare(__getSourceList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 上游节点的描述列表.
     * 
     **/
    public int end_getSourceList(LinkListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSourceList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = LinkListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param dir pad的输入输出类型.
     * @param list Pad列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    queryPadByDirection(PadDirection dir, PadListHolder list)
    {
        return queryPadByDirection(dir, list, null, false);
    }

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param dir pad的输入输出类型.
     * @param list Pad列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    queryPadByDirection(PadDirection dir, PadListHolder list, java.util.Map<String, String> __ctx)
    {
        return queryPadByDirection(dir, list, __ctx, true);
    }

    private int
    queryPadByDirection(PadDirection dir, PadListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("queryPadByDirection");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.queryPadByDirection(dir, list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __queryPadByDirection_name = "queryPadByDirection";

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的输入输出类型.
     **/
    public Ice.AsyncResult begin_queryPadByDirection(PadDirection dir)
    {
        return begin_queryPadByDirection(dir, null, false, null);
    }

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的输入输出类型.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryPadByDirection(PadDirection dir, java.util.Map<String, String> __ctx)
    {
        return begin_queryPadByDirection(dir, __ctx, true, null);
    }

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的输入输出类型.
     **/
    public Ice.AsyncResult begin_queryPadByDirection(PadDirection dir, Ice.Callback __cb)
    {
        return begin_queryPadByDirection(dir, null, false, __cb);
    }

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的输入输出类型.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryPadByDirection(PadDirection dir, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryPadByDirection(dir, __ctx, true, __cb);
    }

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的输入输出类型.
     **/
    public Ice.AsyncResult begin_queryPadByDirection(PadDirection dir, Callback_MediaNode_queryPadByDirection __cb)
    {
        return begin_queryPadByDirection(dir, null, false, __cb);
    }

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的输入输出类型.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryPadByDirection(PadDirection dir, java.util.Map<String, String> __ctx, Callback_MediaNode_queryPadByDirection __cb)
    {
        return begin_queryPadByDirection(dir, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryPadByDirection(PadDirection dir, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryPadByDirection_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryPadByDirection_name, __cb);
        try
        {
            __result.__prepare(__queryPadByDirection_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            dir.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list Pad列表.
     * 
     **/
    public int end_queryPadByDirection(PadListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __queryPadByDirection_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = PadListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param dir pad的类型.
     * @param indexList index列表.
     * @param list Pad列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    queryPadByIndex(PadDirection dir, int[] indexList, PadListHolder list)
    {
        return queryPadByIndex(dir, indexList, list, null, false);
    }

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param dir pad的类型.
     * @param indexList index列表.
     * @param list Pad列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    queryPadByIndex(PadDirection dir, int[] indexList, PadListHolder list, java.util.Map<String, String> __ctx)
    {
        return queryPadByIndex(dir, indexList, list, __ctx, true);
    }

    private int
    queryPadByIndex(PadDirection dir, int[] indexList, PadListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("queryPadByIndex");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.queryPadByIndex(dir, indexList, list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __queryPadByIndex_name = "queryPadByIndex";

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     **/
    public Ice.AsyncResult begin_queryPadByIndex(PadDirection dir, int[] indexList)
    {
        return begin_queryPadByIndex(dir, indexList, null, false, null);
    }

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryPadByIndex(PadDirection dir, int[] indexList, java.util.Map<String, String> __ctx)
    {
        return begin_queryPadByIndex(dir, indexList, __ctx, true, null);
    }

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     **/
    public Ice.AsyncResult begin_queryPadByIndex(PadDirection dir, int[] indexList, Ice.Callback __cb)
    {
        return begin_queryPadByIndex(dir, indexList, null, false, __cb);
    }

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryPadByIndex(PadDirection dir, int[] indexList, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryPadByIndex(dir, indexList, __ctx, true, __cb);
    }

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     **/
    public Ice.AsyncResult begin_queryPadByIndex(PadDirection dir, int[] indexList, Callback_MediaNode_queryPadByIndex __cb)
    {
        return begin_queryPadByIndex(dir, indexList, null, false, __cb);
    }

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_queryPadByIndex(PadDirection dir, int[] indexList, java.util.Map<String, String> __ctx, Callback_MediaNode_queryPadByIndex __cb)
    {
        return begin_queryPadByIndex(dir, indexList, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_queryPadByIndex(PadDirection dir, int[] indexList, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryPadByIndex_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __queryPadByIndex_name, __cb);
        try
        {
            __result.__prepare(__queryPadByIndex_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            dir.__write(__os);
            IntSeqHelper.write(__os, indexList);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list Pad列表.
     * 
     **/
    public int end_queryPadByIndex(PadListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __queryPadByIndex_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = PadListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    recvEvent(PadDirection dir, int index, byte[] event)
    {
        return recvEvent(dir, index, event, null, false);
    }

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    recvEvent(PadDirection dir, int index, byte[] event, java.util.Map<String, String> __ctx)
    {
        return recvEvent(dir, index, event, __ctx, true);
    }

    private int
    recvEvent(PadDirection dir, int index, byte[] event, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("recvEvent");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.recvEvent(dir, index, event, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __recvEvent_name = "recvEvent";

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvEvent(PadDirection dir, int index, byte[] event)
    {
        return begin_recvEvent(dir, index, event, null, false, null);
    }

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvEvent(PadDirection dir, int index, byte[] event, java.util.Map<String, String> __ctx)
    {
        return begin_recvEvent(dir, index, event, __ctx, true, null);
    }

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvEvent(PadDirection dir, int index, byte[] event, Ice.Callback __cb)
    {
        return begin_recvEvent(dir, index, event, null, false, __cb);
    }

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvEvent(PadDirection dir, int index, byte[] event, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_recvEvent(dir, index, event, __ctx, true, __cb);
    }

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvEvent(PadDirection dir, int index, byte[] event, Callback_MediaNode_recvEvent __cb)
    {
        return begin_recvEvent(dir, index, event, null, false, __cb);
    }

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvEvent(PadDirection dir, int index, byte[] event, java.util.Map<String, String> __ctx, Callback_MediaNode_recvEvent __cb)
    {
        return begin_recvEvent(dir, index, event, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_recvEvent(PadDirection dir, int index, byte[] event, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__recvEvent_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __recvEvent_name, __cb);
        try
        {
            __result.__prepare(__recvEvent_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            dir.__write(__os);
            __os.writeInt(index);
            ByteSeqHelper.write(__os, event);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_recvEvent(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __recvEvent_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 节点的接收数据函数。
     * 
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     * @param seq 传递的数据包，数据包的格式通过vmx_media::IMediaFrameBuffer的toVector()获取，同样，这种数据包可以通过vmx_media::IMediaFrameBuffer.fromVector()来解析.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public void
    recvMedia(int padIndex, byte[] seq)
    {
        recvMedia(padIndex, seq, null, false);
    }

    /**
     * 节点的接收数据函数。
     * 
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     * @param seq 传递的数据包，数据包的格式通过vmx_media::IMediaFrameBuffer的toVector()获取，同样，这种数据包可以通过vmx_media::IMediaFrameBuffer.fromVector()来解析.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public void
    recvMedia(int padIndex, byte[] seq, java.util.Map<String, String> __ctx)
    {
        recvMedia(padIndex, seq, __ctx, true);
    }

    private void
    recvMedia(int padIndex, byte[] seq, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                __del.recvMedia(padIndex, seq, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __recvMedia_name = "recvMedia";

    /**
     * 节点的接收数据函数。
     * 
     * @param __cb The callback object for the operation.
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     **/
    public Ice.AsyncResult begin_recvMedia(int padIndex, byte[] seq)
    {
        return begin_recvMedia(padIndex, seq, null, false, null);
    }

    /**
     * 节点的接收数据函数。
     * 
     * @param __cb The callback object for the operation.
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMedia(int padIndex, byte[] seq, java.util.Map<String, String> __ctx)
    {
        return begin_recvMedia(padIndex, seq, __ctx, true, null);
    }

    /**
     * 节点的接收数据函数。
     * 
     * @param __cb The callback object for the operation.
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     **/
    public Ice.AsyncResult begin_recvMedia(int padIndex, byte[] seq, Ice.Callback __cb)
    {
        return begin_recvMedia(padIndex, seq, null, false, __cb);
    }

    /**
     * 节点的接收数据函数。
     * 
     * @param __cb The callback object for the operation.
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMedia(int padIndex, byte[] seq, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_recvMedia(padIndex, seq, __ctx, true, __cb);
    }

    /**
     * 节点的接收数据函数。
     * 
     * @param __cb The callback object for the operation.
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     **/
    public Ice.AsyncResult begin_recvMedia(int padIndex, byte[] seq, Callback_MediaNode_recvMedia __cb)
    {
        return begin_recvMedia(padIndex, seq, null, false, __cb);
    }

    /**
     * 节点的接收数据函数。
     * 
     * @param __cb The callback object for the operation.
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMedia(int padIndex, byte[] seq, java.util.Map<String, String> __ctx, Callback_MediaNode_recvMedia __cb)
    {
        return begin_recvMedia(padIndex, seq, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_recvMedia(int padIndex, byte[] seq, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __recvMedia_name, __cb);
        try
        {
            __result.__prepare(__recvMedia_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(padIndex);
            ByteSeqHelper.write(__os, seq);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public void end_recvMedia(Ice.AsyncResult __result)
    {
        __end(__result, __recvMedia_name);
    }

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param dst 下游节点的ICE ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeDeliverDst(String dst)
    {
        return removeDeliverDst(dst, null, false);
    }

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param dst 下游节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeDeliverDst(String dst, java.util.Map<String, String> __ctx)
    {
        return removeDeliverDst(dst, __ctx, true);
    }

    private int
    removeDeliverDst(String dst, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeDeliverDst");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.removeDeliverDst(dst, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeDeliverDst_name = "removeDeliverDst";

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 下游节点的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_removeDeliverDst(String dst)
    {
        return begin_removeDeliverDst(dst, null, false, null);
    }

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 下游节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeDeliverDst(String dst, java.util.Map<String, String> __ctx)
    {
        return begin_removeDeliverDst(dst, __ctx, true, null);
    }

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 下游节点的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_removeDeliverDst(String dst, Ice.Callback __cb)
    {
        return begin_removeDeliverDst(dst, null, false, __cb);
    }

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 下游节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeDeliverDst(String dst, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeDeliverDst(dst, __ctx, true, __cb);
    }

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 下游节点的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_removeDeliverDst(String dst, Callback_MediaNode_removeDeliverDst __cb)
    {
        return begin_removeDeliverDst(dst, null, false, __cb);
    }

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 下游节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeDeliverDst(String dst, java.util.Map<String, String> __ctx, Callback_MediaNode_removeDeliverDst __cb)
    {
        return begin_removeDeliverDst(dst, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeDeliverDst(String dst, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeDeliverDst_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeDeliverDst_name, __cb);
        try
        {
            __result.__prepare(__removeDeliverDst_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(dst);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeDeliverDst(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeDeliverDst_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param dst 下游节点的ICE ID.
     * @param dstPadIndex 接收数据的节点的输入pad索引，如果为[InvalidPadIndex]则表示不指定.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex)
    {
        return removeDeliverDstEx(dst, dstPadIndex, srcPadIndex, null, false);
    }

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param dst 下游节点的ICE ID.
     * @param dstPadIndex 接收数据的节点的输入pad索引，如果为[InvalidPadIndex]则表示不指定.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx)
    {
        return removeDeliverDstEx(dst, dstPadIndex, srcPadIndex, __ctx, true);
    }

    private int
    removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeDeliverDstEx");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.removeDeliverDstEx(dst, dstPadIndex, srcPadIndex, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeDeliverDstEx_name = "removeDeliverDstEx";

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 下游节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     **/
    public Ice.AsyncResult begin_removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex)
    {
        return begin_removeDeliverDstEx(dst, dstPadIndex, srcPadIndex, null, false, null);
    }

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 下游节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx)
    {
        return begin_removeDeliverDstEx(dst, dstPadIndex, srcPadIndex, __ctx, true, null);
    }

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 下游节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     **/
    public Ice.AsyncResult begin_removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, Ice.Callback __cb)
    {
        return begin_removeDeliverDstEx(dst, dstPadIndex, srcPadIndex, null, false, __cb);
    }

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 下游节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeDeliverDstEx(dst, dstPadIndex, srcPadIndex, __ctx, true, __cb);
    }

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 下游节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     **/
    public Ice.AsyncResult begin_removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, Callback_MediaNode_removeDeliverDstEx __cb)
    {
        return begin_removeDeliverDstEx(dst, dstPadIndex, srcPadIndex, null, false, __cb);
    }

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param __cb The callback object for the operation.
     * @param dst 下游节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx, Callback_MediaNode_removeDeliverDstEx __cb)
    {
        return begin_removeDeliverDstEx(dst, dstPadIndex, srcPadIndex, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeDeliverDstEx_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeDeliverDstEx_name, __cb);
        try
        {
            __result.__prepare(__removeDeliverDstEx_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(dst);
            __os.writeInt(dstPadIndex);
            __os.writeInt(srcPadIndex);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeDeliverDstEx(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeDeliverDstEx_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourcePadIndex 上游节点的pad索引.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeSource(String sourceID, int sourcePadIndex, int dstPadIndex)
    {
        return removeSource(sourceID, sourcePadIndex, dstPadIndex, null, false);
    }

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourcePadIndex 上游节点的pad索引.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    removeSource(String sourceID, int sourcePadIndex, int dstPadIndex, java.util.Map<String, String> __ctx)
    {
        return removeSource(sourceID, sourcePadIndex, dstPadIndex, __ctx, true);
    }

    private int
    removeSource(String sourceID, int sourcePadIndex, int dstPadIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeSource");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.removeSource(sourceID, sourcePadIndex, dstPadIndex, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeSource_name = "removeSource";

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param __cb The callback object for the operation.
     * @param sourceID 上游节点的ID.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     **/
    public Ice.AsyncResult begin_removeSource(String sourceID, int sourcePadIndex, int dstPadIndex)
    {
        return begin_removeSource(sourceID, sourcePadIndex, dstPadIndex, null, false, null);
    }

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param __cb The callback object for the operation.
     * @param sourceID 上游节点的ID.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeSource(String sourceID, int sourcePadIndex, int dstPadIndex, java.util.Map<String, String> __ctx)
    {
        return begin_removeSource(sourceID, sourcePadIndex, dstPadIndex, __ctx, true, null);
    }

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param __cb The callback object for the operation.
     * @param sourceID 上游节点的ID.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     **/
    public Ice.AsyncResult begin_removeSource(String sourceID, int sourcePadIndex, int dstPadIndex, Ice.Callback __cb)
    {
        return begin_removeSource(sourceID, sourcePadIndex, dstPadIndex, null, false, __cb);
    }

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param __cb The callback object for the operation.
     * @param sourceID 上游节点的ID.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeSource(String sourceID, int sourcePadIndex, int dstPadIndex, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeSource(sourceID, sourcePadIndex, dstPadIndex, __ctx, true, __cb);
    }

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param __cb The callback object for the operation.
     * @param sourceID 上游节点的ID.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     **/
    public Ice.AsyncResult begin_removeSource(String sourceID, int sourcePadIndex, int dstPadIndex, Callback_MediaNode_removeSource __cb)
    {
        return begin_removeSource(sourceID, sourcePadIndex, dstPadIndex, null, false, __cb);
    }

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param __cb The callback object for the operation.
     * @param sourceID 上游节点的ID.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_removeSource(String sourceID, int sourcePadIndex, int dstPadIndex, java.util.Map<String, String> __ctx, Callback_MediaNode_removeSource __cb)
    {
        return begin_removeSource(sourceID, sourcePadIndex, dstPadIndex, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeSource(String sourceID, int sourcePadIndex, int dstPadIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeSource_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeSource_name, __cb);
        try
        {
            __result.__prepare(__removeSource_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(sourceID);
            __os.writeInt(sourcePadIndex);
            __os.writeInt(dstPadIndex);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeSource(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeSource_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param capability 媒体流的详细描述.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setPadCapability(PadDirection dir, int index, String capability)
    {
        return setPadCapability(dir, index, capability, null, false);
    }

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param capability 媒体流的详细描述.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setPadCapability(PadDirection dir, int index, String capability, java.util.Map<String, String> __ctx)
    {
        return setPadCapability(dir, index, capability, __ctx, true);
    }

    private int
    setPadCapability(PadDirection dir, int index, String capability, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPadCapability");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.setPadCapability(dir, index, capability, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setPadCapability_name = "setPadCapability";

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param capability 媒体流的详细描述.
     * 
     **/
    public Ice.AsyncResult begin_setPadCapability(PadDirection dir, int index, String capability)
    {
        return begin_setPadCapability(dir, index, capability, null, false, null);
    }

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param capability 媒体流的详细描述.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPadCapability(PadDirection dir, int index, String capability, java.util.Map<String, String> __ctx)
    {
        return begin_setPadCapability(dir, index, capability, __ctx, true, null);
    }

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param capability 媒体流的详细描述.
     * 
     **/
    public Ice.AsyncResult begin_setPadCapability(PadDirection dir, int index, String capability, Ice.Callback __cb)
    {
        return begin_setPadCapability(dir, index, capability, null, false, __cb);
    }

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param capability 媒体流的详细描述.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPadCapability(PadDirection dir, int index, String capability, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPadCapability(dir, index, capability, __ctx, true, __cb);
    }

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param capability 媒体流的详细描述.
     * 
     **/
    public Ice.AsyncResult begin_setPadCapability(PadDirection dir, int index, String capability, Callback_MediaNode_setPadCapability __cb)
    {
        return begin_setPadCapability(dir, index, capability, null, false, __cb);
    }

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param __cb The callback object for the operation.
     * @param dir pad的类型.
     * @param capability 媒体流的详细描述.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPadCapability(PadDirection dir, int index, String capability, java.util.Map<String, String> __ctx, Callback_MediaNode_setPadCapability __cb)
    {
        return begin_setPadCapability(dir, index, capability, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPadCapability(PadDirection dir, int index, String capability, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setPadCapability_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPadCapability_name, __cb);
        try
        {
            __result.__prepare(__setPadCapability_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            dir.__write(__os);
            __os.writeInt(index);
            __os.writeString(capability);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setPadCapability(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setPadCapability_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumMessageList(MsgDescListHolder msgList)
    {
        return enumMessageList(msgList, null, false);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumMessageList(MsgDescListHolder msgList, java.util.Map<String, String> __ctx)
    {
        return enumMessageList(msgList, __ctx, true);
    }

    private int
    enumMessageList(MsgDescListHolder msgList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumMessageList");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.enumMessageList(msgList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumMessageList_name = "enumMessageList";

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumMessageList()
    {
        return begin_enumMessageList(null, false, null);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx)
    {
        return begin_enumMessageList(__ctx, true, null);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumMessageList(Ice.Callback __cb)
    {
        return begin_enumMessageList(null, false, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumMessageList(__ctx, true, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumMessageList(Callback_VMXObject_enumMessageList __cb)
    {
        return begin_enumMessageList(null, false, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx, Callback_VMXObject_enumMessageList __cb)
    {
        return begin_enumMessageList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumMessageList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumMessageList_name, __cb);
        try
        {
            __result.__prepare(__enumMessageList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     **/
    public int end_enumMessageList(MsgDescListHolder msgList, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumMessageList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        msgList.value = MsgDescListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param info 属性信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumProperty(String name, PropertyInfoHolder info)
    {
        return enumProperty(name, info, null, false);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param info 属性信息
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumProperty(String name, PropertyInfoHolder info, java.util.Map<String, String> __ctx)
    {
        return enumProperty(name, info, __ctx, true);
    }

    private int
    enumProperty(String name, PropertyInfoHolder info, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumProperty");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.enumProperty(name, info, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumProperty_name = "enumProperty";

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_enumProperty(String name)
    {
        return begin_enumProperty(name, null, false, null);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx)
    {
        return begin_enumProperty(name, __ctx, true, null);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_enumProperty(String name, Ice.Callback __cb)
    {
        return begin_enumProperty(name, null, false, __cb);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumProperty(name, __ctx, true, __cb);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_enumProperty(String name, Callback_VMXObject_enumProperty __cb)
    {
        return begin_enumProperty(name, null, false, __cb);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx, Callback_VMXObject_enumProperty __cb)
    {
        return begin_enumProperty(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumProperty_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumProperty_name, __cb);
        try
        {
            __result.__prepare(__enumProperty_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param info 属性信息
     * 
     **/
    public int end_enumProperty(PropertyInfoHolder info, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumProperty_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        info.value = new PropertyInfo();
        info.value.__read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param list 属性信息列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumPropertyList(PropertyInfoListHolder list)
    {
        return enumPropertyList(list, null, false);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param list 属性信息列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumPropertyList(PropertyInfoListHolder list, java.util.Map<String, String> __ctx)
    {
        return enumPropertyList(list, __ctx, true);
    }

    private int
    enumPropertyList(PropertyInfoListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumPropertyList");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.enumPropertyList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumPropertyList_name = "enumPropertyList";

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPropertyList()
    {
        return begin_enumPropertyList(null, false, null);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx)
    {
        return begin_enumPropertyList(__ctx, true, null);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(Ice.Callback __cb)
    {
        return begin_enumPropertyList(null, false, __cb);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumPropertyList(__ctx, true, __cb);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(Callback_VMXObject_enumPropertyList __cb)
    {
        return begin_enumPropertyList(null, false, __cb);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx, Callback_VMXObject_enumPropertyList __cb)
    {
        return begin_enumPropertyList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumPropertyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumPropertyList_name, __cb);
        try
        {
            __result.__prepare(__enumPropertyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 属性信息列表
     * 
     **/
    public int end_enumPropertyList(PropertyInfoListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumPropertyList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = PropertyInfoListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @return 返回对象的ICE ID.
     * 
     **/
    public String
    getID()
    {
        return getID(null, false);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的ICE ID.
     * 
     **/
    public String
    getID(java.util.Map<String, String> __ctx)
    {
        return getID(__ctx, true);
    }

    private String
    getID(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getID");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.getID(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getID_name = "getID";

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getID()
    {
        return begin_getID(null, false, null);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx)
    {
        return begin_getID(__ctx, true, null);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getID(Ice.Callback __cb)
    {
        return begin_getID(null, false, __cb);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getID(__ctx, true, __cb);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getID(Callback_VMXObject_getID __cb)
    {
        return begin_getID(null, false, __cb);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, Callback_VMXObject_getID __cb)
    {
        return begin_getID(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getID_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getID_name, __cb);
        try
        {
            __result.__prepare(__getID_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的ICE ID.
     * 
     **/
    public String end_getID(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getID_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象名称.
     * 
     * @return 返回对象的名称.
     * 
     **/
    public String
    getName()
    {
        return getName(null, false);
    }

    /**
     * 获取对象名称.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的名称.
     * 
     **/
    public String
    getName(java.util.Map<String, String> __ctx)
    {
        return getName(__ctx, true);
    }

    private String
    getName(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getName");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.getName(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getName_name = "getName";

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getName()
    {
        return begin_getName(null, false, null);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx)
    {
        return begin_getName(__ctx, true, null);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getName(Ice.Callback __cb)
    {
        return begin_getName(null, false, __cb);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getName(__ctx, true, __cb);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getName(Callback_VMXObject_getName __cb)
    {
        return begin_getName(null, false, __cb);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Callback_VMXObject_getName __cb)
    {
        return begin_getName(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getName_name, __cb);
        try
        {
            __result.__prepare(__getName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的名称.
     * 
     **/
    public String end_getName(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getName_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象类型特征。
     * 
     * @return 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int
    getObjectType()
    {
        return getObjectType(null, false);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int
    getObjectType(java.util.Map<String, String> __ctx)
    {
        return getObjectType(__ctx, true);
    }

    private int
    getObjectType(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getObjectType");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.getObjectType(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getObjectType_name = "getObjectType";

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getObjectType()
    {
        return begin_getObjectType(null, false, null);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx)
    {
        return begin_getObjectType(__ctx, true, null);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getObjectType(Ice.Callback __cb)
    {
        return begin_getObjectType(null, false, __cb);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getObjectType(__ctx, true, __cb);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getObjectType(Callback_VMXObject_getObjectType __cb)
    {
        return begin_getObjectType(null, false, __cb);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx, Callback_VMXObject_getObjectType __cb)
    {
        return begin_getObjectType(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getObjectType_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getObjectType_name, __cb);
        try
        {
            __result.__prepare(__getObjectType_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int end_getObjectType(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getObjectType_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的所有者。
     * 
     * @return 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String
    getParent()
    {
        return getParent(null, false);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String
    getParent(java.util.Map<String, String> __ctx)
    {
        return getParent(__ctx, true);
    }

    private String
    getParent(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getParent");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.getParent(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getParent_name = "getParent";

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getParent()
    {
        return begin_getParent(null, false, null);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx)
    {
        return begin_getParent(__ctx, true, null);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getParent(Ice.Callback __cb)
    {
        return begin_getParent(null, false, __cb);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getParent(__ctx, true, __cb);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getParent(Callback_VMXObject_getParent __cb)
    {
        return begin_getParent(null, false, __cb);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx, Callback_VMXObject_getParent __cb)
    {
        return begin_getParent(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getParent_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getParent_name, __cb);
        try
        {
            __result.__prepare(__getParent_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String end_getParent(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getParent_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getProperty(String name, Ice.StringHolder value)
    {
        return getProperty(name, value, null, false);
    }

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getProperty(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx)
    {
        return getProperty(name, value, __ctx, true);
    }

    private int
    getProperty(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getProperty");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.getProperty(name, value, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getProperty_name = "getProperty";

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_getProperty(String name)
    {
        return begin_getProperty(name, null, false, null);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx)
    {
        return begin_getProperty(name, __ctx, true, null);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_getProperty(String name, Ice.Callback __cb)
    {
        return begin_getProperty(name, null, false, __cb);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getProperty(name, __ctx, true, __cb);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_getProperty(String name, Callback_VMXObject_getProperty __cb)
    {
        return begin_getProperty(name, null, false, __cb);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx, Callback_VMXObject_getProperty __cb)
    {
        return begin_getProperty(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getProperty_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getProperty_name, __cb);
        try
        {
            __result.__prepare(__getProperty_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param value 属性值
     * 
     **/
    public int end_getProperty(Ice.StringHolder value, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getProperty_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        value.value = __is.readString();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getPropertyList(PropertyListHolder list)
    {
        return getPropertyList(list, null, false);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getPropertyList(PropertyListHolder list, java.util.Map<String, String> __ctx)
    {
        return getPropertyList(list, __ctx, true);
    }

    private int
    getPropertyList(PropertyListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPropertyList");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.getPropertyList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getPropertyList_name = "getPropertyList";

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPropertyList()
    {
        return begin_getPropertyList(null, false, null);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx)
    {
        return begin_getPropertyList(__ctx, true, null);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPropertyList(Ice.Callback __cb)
    {
        return begin_getPropertyList(null, false, __cb);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPropertyList(__ctx, true, __cb);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPropertyList(Callback_VMXObject_getPropertyList __cb)
    {
        return begin_getPropertyList(null, false, __cb);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx, Callback_VMXObject_getPropertyList __cb)
    {
        return begin_getPropertyList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPropertyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPropertyList_name, __cb);
        try
        {
            __result.__prepare(__getPropertyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     **/
    public int end_getPropertyList(PropertyListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPropertyList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = PropertyListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getState(ObjectStateHolder state)
    {
        return getState(state, null, false);
    }

    /**
     * 获取对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getState(ObjectStateHolder state, java.util.Map<String, String> __ctx)
    {
        return getState(state, __ctx, true);
    }

    private int
    getState(ObjectStateHolder state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getState");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.getState(state, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getState_name = "getState";

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getState()
    {
        return begin_getState(null, false, null);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx)
    {
        return begin_getState(__ctx, true, null);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getState(Ice.Callback __cb)
    {
        return begin_getState(null, false, __cb);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getState(__ctx, true, __cb);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getState(Callback_VMXObject_getState __cb)
    {
        return begin_getState(null, false, __cb);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Callback_VMXObject_getState __cb)
    {
        return begin_getState(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getState_name, __cb);
        try
        {
            __result.__prepare(__getState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param state 状态值.
     * 
     **/
    public int end_getState(ObjectStateHolder state, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getState_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        state.value = ObjectState.__read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param info 格式化的统计信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getStatistics(StatisticsListHolder info)
    {
        return getStatistics(info, null, false);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param info 格式化的统计信息
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getStatistics(StatisticsListHolder info, java.util.Map<String, String> __ctx)
    {
        return getStatistics(info, __ctx, true);
    }

    private int
    getStatistics(StatisticsListHolder info, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStatistics");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.getStatistics(info, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getStatistics_name = "getStatistics";

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatistics()
    {
        return begin_getStatistics(null, false, null);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx)
    {
        return begin_getStatistics(__ctx, true, null);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatistics(Ice.Callback __cb)
    {
        return begin_getStatistics(null, false, __cb);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getStatistics(__ctx, true, __cb);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatistics(Callback_VMXObject_getStatistics __cb)
    {
        return begin_getStatistics(null, false, __cb);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx, Callback_VMXObject_getStatistics __cb)
    {
        return begin_getStatistics(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getStatistics_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getStatistics_name, __cb);
        try
        {
            __result.__prepare(__getStatistics_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param info 格式化的统计信息
     * 
     **/
    public int end_getStatistics(StatisticsListHolder info, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getStatistics_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        info.value = StatisticsListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    recvMessage(byte[] msg)
    {
        return recvMessage(msg, null, false);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    recvMessage(byte[] msg, java.util.Map<String, String> __ctx)
    {
        return recvMessage(msg, __ctx, true);
    }

    private int
    recvMessage(byte[] msg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("recvMessage");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.recvMessage(msg, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __recvMessage_name = "recvMessage";

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg)
    {
        return begin_recvMessage(msg, null, false, null);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx)
    {
        return begin_recvMessage(msg, __ctx, true, null);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, Ice.Callback __cb)
    {
        return begin_recvMessage(msg, null, false, __cb);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_recvMessage(msg, __ctx, true, __cb);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, Callback_VMXObject_recvMessage __cb)
    {
        return begin_recvMessage(msg, null, false, __cb);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx, Callback_VMXObject_recvMessage __cb)
    {
        return begin_recvMessage(msg, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__recvMessage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __recvMessage_name, __cb);
        try
        {
            __result.__prepare(__recvMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            ByteSeqHelper.write(__os, msg);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_recvMessage(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __recvMessage_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsg(int msgID, String ObjectID)
    {
        return registerMsg(msgID, ObjectID, null, false);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return registerMsg(msgID, ObjectID, __ctx, true);
    }

    private int
    registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("registerMsg");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.registerMsg(msgID, ObjectID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __registerMsg_name = "registerMsg";

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID)
    {
        return begin_registerMsg(msgID, ObjectID, null, false, null);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return begin_registerMsg(msgID, ObjectID, __ctx, true, null);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, Ice.Callback __cb)
    {
        return begin_registerMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_registerMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, Callback_VMXObject_registerMsg __cb)
    {
        return begin_registerMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Callback_VMXObject_registerMsg __cb)
    {
        return begin_registerMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__registerMsg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __registerMsg_name, __cb);
        try
        {
            __result.__prepare(__registerMsg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_registerMsg(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __registerMsg_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return registerMsgWithLocator(msgID, ObjectID, locator, null, false);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true);
    }

    private int
    registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("registerMsgWithLocator");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.registerMsgWithLocator(msgID, ObjectID, locator, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __registerMsgWithLocator_name = "registerMsgWithLocator";

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, null, false, null);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true, null);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, Ice.Callback __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, Callback_VMXObject_registerMsgWithLocator __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Callback_VMXObject_registerMsgWithLocator __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__registerMsgWithLocator_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __registerMsgWithLocator_name, __cb);
        try
        {
            __result.__prepare(__registerMsgWithLocator_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.writeString(locator);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_registerMsgWithLocator(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __registerMsgWithLocator_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setParent(String parent)
    {
        return setParent(parent, null, false);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setParent(String parent, java.util.Map<String, String> __ctx)
    {
        return setParent(parent, __ctx, true);
    }

    private int
    setParent(String parent, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setParent");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.setParent(parent, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setParent_name = "setParent";

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_setParent(String parent)
    {
        return begin_setParent(parent, null, false, null);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx)
    {
        return begin_setParent(parent, __ctx, true, null);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_setParent(String parent, Ice.Callback __cb)
    {
        return begin_setParent(parent, null, false, __cb);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setParent(parent, __ctx, true, __cb);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_setParent(String parent, Callback_VMXObject_setParent __cb)
    {
        return begin_setParent(parent, null, false, __cb);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx, Callback_VMXObject_setParent __cb)
    {
        return begin_setParent(parent, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setParent_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setParent_name, __cb);
        try
        {
            __result.__prepare(__setParent_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(parent);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setParent(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setParent_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setProperty(String name, String value)
    {
        return setProperty(name, value, null, false);
    }

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setProperty(String name, String value, java.util.Map<String, String> __ctx)
    {
        return setProperty(name, value, __ctx, true);
    }

    private int
    setProperty(String name, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setProperty");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.setProperty(name, value, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setProperty_name = "setProperty";

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value)
    {
        return begin_setProperty(name, value, null, false, null);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx)
    {
        return begin_setProperty(name, value, __ctx, true, null);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, Ice.Callback __cb)
    {
        return begin_setProperty(name, value, null, false, __cb);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setProperty(name, value, __ctx, true, __cb);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, Callback_VMXObject_setProperty __cb)
    {
        return begin_setProperty(name, value, null, false, __cb);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx, Callback_VMXObject_setProperty __cb)
    {
        return begin_setProperty(name, value, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setProperty_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setProperty_name, __cb);
        try
        {
            __result.__prepare(__setProperty_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.writeString(value);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setProperty(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setProperty_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list)
    {
        return setPropertyList(list, null, false);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx)
    {
        return setPropertyList(list, __ctx, true);
    }

    private int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPropertyList");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.setPropertyList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setPropertyList_name = "setPropertyList";

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list)
    {
        return begin_setPropertyList(list, null, false, null);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx)
    {
        return begin_setPropertyList(list, __ctx, true, null);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, Ice.Callback __cb)
    {
        return begin_setPropertyList(list, null, false, __cb);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPropertyList(list, __ctx, true, __cb);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, Callback_VMXObject_setPropertyList __cb)
    {
        return begin_setPropertyList(list, null, false, __cb);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, Callback_VMXObject_setPropertyList __cb)
    {
        return begin_setPropertyList(list, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setPropertyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPropertyList_name, __cb);
        try
        {
            __result.__prepare(__setPropertyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            PropertyListHelper.write(__os, list);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setPropertyList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setPropertyList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setState(ObjectState state)
    {
        return setState(state, null, false);
    }

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setState(ObjectState state, java.util.Map<String, String> __ctx)
    {
        return setState(state, __ctx, true);
    }

    private int
    setState(ObjectState state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setState");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.setState(state, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setState_name = "setState";

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     **/
    public Ice.AsyncResult begin_setState(ObjectState state)
    {
        return begin_setState(state, null, false, null);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, java.util.Map<String, String> __ctx)
    {
        return begin_setState(state, __ctx, true, null);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, Ice.Callback __cb)
    {
        return begin_setState(state, null, false, __cb);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setState(state, __ctx, true, __cb);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, Callback_VMXObject_setState __cb)
    {
        return begin_setState(state, null, false, __cb);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, java.util.Map<String, String> __ctx, Callback_VMXObject_setState __cb)
    {
        return begin_setState(state, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setState(ObjectState state, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setState_name, __cb);
        try
        {
            __result.__prepare(__setState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            state.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setState(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setState_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要取消接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsg(int msgID, String ObjectID)
    {
        return unregisterMsg(msgID, ObjectID, null, false);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要取消接收消息的对象的ICE ID。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return unregisterMsg(msgID, ObjectID, __ctx, true);
    }

    private int
    unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("unregisterMsg");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.unregisterMsg(msgID, ObjectID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __unregisterMsg_name = "unregisterMsg";

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID)
    {
        return begin_unregisterMsg(msgID, ObjectID, null, false, null);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return begin_unregisterMsg(msgID, ObjectID, __ctx, true, null);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, Ice.Callback __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, Callback_VMXObject_unregisterMsg __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Callback_VMXObject_unregisterMsg __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__unregisterMsg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __unregisterMsg_name, __cb);
        try
        {
            __result.__prepare(__unregisterMsg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_unregisterMsg(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __unregisterMsg_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return unregisterMsgWithLocator(msgID, ObjectID, locator, null, false);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true);
    }

    private int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("unregisterMsgWithLocator");
                __delBase = __getDelegate(false);
                _MediaNodeDel __del = (_MediaNodeDel)__delBase;
                return __del.unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __unregisterMsgWithLocator_name = "unregisterMsgWithLocator";

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, null, false, null);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true, null);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, Ice.Callback __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, Callback_VMXObject_unregisterMsgWithLocator __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Callback_VMXObject_unregisterMsgWithLocator __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__unregisterMsgWithLocator_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __unregisterMsgWithLocator_name, __cb);
        try
        {
            __result.__prepare(__unregisterMsgWithLocator_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.writeString(locator);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_unregisterMsgWithLocator(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __unregisterMsgWithLocator_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public static MediaNodePrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        MediaNodePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MediaNodePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    MediaNodePrxHelper __h = new MediaNodePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MediaNodePrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        MediaNodePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MediaNodePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    MediaNodePrxHelper __h = new MediaNodePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MediaNodePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MediaNodePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    MediaNodePrxHelper __h = new MediaNodePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MediaNodePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        MediaNodePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    MediaNodePrxHelper __h = new MediaNodePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MediaNodePrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        MediaNodePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MediaNodePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                MediaNodePrxHelper __h = new MediaNodePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static MediaNodePrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MediaNodePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            MediaNodePrxHelper __h = new MediaNodePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::vmxICE::MediaNode",
        "::vmxICE::VMXObject"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _MediaNodeDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _MediaNodeDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, MediaNodePrx v)
    {
        __os.writeProxy(v);
    }

    public static MediaNodePrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MediaNodePrxHelper result = new MediaNodePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
