// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `VMXSystemPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package vmxICE;

/**
 * [VMXSystem]是mmap6框架中对业务层系统的定义，描述了每个基于mmap6框架的系统的通用接口，如重置系统，设置配置项及系统之间的交互等，<b>接口定义还未完成</b>。
 **/
public final class VMXSystemPrxHelper extends Ice.ObjectPrxHelperBase implements VMXSystemPrx
{
    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumMessageList(MsgDescListHolder msgList)
    {
        return enumMessageList(msgList, null, false);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumMessageList(MsgDescListHolder msgList, java.util.Map<String, String> __ctx)
    {
        return enumMessageList(msgList, __ctx, true);
    }

    private int
    enumMessageList(MsgDescListHolder msgList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumMessageList");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.enumMessageList(msgList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumMessageList_name = "enumMessageList";

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumMessageList()
    {
        return begin_enumMessageList(null, false, null);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx)
    {
        return begin_enumMessageList(__ctx, true, null);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumMessageList(Ice.Callback __cb)
    {
        return begin_enumMessageList(null, false, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumMessageList(__ctx, true, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumMessageList(Callback_VMXObject_enumMessageList __cb)
    {
        return begin_enumMessageList(null, false, __cb);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx, Callback_VMXObject_enumMessageList __cb)
    {
        return begin_enumMessageList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumMessageList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumMessageList_name, __cb);
        try
        {
            __result.__prepare(__enumMessageList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     **/
    public int end_enumMessageList(MsgDescListHolder msgList, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumMessageList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        msgList.value = MsgDescListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param info 属性信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumProperty(String name, PropertyInfoHolder info)
    {
        return enumProperty(name, info, null, false);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param info 属性信息
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumProperty(String name, PropertyInfoHolder info, java.util.Map<String, String> __ctx)
    {
        return enumProperty(name, info, __ctx, true);
    }

    private int
    enumProperty(String name, PropertyInfoHolder info, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumProperty");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.enumProperty(name, info, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumProperty_name = "enumProperty";

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_enumProperty(String name)
    {
        return begin_enumProperty(name, null, false, null);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx)
    {
        return begin_enumProperty(name, __ctx, true, null);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_enumProperty(String name, Ice.Callback __cb)
    {
        return begin_enumProperty(name, null, false, __cb);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumProperty(name, __ctx, true, __cb);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_enumProperty(String name, Callback_VMXObject_enumProperty __cb)
    {
        return begin_enumProperty(name, null, false, __cb);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx, Callback_VMXObject_enumProperty __cb)
    {
        return begin_enumProperty(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumProperty_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumProperty_name, __cb);
        try
        {
            __result.__prepare(__enumProperty_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param info 属性信息
     * 
     **/
    public int end_enumProperty(PropertyInfoHolder info, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumProperty_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        info.value = new PropertyInfo();
        info.value.__read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param list 属性信息列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumPropertyList(PropertyInfoListHolder list)
    {
        return enumPropertyList(list, null, false);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param list 属性信息列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    enumPropertyList(PropertyInfoListHolder list, java.util.Map<String, String> __ctx)
    {
        return enumPropertyList(list, __ctx, true);
    }

    private int
    enumPropertyList(PropertyInfoListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("enumPropertyList");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.enumPropertyList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __enumPropertyList_name = "enumPropertyList";

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPropertyList()
    {
        return begin_enumPropertyList(null, false, null);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx)
    {
        return begin_enumPropertyList(__ctx, true, null);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(Ice.Callback __cb)
    {
        return begin_enumPropertyList(null, false, __cb);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_enumPropertyList(__ctx, true, __cb);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(Callback_VMXObject_enumPropertyList __cb)
    {
        return begin_enumPropertyList(null, false, __cb);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx, Callback_VMXObject_enumPropertyList __cb)
    {
        return begin_enumPropertyList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__enumPropertyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __enumPropertyList_name, __cb);
        try
        {
            __result.__prepare(__enumPropertyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 属性信息列表
     * 
     **/
    public int end_enumPropertyList(PropertyInfoListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __enumPropertyList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = PropertyInfoListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @return 返回对象的ICE ID.
     * 
     **/
    public String
    getID()
    {
        return getID(null, false);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的ICE ID.
     * 
     **/
    public String
    getID(java.util.Map<String, String> __ctx)
    {
        return getID(__ctx, true);
    }

    private String
    getID(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getID");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.getID(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getID_name = "getID";

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getID()
    {
        return begin_getID(null, false, null);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx)
    {
        return begin_getID(__ctx, true, null);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getID(Ice.Callback __cb)
    {
        return begin_getID(null, false, __cb);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getID(__ctx, true, __cb);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getID(Callback_VMXObject_getID __cb)
    {
        return begin_getID(null, false, __cb);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, Callback_VMXObject_getID __cb)
    {
        return begin_getID(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getID_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getID_name, __cb);
        try
        {
            __result.__prepare(__getID_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的ICE ID.
     * 
     **/
    public String end_getID(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getID_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象名称.
     * 
     * @return 返回对象的名称.
     * 
     **/
    public String
    getName()
    {
        return getName(null, false);
    }

    /**
     * 获取对象名称.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的名称.
     * 
     **/
    public String
    getName(java.util.Map<String, String> __ctx)
    {
        return getName(__ctx, true);
    }

    private String
    getName(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getName");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.getName(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getName_name = "getName";

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getName()
    {
        return begin_getName(null, false, null);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx)
    {
        return begin_getName(__ctx, true, null);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getName(Ice.Callback __cb)
    {
        return begin_getName(null, false, __cb);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getName(__ctx, true, __cb);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getName(Callback_VMXObject_getName __cb)
    {
        return begin_getName(null, false, __cb);
    }

    /**
     * 获取对象名称.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Callback_VMXObject_getName __cb)
    {
        return begin_getName(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getName_name, __cb);
        try
        {
            __result.__prepare(__getName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的名称.
     * 
     **/
    public String end_getName(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getName_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象类型特征。
     * 
     * @return 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int
    getObjectType()
    {
        return getObjectType(null, false);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int
    getObjectType(java.util.Map<String, String> __ctx)
    {
        return getObjectType(__ctx, true);
    }

    private int
    getObjectType(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getObjectType");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.getObjectType(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getObjectType_name = "getObjectType";

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getObjectType()
    {
        return begin_getObjectType(null, false, null);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx)
    {
        return begin_getObjectType(__ctx, true, null);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getObjectType(Ice.Callback __cb)
    {
        return begin_getObjectType(null, false, __cb);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getObjectType(__ctx, true, __cb);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getObjectType(Callback_VMXObject_getObjectType __cb)
    {
        return begin_getObjectType(null, false, __cb);
    }

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx, Callback_VMXObject_getObjectType __cb)
    {
        return begin_getObjectType(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getObjectType_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getObjectType_name, __cb);
        try
        {
            __result.__prepare(__getObjectType_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int end_getObjectType(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getObjectType_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的所有者。
     * 
     * @return 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String
    getParent()
    {
        return getParent(null, false);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String
    getParent(java.util.Map<String, String> __ctx)
    {
        return getParent(__ctx, true);
    }

    private String
    getParent(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getParent");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.getParent(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getParent_name = "getParent";

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getParent()
    {
        return begin_getParent(null, false, null);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx)
    {
        return begin_getParent(__ctx, true, null);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getParent(Ice.Callback __cb)
    {
        return begin_getParent(null, false, __cb);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getParent(__ctx, true, __cb);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getParent(Callback_VMXObject_getParent __cb)
    {
        return begin_getParent(null, false, __cb);
    }

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx, Callback_VMXObject_getParent __cb)
    {
        return begin_getParent(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getParent_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getParent_name, __cb);
        try
        {
            __result.__prepare(__getParent_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String end_getParent(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getParent_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getProperty(String name, Ice.StringHolder value)
    {
        return getProperty(name, value, null, false);
    }

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getProperty(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx)
    {
        return getProperty(name, value, __ctx, true);
    }

    private int
    getProperty(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getProperty");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.getProperty(name, value, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getProperty_name = "getProperty";

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_getProperty(String name)
    {
        return begin_getProperty(name, null, false, null);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx)
    {
        return begin_getProperty(name, __ctx, true, null);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_getProperty(String name, Ice.Callback __cb)
    {
        return begin_getProperty(name, null, false, __cb);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getProperty(name, __ctx, true, __cb);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_getProperty(String name, Callback_VMXObject_getProperty __cb)
    {
        return begin_getProperty(name, null, false, __cb);
    }

    /**
     * 获取属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx, Callback_VMXObject_getProperty __cb)
    {
        return begin_getProperty(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getProperty_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getProperty_name, __cb);
        try
        {
            __result.__prepare(__getProperty_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param value 属性值
     * 
     **/
    public int end_getProperty(Ice.StringHolder value, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getProperty_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        value.value = __is.readString();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getPropertyList(PropertyListHolder list)
    {
        return getPropertyList(list, null, false);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getPropertyList(PropertyListHolder list, java.util.Map<String, String> __ctx)
    {
        return getPropertyList(list, __ctx, true);
    }

    private int
    getPropertyList(PropertyListHolder list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPropertyList");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.getPropertyList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getPropertyList_name = "getPropertyList";

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPropertyList()
    {
        return begin_getPropertyList(null, false, null);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx)
    {
        return begin_getPropertyList(__ctx, true, null);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPropertyList(Ice.Callback __cb)
    {
        return begin_getPropertyList(null, false, __cb);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPropertyList(__ctx, true, __cb);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getPropertyList(Callback_VMXObject_getPropertyList __cb)
    {
        return begin_getPropertyList(null, false, __cb);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx, Callback_VMXObject_getPropertyList __cb)
    {
        return begin_getPropertyList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPropertyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPropertyList_name, __cb);
        try
        {
            __result.__prepare(__getPropertyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     **/
    public int end_getPropertyList(PropertyListHolder list, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPropertyList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        list.value = PropertyListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getState(ObjectStateHolder state)
    {
        return getState(state, null, false);
    }

    /**
     * 获取对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getState(ObjectStateHolder state, java.util.Map<String, String> __ctx)
    {
        return getState(state, __ctx, true);
    }

    private int
    getState(ObjectStateHolder state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getState");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.getState(state, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getState_name = "getState";

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getState()
    {
        return begin_getState(null, false, null);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx)
    {
        return begin_getState(__ctx, true, null);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getState(Ice.Callback __cb)
    {
        return begin_getState(null, false, __cb);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getState(__ctx, true, __cb);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getState(Callback_VMXObject_getState __cb)
    {
        return begin_getState(null, false, __cb);
    }

    /**
     * 获取对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Callback_VMXObject_getState __cb)
    {
        return begin_getState(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getState_name, __cb);
        try
        {
            __result.__prepare(__getState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param state 状态值.
     * 
     **/
    public int end_getState(ObjectStateHolder state, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getState_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        state.value = ObjectState.__read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param info 格式化的统计信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getStatistics(StatisticsListHolder info)
    {
        return getStatistics(info, null, false);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param info 格式化的统计信息
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getStatistics(StatisticsListHolder info, java.util.Map<String, String> __ctx)
    {
        return getStatistics(info, __ctx, true);
    }

    private int
    getStatistics(StatisticsListHolder info, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStatistics");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.getStatistics(info, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getStatistics_name = "getStatistics";

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatistics()
    {
        return begin_getStatistics(null, false, null);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx)
    {
        return begin_getStatistics(__ctx, true, null);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatistics(Ice.Callback __cb)
    {
        return begin_getStatistics(null, false, __cb);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getStatistics(__ctx, true, __cb);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatistics(Callback_VMXObject_getStatistics __cb)
    {
        return begin_getStatistics(null, false, __cb);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx, Callback_VMXObject_getStatistics __cb)
    {
        return begin_getStatistics(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getStatistics_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getStatistics_name, __cb);
        try
        {
            __result.__prepare(__getStatistics_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param info 格式化的统计信息
     * 
     **/
    public int end_getStatistics(StatisticsListHolder info, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getStatistics_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        info.value = StatisticsListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    recvMessage(byte[] msg)
    {
        return recvMessage(msg, null, false);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    recvMessage(byte[] msg, java.util.Map<String, String> __ctx)
    {
        return recvMessage(msg, __ctx, true);
    }

    private int
    recvMessage(byte[] msg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("recvMessage");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.recvMessage(msg, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __recvMessage_name = "recvMessage";

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg)
    {
        return begin_recvMessage(msg, null, false, null);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx)
    {
        return begin_recvMessage(msg, __ctx, true, null);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, Ice.Callback __cb)
    {
        return begin_recvMessage(msg, null, false, __cb);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_recvMessage(msg, __ctx, true, __cb);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, Callback_VMXObject_recvMessage __cb)
    {
        return begin_recvMessage(msg, null, false, __cb);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __cb The callback object for the operation.
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx, Callback_VMXObject_recvMessage __cb)
    {
        return begin_recvMessage(msg, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__recvMessage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __recvMessage_name, __cb);
        try
        {
            __result.__prepare(__recvMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            ByteSeqHelper.write(__os, msg);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_recvMessage(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __recvMessage_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsg(int msgID, String ObjectID)
    {
        return registerMsg(msgID, ObjectID, null, false);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return registerMsg(msgID, ObjectID, __ctx, true);
    }

    private int
    registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("registerMsg");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.registerMsg(msgID, ObjectID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __registerMsg_name = "registerMsg";

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID)
    {
        return begin_registerMsg(msgID, ObjectID, null, false, null);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return begin_registerMsg(msgID, ObjectID, __ctx, true, null);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, Ice.Callback __cb)
    {
        return begin_registerMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_registerMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, Callback_VMXObject_registerMsg __cb)
    {
        return begin_registerMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Callback_VMXObject_registerMsg __cb)
    {
        return begin_registerMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__registerMsg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __registerMsg_name, __cb);
        try
        {
            __result.__prepare(__registerMsg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_registerMsg(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __registerMsg_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return registerMsgWithLocator(msgID, ObjectID, locator, null, false);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true);
    }

    private int
    registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("registerMsgWithLocator");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.registerMsgWithLocator(msgID, ObjectID, locator, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __registerMsgWithLocator_name = "registerMsgWithLocator";

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, null, false, null);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true, null);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, Ice.Callback __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, Callback_VMXObject_registerMsgWithLocator __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Callback_VMXObject_registerMsgWithLocator __cb)
    {
        return begin_registerMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__registerMsgWithLocator_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __registerMsgWithLocator_name, __cb);
        try
        {
            __result.__prepare(__registerMsgWithLocator_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.writeString(locator);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_registerMsgWithLocator(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __registerMsgWithLocator_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setParent(String parent)
    {
        return setParent(parent, null, false);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setParent(String parent, java.util.Map<String, String> __ctx)
    {
        return setParent(parent, __ctx, true);
    }

    private int
    setParent(String parent, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setParent");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.setParent(parent, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setParent_name = "setParent";

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_setParent(String parent)
    {
        return begin_setParent(parent, null, false, null);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx)
    {
        return begin_setParent(parent, __ctx, true, null);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_setParent(String parent, Ice.Callback __cb)
    {
        return begin_setParent(parent, null, false, __cb);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setParent(parent, __ctx, true, __cb);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     **/
    public Ice.AsyncResult begin_setParent(String parent, Callback_VMXObject_setParent __cb)
    {
        return begin_setParent(parent, null, false, __cb);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __cb The callback object for the operation.
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx, Callback_VMXObject_setParent __cb)
    {
        return begin_setParent(parent, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setParent_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setParent_name, __cb);
        try
        {
            __result.__prepare(__setParent_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(parent);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setParent(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setParent_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setProperty(String name, String value)
    {
        return setProperty(name, value, null, false);
    }

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setProperty(String name, String value, java.util.Map<String, String> __ctx)
    {
        return setProperty(name, value, __ctx, true);
    }

    private int
    setProperty(String name, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setProperty");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.setProperty(name, value, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setProperty_name = "setProperty";

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value)
    {
        return begin_setProperty(name, value, null, false, null);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx)
    {
        return begin_setProperty(name, value, __ctx, true, null);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, Ice.Callback __cb)
    {
        return begin_setProperty(name, value, null, false, __cb);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setProperty(name, value, __ctx, true, __cb);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, Callback_VMXObject_setProperty __cb)
    {
        return begin_setProperty(name, value, null, false, __cb);
    }

    /**
     * 设置属性值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx, Callback_VMXObject_setProperty __cb)
    {
        return begin_setProperty(name, value, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setProperty_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setProperty_name, __cb);
        try
        {
            __result.__prepare(__setProperty_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.writeString(value);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setProperty(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setProperty_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list)
    {
        return setPropertyList(list, null, false);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx)
    {
        return setPropertyList(list, __ctx, true);
    }

    private int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setPropertyList");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.setPropertyList(list, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setPropertyList_name = "setPropertyList";

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list)
    {
        return begin_setPropertyList(list, null, false, null);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx)
    {
        return begin_setPropertyList(list, __ctx, true, null);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, Ice.Callback __cb)
    {
        return begin_setPropertyList(list, null, false, __cb);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPropertyList(list, __ctx, true, __cb);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, Callback_VMXObject_setPropertyList __cb)
    {
        return begin_setPropertyList(list, null, false, __cb);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __cb The callback object for the operation.
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, Callback_VMXObject_setPropertyList __cb)
    {
        return begin_setPropertyList(list, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setPropertyList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPropertyList_name, __cb);
        try
        {
            __result.__prepare(__setPropertyList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            PropertyListHelper.write(__os, list);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setPropertyList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setPropertyList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setState(ObjectState state)
    {
        return setState(state, null, false);
    }

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setState(ObjectState state, java.util.Map<String, String> __ctx)
    {
        return setState(state, __ctx, true);
    }

    private int
    setState(ObjectState state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setState");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.setState(state, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setState_name = "setState";

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     **/
    public Ice.AsyncResult begin_setState(ObjectState state)
    {
        return begin_setState(state, null, false, null);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, java.util.Map<String, String> __ctx)
    {
        return begin_setState(state, __ctx, true, null);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, Ice.Callback __cb)
    {
        return begin_setState(state, null, false, __cb);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setState(state, __ctx, true, __cb);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, Callback_VMXObject_setState __cb)
    {
        return begin_setState(state, null, false, __cb);
    }

    /**
     * 设置对象的状态。
     * 
     * @param __cb The callback object for the operation.
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, java.util.Map<String, String> __ctx, Callback_VMXObject_setState __cb)
    {
        return begin_setState(state, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setState(ObjectState state, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setState_name, __cb);
        try
        {
            __result.__prepare(__setState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            state.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setState(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setState_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要取消接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsg(int msgID, String ObjectID)
    {
        return unregisterMsg(msgID, ObjectID, null, false);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要取消接收消息的对象的ICE ID。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return unregisterMsg(msgID, ObjectID, __ctx, true);
    }

    private int
    unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("unregisterMsg");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.unregisterMsg(msgID, ObjectID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __unregisterMsg_name = "unregisterMsg";

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID)
    {
        return begin_unregisterMsg(msgID, ObjectID, null, false, null);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx)
    {
        return begin_unregisterMsg(msgID, ObjectID, __ctx, true, null);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, Ice.Callback __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, Callback_VMXObject_unregisterMsg __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, null, false, __cb);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Callback_VMXObject_unregisterMsg __cb)
    {
        return begin_unregisterMsg(msgID, ObjectID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__unregisterMsg_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __unregisterMsg_name, __cb);
        try
        {
            __result.__prepare(__unregisterMsg_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_unregisterMsg(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __unregisterMsg_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return unregisterMsgWithLocator(msgID, ObjectID, locator, null, false);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true);
    }

    private int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("unregisterMsgWithLocator");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __unregisterMsgWithLocator_name = "unregisterMsgWithLocator";

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, null, false, null);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true, null);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, Ice.Callback __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, Callback_VMXObject_unregisterMsgWithLocator __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, null, false, __cb);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __cb The callback object for the operation.
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Callback_VMXObject_unregisterMsgWithLocator __cb)
    {
        return begin_unregisterMsgWithLocator(msgID, ObjectID, locator, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__unregisterMsgWithLocator_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __unregisterMsgWithLocator_name, __cb);
        try
        {
            __result.__prepare(__unregisterMsgWithLocator_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(msgID);
            __os.writeString(ObjectID);
            __os.writeString(locator);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_unregisterMsgWithLocator(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __unregisterMsgWithLocator_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取高级配置项的值.
     * 
     * @param name 高级配置项的名称.
     * @param value 高级配置项的值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getAdvanceConfigInfo(String name, Ice.StringHolder value)
    {
        return getAdvanceConfigInfo(name, value, null, false);
    }

    /**
     * 获取高级配置项的值.
     * 
     * @param name 高级配置项的名称.
     * @param value 高级配置项的值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getAdvanceConfigInfo(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx)
    {
        return getAdvanceConfigInfo(name, value, __ctx, true);
    }

    private int
    getAdvanceConfigInfo(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAdvanceConfigInfo");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.getAdvanceConfigInfo(name, value, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getAdvanceConfigInfo_name = "getAdvanceConfigInfo";

    /**
     * 获取高级配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 高级配置项的名称.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfo(String name)
    {
        return begin_getAdvanceConfigInfo(name, null, false, null);
    }

    /**
     * 获取高级配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 高级配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfo(String name, java.util.Map<String, String> __ctx)
    {
        return begin_getAdvanceConfigInfo(name, __ctx, true, null);
    }

    /**
     * 获取高级配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 高级配置项的名称.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfo(String name, Ice.Callback __cb)
    {
        return begin_getAdvanceConfigInfo(name, null, false, __cb);
    }

    /**
     * 获取高级配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 高级配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfo(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAdvanceConfigInfo(name, __ctx, true, __cb);
    }

    /**
     * 获取高级配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 高级配置项的名称.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfo(String name, Callback_VMXSystem_getAdvanceConfigInfo __cb)
    {
        return begin_getAdvanceConfigInfo(name, null, false, __cb);
    }

    /**
     * 获取高级配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 高级配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfo(String name, java.util.Map<String, String> __ctx, Callback_VMXSystem_getAdvanceConfigInfo __cb)
    {
        return begin_getAdvanceConfigInfo(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAdvanceConfigInfo(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAdvanceConfigInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAdvanceConfigInfo_name, __cb);
        try
        {
            __result.__prepare(__getAdvanceConfigInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param value 高级配置项的值.
     * 
     **/
    public int end_getAdvanceConfigInfo(Ice.StringHolder value, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAdvanceConfigInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        value.value = __is.readString();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param StringSeq 调试的信息列表，格式为:名称,当前值,高级配置项描述,高级配置项的值的类型,默认值,范围(如果值类型为select，则以|为间隔枚举所有选择项，如果为int，则用a-b来设置范围)
     * </p>高级配置项的值的类型列表:
     * <ul>
     * <li> select - 列表中单选     </li> 
     * <li> string - 字符串         </li> 
     * <li> int - 数值              </li> 
     * <li> bool - 布尔值           </li> 
     * </ul> 
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getAdvanceConfigInfoList(ConfigInfoSeqHolder configInfoSequence)
    {
        return getAdvanceConfigInfoList(configInfoSequence, null, false);
    }

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param StringSeq 调试的信息列表，格式为:名称,当前值,高级配置项描述,高级配置项的值的类型,默认值,范围(如果值类型为select，则以|为间隔枚举所有选择项，如果为int，则用a-b来设置范围)
     * </p>高级配置项的值的类型列表:
     * <ul>
     * <li> select - 列表中单选     </li> 
     * <li> string - 字符串         </li> 
     * <li> int - 数值              </li> 
     * <li> bool - 布尔值           </li> 
     * </ul> 
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getAdvanceConfigInfoList(ConfigInfoSeqHolder configInfoSequence, java.util.Map<String, String> __ctx)
    {
        return getAdvanceConfigInfoList(configInfoSequence, __ctx, true);
    }

    private int
    getAdvanceConfigInfoList(ConfigInfoSeqHolder configInfoSequence, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAdvanceConfigInfoList");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.getAdvanceConfigInfoList(configInfoSequence, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getAdvanceConfigInfoList_name = "getAdvanceConfigInfoList";

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfoList()
    {
        return begin_getAdvanceConfigInfoList(null, false, null);
    }

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfoList(java.util.Map<String, String> __ctx)
    {
        return begin_getAdvanceConfigInfoList(__ctx, true, null);
    }

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfoList(Ice.Callback __cb)
    {
        return begin_getAdvanceConfigInfoList(null, false, __cb);
    }

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfoList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAdvanceConfigInfoList(__ctx, true, __cb);
    }

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfoList(Callback_VMXSystem_getAdvanceConfigInfoList __cb)
    {
        return begin_getAdvanceConfigInfoList(null, false, __cb);
    }

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfoList(java.util.Map<String, String> __ctx, Callback_VMXSystem_getAdvanceConfigInfoList __cb)
    {
        return begin_getAdvanceConfigInfoList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAdvanceConfigInfoList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAdvanceConfigInfoList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAdvanceConfigInfoList_name, __cb);
        try
        {
            __result.__prepare(__getAdvanceConfigInfoList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getAdvanceConfigInfoList(ConfigInfoSeqHolder configInfoSequence, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAdvanceConfigInfoList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        configInfoSequence.value = ConfigInfoSeqHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取配置项的值.
     * 
     * @param name 配置项的名称.
     * @param value 配置项的值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getConfigInfo(String name, Ice.StringHolder value)
    {
        return getConfigInfo(name, value, null, false);
    }

    /**
     * 获取配置项的值.
     * 
     * @param name 配置项的名称.
     * @param value 配置项的值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getConfigInfo(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx)
    {
        return getConfigInfo(name, value, __ctx, true);
    }

    private int
    getConfigInfo(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getConfigInfo");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.getConfigInfo(name, value, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getConfigInfo_name = "getConfigInfo";

    /**
     * 获取配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 配置项的名称.
     **/
    public Ice.AsyncResult begin_getConfigInfo(String name)
    {
        return begin_getConfigInfo(name, null, false, null);
    }

    /**
     * 获取配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConfigInfo(String name, java.util.Map<String, String> __ctx)
    {
        return begin_getConfigInfo(name, __ctx, true, null);
    }

    /**
     * 获取配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 配置项的名称.
     **/
    public Ice.AsyncResult begin_getConfigInfo(String name, Ice.Callback __cb)
    {
        return begin_getConfigInfo(name, null, false, __cb);
    }

    /**
     * 获取配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConfigInfo(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConfigInfo(name, __ctx, true, __cb);
    }

    /**
     * 获取配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 配置项的名称.
     **/
    public Ice.AsyncResult begin_getConfigInfo(String name, Callback_VMXSystem_getConfigInfo __cb)
    {
        return begin_getConfigInfo(name, null, false, __cb);
    }

    /**
     * 获取配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConfigInfo(String name, java.util.Map<String, String> __ctx, Callback_VMXSystem_getConfigInfo __cb)
    {
        return begin_getConfigInfo(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConfigInfo(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConfigInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConfigInfo_name, __cb);
        try
        {
            __result.__prepare(__getConfigInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     * @param value 配置项的值.
     * 
     **/
    public int end_getConfigInfo(Ice.StringHolder value, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConfigInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        value.value = __is.readString();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param StringSeq 配置项的信息列表，格式为:名称,当前值,配置项描述,配置项的值的类型,默认值,范围(如果值类型为select，则以|为间隔枚举所有选择项，如果为int，则用a-b来设置范围)
     * </p>配置项的值的类型列表:
     * <ul>
     * <li> select - 列表中单选     </li> 
     * <li> string - 字符串         </li> 
     * <li> int - 数值              </li> 
     * <li> bool - 布尔值           </li> 
     * </ul> 
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getConfigInfoList(StringSeqHolder configInfoList)
    {
        return getConfigInfoList(configInfoList, null, false);
    }

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param StringSeq 配置项的信息列表，格式为:名称,当前值,配置项描述,配置项的值的类型,默认值,范围(如果值类型为select，则以|为间隔枚举所有选择项，如果为int，则用a-b来设置范围)
     * </p>配置项的值的类型列表:
     * <ul>
     * <li> select - 列表中单选     </li> 
     * <li> string - 字符串         </li> 
     * <li> int - 数值              </li> 
     * <li> bool - 布尔值           </li> 
     * </ul> 
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    getConfigInfoList(StringSeqHolder configInfoList, java.util.Map<String, String> __ctx)
    {
        return getConfigInfoList(configInfoList, __ctx, true);
    }

    private int
    getConfigInfoList(StringSeqHolder configInfoList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getConfigInfoList");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.getConfigInfoList(configInfoList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getConfigInfoList_name = "getConfigInfoList";

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConfigInfoList()
    {
        return begin_getConfigInfoList(null, false, null);
    }

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConfigInfoList(java.util.Map<String, String> __ctx)
    {
        return begin_getConfigInfoList(__ctx, true, null);
    }

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConfigInfoList(Ice.Callback __cb)
    {
        return begin_getConfigInfoList(null, false, __cb);
    }

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConfigInfoList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConfigInfoList(__ctx, true, __cb);
    }

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getConfigInfoList(Callback_VMXSystem_getConfigInfoList __cb)
    {
        return begin_getConfigInfoList(null, false, __cb);
    }

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getConfigInfoList(java.util.Map<String, String> __ctx, Callback_VMXSystem_getConfigInfoList __cb)
    {
        return begin_getConfigInfoList(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConfigInfoList(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConfigInfoList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConfigInfoList_name, __cb);
        try
        {
            __result.__prepare(__getConfigInfoList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getConfigInfoList(StringSeqHolder configInfoList, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConfigInfoList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        configInfoList.value = StringSeqHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 获取授权值
     * @param attrName  
     * @param value
     * 
     * @return 返回值为0代表成功, 否则为失败的错误码.
     * 
     **/
    public int
    getLicense(String attrName, Ice.StringHolder attrValue)
    {
        return getLicense(attrName, attrValue, null, false);
    }

    /**
     * 获取授权值
     * @param attrName  
     * @param value
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功, 否则为失败的错误码.
     * 
     **/
    public int
    getLicense(String attrName, Ice.StringHolder attrValue, java.util.Map<String, String> __ctx)
    {
        return getLicense(attrName, attrValue, __ctx, true);
    }

    private int
    getLicense(String attrName, Ice.StringHolder attrValue, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLicense");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.getLicense(attrName, attrValue, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getLicense_name = "getLicense";

    /**
     * 获取授权值
     * @param __cb The callback object for the operation.
     * @param attrName  
     **/
    public Ice.AsyncResult begin_getLicense(String attrName)
    {
        return begin_getLicense(attrName, null, false, null);
    }

    /**
     * 获取授权值
     * @param __cb The callback object for the operation.
     * @param attrName  
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLicense(String attrName, java.util.Map<String, String> __ctx)
    {
        return begin_getLicense(attrName, __ctx, true, null);
    }

    /**
     * 获取授权值
     * @param __cb The callback object for the operation.
     * @param attrName  
     **/
    public Ice.AsyncResult begin_getLicense(String attrName, Ice.Callback __cb)
    {
        return begin_getLicense(attrName, null, false, __cb);
    }

    /**
     * 获取授权值
     * @param __cb The callback object for the operation.
     * @param attrName  
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLicense(String attrName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLicense(attrName, __ctx, true, __cb);
    }

    /**
     * 获取授权值
     * @param __cb The callback object for the operation.
     * @param attrName  
     **/
    public Ice.AsyncResult begin_getLicense(String attrName, Callback_VMXSystem_getLicense __cb)
    {
        return begin_getLicense(attrName, null, false, __cb);
    }

    /**
     * 获取授权值
     * @param __cb The callback object for the operation.
     * @param attrName  
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLicense(String attrName, java.util.Map<String, String> __ctx, Callback_VMXSystem_getLicense __cb)
    {
        return begin_getLicense(attrName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLicense(String attrName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLicense_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLicense_name, __cb);
        try
        {
            __result.__prepare(__getLicense_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(attrName);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功, 否则为失败的错误码.
     * 
     **/
    public int end_getLicense(Ice.StringHolder attrValue, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLicense_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        attrValue.value = __is.readString();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param ID 想要接收消息的对象的ID.
     * @param locator Ice locator.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerCallbackWithLocator(String ID, String locator)
    {
        return registerCallbackWithLocator(ID, locator, null, false);
    }

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param ID 想要接收消息的对象的ID.
     * @param locator Ice locator.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    registerCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx)
    {
        return registerCallbackWithLocator(ID, locator, __ctx, true);
    }

    private int
    registerCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("registerCallbackWithLocator");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.registerCallbackWithLocator(ID, locator, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __registerCallbackWithLocator_name = "registerCallbackWithLocator";

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param __cb The callback object for the operation.
     * @param ID 想要接收消息的对象的ID.
     **/
    public Ice.AsyncResult begin_registerCallbackWithLocator(String ID, String locator)
    {
        return begin_registerCallbackWithLocator(ID, locator, null, false, null);
    }

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param __cb The callback object for the operation.
     * @param ID 想要接收消息的对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx)
    {
        return begin_registerCallbackWithLocator(ID, locator, __ctx, true, null);
    }

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param __cb The callback object for the operation.
     * @param ID 想要接收消息的对象的ID.
     **/
    public Ice.AsyncResult begin_registerCallbackWithLocator(String ID, String locator, Ice.Callback __cb)
    {
        return begin_registerCallbackWithLocator(ID, locator, null, false, __cb);
    }

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param __cb The callback object for the operation.
     * @param ID 想要接收消息的对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_registerCallbackWithLocator(ID, locator, __ctx, true, __cb);
    }

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param __cb The callback object for the operation.
     * @param ID 想要接收消息的对象的ID.
     **/
    public Ice.AsyncResult begin_registerCallbackWithLocator(String ID, String locator, Callback_VMXSystem_registerCallbackWithLocator __cb)
    {
        return begin_registerCallbackWithLocator(ID, locator, null, false, __cb);
    }

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param __cb The callback object for the operation.
     * @param ID 想要接收消息的对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx, Callback_VMXSystem_registerCallbackWithLocator __cb)
    {
        return begin_registerCallbackWithLocator(ID, locator, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_registerCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__registerCallbackWithLocator_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __registerCallbackWithLocator_name, __cb);
        try
        {
            __result.__prepare(__registerCallbackWithLocator_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ID);
            __os.writeString(locator);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_registerCallbackWithLocator(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __registerCallbackWithLocator_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param name 高级配置项的名称.
     * @param value 高级配置项的值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setAdvanceConfigInfo(String name, String value)
    {
        return setAdvanceConfigInfo(name, value, null, false);
    }

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param name 高级配置项的名称.
     * @param value 高级配置项的值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setAdvanceConfigInfo(String name, String value, java.util.Map<String, String> __ctx)
    {
        return setAdvanceConfigInfo(name, value, __ctx, true);
    }

    private int
    setAdvanceConfigInfo(String name, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setAdvanceConfigInfo");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.setAdvanceConfigInfo(name, value, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setAdvanceConfigInfo_name = "setAdvanceConfigInfo";

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param __cb The callback object for the operation.
     * @param name 高级配置项的名称.
     **/
    public Ice.AsyncResult begin_setAdvanceConfigInfo(String name, String value)
    {
        return begin_setAdvanceConfigInfo(name, value, null, false, null);
    }

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param __cb The callback object for the operation.
     * @param name 高级配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setAdvanceConfigInfo(String name, String value, java.util.Map<String, String> __ctx)
    {
        return begin_setAdvanceConfigInfo(name, value, __ctx, true, null);
    }

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param __cb The callback object for the operation.
     * @param name 高级配置项的名称.
     **/
    public Ice.AsyncResult begin_setAdvanceConfigInfo(String name, String value, Ice.Callback __cb)
    {
        return begin_setAdvanceConfigInfo(name, value, null, false, __cb);
    }

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param __cb The callback object for the operation.
     * @param name 高级配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setAdvanceConfigInfo(String name, String value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setAdvanceConfigInfo(name, value, __ctx, true, __cb);
    }

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param __cb The callback object for the operation.
     * @param name 高级配置项的名称.
     **/
    public Ice.AsyncResult begin_setAdvanceConfigInfo(String name, String value, Callback_VMXSystem_setAdvanceConfigInfo __cb)
    {
        return begin_setAdvanceConfigInfo(name, value, null, false, __cb);
    }

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param __cb The callback object for the operation.
     * @param name 高级配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setAdvanceConfigInfo(String name, String value, java.util.Map<String, String> __ctx, Callback_VMXSystem_setAdvanceConfigInfo __cb)
    {
        return begin_setAdvanceConfigInfo(name, value, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setAdvanceConfigInfo(String name, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setAdvanceConfigInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setAdvanceConfigInfo_name, __cb);
        try
        {
            __result.__prepare(__setAdvanceConfigInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.writeString(value);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setAdvanceConfigInfo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setAdvanceConfigInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 设置配置项的值.
     * 
     * @param name 配置项的名称.
     * @param value 配置项的值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setConfigInfo(String name, String value)
    {
        return setConfigInfo(name, value, null, false);
    }

    /**
     * 设置配置项的值.
     * 
     * @param name 配置项的名称.
     * @param value 配置项的值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    setConfigInfo(String name, String value, java.util.Map<String, String> __ctx)
    {
        return setConfigInfo(name, value, __ctx, true);
    }

    private int
    setConfigInfo(String name, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setConfigInfo");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.setConfigInfo(name, value, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setConfigInfo_name = "setConfigInfo";

    /**
     * 设置配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 配置项的名称.
     **/
    public Ice.AsyncResult begin_setConfigInfo(String name, String value)
    {
        return begin_setConfigInfo(name, value, null, false, null);
    }

    /**
     * 设置配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setConfigInfo(String name, String value, java.util.Map<String, String> __ctx)
    {
        return begin_setConfigInfo(name, value, __ctx, true, null);
    }

    /**
     * 设置配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 配置项的名称.
     **/
    public Ice.AsyncResult begin_setConfigInfo(String name, String value, Ice.Callback __cb)
    {
        return begin_setConfigInfo(name, value, null, false, __cb);
    }

    /**
     * 设置配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setConfigInfo(String name, String value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setConfigInfo(name, value, __ctx, true, __cb);
    }

    /**
     * 设置配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 配置项的名称.
     **/
    public Ice.AsyncResult begin_setConfigInfo(String name, String value, Callback_VMXSystem_setConfigInfo __cb)
    {
        return begin_setConfigInfo(name, value, null, false, __cb);
    }

    /**
     * 设置配置项的值.
     * 
     * @param __cb The callback object for the operation.
     * @param name 配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setConfigInfo(String name, String value, java.util.Map<String, String> __ctx, Callback_VMXSystem_setConfigInfo __cb)
    {
        return begin_setConfigInfo(name, value, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setConfigInfo(String name, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setConfigInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setConfigInfo_name, __cb);
        try
        {
            __result.__prepare(__setConfigInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.writeString(value);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setConfigInfo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setConfigInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * 取消注册.
     * 
     * @param ID 想要取消接收消息的对象的ID.
     * @param locator Ice locator.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterCallbackWithLocator(String ID, String locator)
    {
        return unregisterCallbackWithLocator(ID, locator, null, false);
    }

    /**
     * 取消注册.
     * 
     * @param ID 想要取消接收消息的对象的ID.
     * @param locator Ice locator.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int
    unregisterCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx)
    {
        return unregisterCallbackWithLocator(ID, locator, __ctx, true);
    }

    private int
    unregisterCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("unregisterCallbackWithLocator");
                __delBase = __getDelegate(false);
                _VMXSystemDel __del = (_VMXSystemDel)__delBase;
                return __del.unregisterCallbackWithLocator(ID, locator, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __unregisterCallbackWithLocator_name = "unregisterCallbackWithLocator";

    /**
     * 取消注册.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 想要取消接收消息的对象的ID.
     **/
    public Ice.AsyncResult begin_unregisterCallbackWithLocator(String ID, String locator)
    {
        return begin_unregisterCallbackWithLocator(ID, locator, null, false, null);
    }

    /**
     * 取消注册.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 想要取消接收消息的对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx)
    {
        return begin_unregisterCallbackWithLocator(ID, locator, __ctx, true, null);
    }

    /**
     * 取消注册.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 想要取消接收消息的对象的ID.
     **/
    public Ice.AsyncResult begin_unregisterCallbackWithLocator(String ID, String locator, Ice.Callback __cb)
    {
        return begin_unregisterCallbackWithLocator(ID, locator, null, false, __cb);
    }

    /**
     * 取消注册.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 想要取消接收消息的对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_unregisterCallbackWithLocator(ID, locator, __ctx, true, __cb);
    }

    /**
     * 取消注册.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 想要取消接收消息的对象的ID.
     **/
    public Ice.AsyncResult begin_unregisterCallbackWithLocator(String ID, String locator, Callback_VMXSystem_unregisterCallbackWithLocator __cb)
    {
        return begin_unregisterCallbackWithLocator(ID, locator, null, false, __cb);
    }

    /**
     * 取消注册.
     * 
     * @param __cb The callback object for the operation.
     * @param ID 想要取消接收消息的对象的ID.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx, Callback_VMXSystem_unregisterCallbackWithLocator __cb)
    {
        return begin_unregisterCallbackWithLocator(ID, locator, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_unregisterCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__unregisterCallbackWithLocator_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __unregisterCallbackWithLocator_name, __cb);
        try
        {
            __result.__prepare(__unregisterCallbackWithLocator_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ID);
            __os.writeString(locator);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_unregisterCallbackWithLocator(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __unregisterCallbackWithLocator_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public static VMXSystemPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        VMXSystemPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (VMXSystemPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    VMXSystemPrxHelper __h = new VMXSystemPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static VMXSystemPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        VMXSystemPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (VMXSystemPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    VMXSystemPrxHelper __h = new VMXSystemPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static VMXSystemPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        VMXSystemPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    VMXSystemPrxHelper __h = new VMXSystemPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static VMXSystemPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        VMXSystemPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    VMXSystemPrxHelper __h = new VMXSystemPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static VMXSystemPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        VMXSystemPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (VMXSystemPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                VMXSystemPrxHelper __h = new VMXSystemPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static VMXSystemPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        VMXSystemPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            VMXSystemPrxHelper __h = new VMXSystemPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::vmxICE::VMXObject",
        "::vmxICE::VMXSystem"
    };

    public static String
    ice_staticId()
    {
        return __ids[2];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _VMXSystemDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _VMXSystemDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, VMXSystemPrx v)
    {
        __os.writeProxy(v);
    }

    public static VMXSystemPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            VMXSystemPrxHelper result = new VMXSystemPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
