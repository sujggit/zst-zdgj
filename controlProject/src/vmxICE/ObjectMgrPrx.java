// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ObjectMgrPrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package vmxICE;

/**
 * [ObjectPool]是mmap6框架中各种对象的管理池，提供了对象管理方面的功能。
 **/
public interface ObjectMgrPrx extends VMXContainerPrx
{
    /**
     * 获取集合中的对象数量.
     * 
     * @return 返回值为对象在池中的数量.
     * 
     **/
    public int getObjectCount();

    /**
     * 获取集合中的对象数量.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为对象在池中的数量.
     * 
     **/
    public int getObjectCount(java.util.Map<String, String> __ctx);

    /**
     * 获取集合中的对象数量.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectCount();

    /**
     * 获取集合中的对象数量.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectCount(java.util.Map<String, String> __ctx);

    /**
     * 获取集合中的对象数量.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectCount(Ice.Callback __cb);

    /**
     * 获取集合中的对象数量.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectCount(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取集合中的对象数量.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectCount(Callback_ObjectMgr_getObjectCount __cb);

    /**
     * 获取集合中的对象数量.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectCount(java.util.Map<String, String> __ctx, Callback_ObjectMgr_getObjectCount __cb);

    /**
     * 获取集合中的对象数量.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为对象在池中的数量.
     * 
     **/
    public int end_getObjectCount(Ice.AsyncResult __result);

    /**
     * 获取指定索引的对象的ID，注意，这个调用不会将对象状态设置为已用.
     * 
     * @param index 对象索引.
     * @param ID 指定索引的对象的ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getObjectByIndex(int index, Ice.StringHolder ID);

    /**
     * 获取指定索引的对象的ID，注意，这个调用不会将对象状态设置为已用.
     * 
     * @param index 对象索引.
     * @param ID 指定索引的对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getObjectByIndex(int index, Ice.StringHolder ID, java.util.Map<String, String> __ctx);

    /**
     * 获取指定索引的对象的ID，注意，这个调用不会将对象状态设置为已用.
     * 
     * @param index 对象索引.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectByIndex(int index);

    /**
     * 获取指定索引的对象的ID，注意，这个调用不会将对象状态设置为已用.
     * 
     * @param index 对象索引.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectByIndex(int index, java.util.Map<String, String> __ctx);

    /**
     * 获取指定索引的对象的ID，注意，这个调用不会将对象状态设置为已用.
     * 
     * @param index 对象索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectByIndex(int index, Ice.Callback __cb);

    /**
     * 获取指定索引的对象的ID，注意，这个调用不会将对象状态设置为已用.
     * 
     * @param index 对象索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectByIndex(int index, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取指定索引的对象的ID，注意，这个调用不会将对象状态设置为已用.
     * 
     * @param index 对象索引.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectByIndex(int index, Callback_ObjectMgr_getObjectByIndex __cb);

    /**
     * 获取指定索引的对象的ID，注意，这个调用不会将对象状态设置为已用.
     * 
     * @param index 对象索引.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectByIndex(int index, java.util.Map<String, String> __ctx, Callback_ObjectMgr_getObjectByIndex __cb);

    /**
     * 获取指定索引的对象的ID，注意，这个调用不会将对象状态设置为已用.
     * 
     * @param ID 指定索引的对象的ID.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getObjectByIndex(Ice.StringHolder ID, Ice.AsyncResult __result);

    /**
     * 获取空闲的对象的ID.
     * 
     * @param ID 空闲的对象的ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getIdleObject(Ice.StringHolder ID);

    /**
     * 获取空闲的对象的ID.
     * 
     * @param ID 空闲的对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getIdleObject(Ice.StringHolder ID, java.util.Map<String, String> __ctx);

    /**
     * 获取空闲的对象的ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleObject();

    /**
     * 获取空闲的对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleObject(java.util.Map<String, String> __ctx);

    /**
     * 获取空闲的对象的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleObject(Ice.Callback __cb);

    /**
     * 获取空闲的对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleObject(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取空闲的对象的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleObject(Callback_ObjectMgr_getIdleObject __cb);

    /**
     * 获取空闲的对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleObject(java.util.Map<String, String> __ctx, Callback_ObjectMgr_getIdleObject __cb);

    /**
     * 获取空闲的对象的ID.
     * 
     * @param ID 空闲的对象的ID.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getIdleObject(Ice.StringHolder ID, Ice.AsyncResult __result);

    /**
     * 获取空闲的对象的ID列表，如果要求的数量大于存在的数量，则申请存在的数量并返回VMX_STATUS_ERR_OUT_OF_RESOURCE错误，实际申请到的数量可以通过查看list的数量获取.
     * 
     * @param list 空闲的对象的ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getIdleObjectList(int num, StringSeqHolder list);

    /**
     * 获取空闲的对象的ID列表，如果要求的数量大于存在的数量，则申请存在的数量并返回VMX_STATUS_ERR_OUT_OF_RESOURCE错误，实际申请到的数量可以通过查看list的数量获取.
     * 
     * @param list 空闲的对象的ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getIdleObjectList(int num, StringSeqHolder list, java.util.Map<String, String> __ctx);

    /**
     * 获取空闲的对象的ID列表，如果要求的数量大于存在的数量，则申请存在的数量并返回VMX_STATUS_ERR_OUT_OF_RESOURCE错误，实际申请到的数量可以通过查看list的数量获取.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleObjectList(int num);

    /**
     * 获取空闲的对象的ID列表，如果要求的数量大于存在的数量，则申请存在的数量并返回VMX_STATUS_ERR_OUT_OF_RESOURCE错误，实际申请到的数量可以通过查看list的数量获取.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleObjectList(int num, java.util.Map<String, String> __ctx);

    /**
     * 获取空闲的对象的ID列表，如果要求的数量大于存在的数量，则申请存在的数量并返回VMX_STATUS_ERR_OUT_OF_RESOURCE错误，实际申请到的数量可以通过查看list的数量获取.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleObjectList(int num, Ice.Callback __cb);

    /**
     * 获取空闲的对象的ID列表，如果要求的数量大于存在的数量，则申请存在的数量并返回VMX_STATUS_ERR_OUT_OF_RESOURCE错误，实际申请到的数量可以通过查看list的数量获取.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleObjectList(int num, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取空闲的对象的ID列表，如果要求的数量大于存在的数量，则申请存在的数量并返回VMX_STATUS_ERR_OUT_OF_RESOURCE错误，实际申请到的数量可以通过查看list的数量获取.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleObjectList(int num, Callback_ObjectMgr_getIdleObjectList __cb);

    /**
     * 获取空闲的对象的ID列表，如果要求的数量大于存在的数量，则申请存在的数量并返回VMX_STATUS_ERR_OUT_OF_RESOURCE错误，实际申请到的数量可以通过查看list的数量获取.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getIdleObjectList(int num, java.util.Map<String, String> __ctx, Callback_ObjectMgr_getIdleObjectList __cb);

    /**
     * 获取空闲的对象的ID列表，如果要求的数量大于存在的数量，则申请存在的数量并返回VMX_STATUS_ERR_OUT_OF_RESOURCE错误，实际申请到的数量可以通过查看list的数量获取.
     * 
     * @param list 空闲的对象的ID列表.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getIdleObjectList(StringSeqHolder list, Ice.AsyncResult __result);

    /**
     * 获取所有的对象的ID列表.
     * 
     * @param list 所有对象的ID列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getAllObjectList(StringSeqHolder list);

    /**
     * 获取所有的对象的ID列表.
     * 
     * @param list 所有对象的ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getAllObjectList(StringSeqHolder list, java.util.Map<String, String> __ctx);

    /**
     * 获取所有的对象的ID列表.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllObjectList();

    /**
     * 获取所有的对象的ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllObjectList(java.util.Map<String, String> __ctx);

    /**
     * 获取所有的对象的ID列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllObjectList(Ice.Callback __cb);

    /**
     * 获取所有的对象的ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllObjectList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取所有的对象的ID列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllObjectList(Callback_ObjectMgr_getAllObjectList __cb);

    /**
     * 获取所有的对象的ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllObjectList(java.util.Map<String, String> __ctx, Callback_ObjectMgr_getAllObjectList __cb);

    /**
     * 获取所有的对象的ID列表.
     * 
     * @param list 所有对象的ID列表.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getAllObjectList(StringSeqHolder list, Ice.AsyncResult __result);

    /**
     * 判断对象是否空闲
     * 
     * @param ID 对象的ID.
     * 
     * @return 返回值为真代表空闲.
     * 
     **/
    public boolean isObjectIdle(String ID);

    /**
     * 判断对象是否空闲
     * 
     * @param ID 对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为真代表空闲.
     * 
     **/
    public boolean isObjectIdle(String ID, java.util.Map<String, String> __ctx);

    /**
     * 判断对象是否空闲
     * 
     * @param ID 对象的ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isObjectIdle(String ID);

    /**
     * 判断对象是否空闲
     * 
     * @param ID 对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isObjectIdle(String ID, java.util.Map<String, String> __ctx);

    /**
     * 判断对象是否空闲
     * 
     * @param ID 对象的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isObjectIdle(String ID, Ice.Callback __cb);

    /**
     * 判断对象是否空闲
     * 
     * @param ID 对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isObjectIdle(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 判断对象是否空闲
     * 
     * @param ID 对象的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isObjectIdle(String ID, Callback_ObjectMgr_isObjectIdle __cb);

    /**
     * 判断对象是否空闲
     * 
     * @param ID 对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isObjectIdle(String ID, java.util.Map<String, String> __ctx, Callback_ObjectMgr_isObjectIdle __cb);

    /**
     * 判断对象是否空闲
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为真代表空闲.
     * 
     **/
    public boolean end_isObjectIdle(Ice.AsyncResult __result);

    /**
     * 释放对象给对象池.
     * 
     * @param ID 用户想要释放的对象的ID.
     * 
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public int freeObject(String ID);

    /**
     * 释放对象给对象池.
     * 
     * @param ID 用户想要释放的对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public int freeObject(String ID, java.util.Map<String, String> __ctx);

    /**
     * 释放对象给对象池.
     * 
     * @param ID 用户想要释放的对象的ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeObject(String ID);

    /**
     * 释放对象给对象池.
     * 
     * @param ID 用户想要释放的对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeObject(String ID, java.util.Map<String, String> __ctx);

    /**
     * 释放对象给对象池.
     * 
     * @param ID 用户想要释放的对象的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeObject(String ID, Ice.Callback __cb);

    /**
     * 释放对象给对象池.
     * 
     * @param ID 用户想要释放的对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeObject(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 释放对象给对象池.
     * 
     * @param ID 用户想要释放的对象的ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeObject(String ID, Callback_ObjectMgr_freeObject __cb);

    /**
     * 释放对象给对象池.
     * 
     * @param ID 用户想要释放的对象的ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeObject(String ID, java.util.Map<String, String> __ctx, Callback_ObjectMgr_freeObject __cb);

    /**
     * 释放对象给对象池.
     * 
     * @param __result The asynchronous result object.
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public int end_freeObject(Ice.AsyncResult __result);

    /**
     * 释放多个对象给对象池.
     * 
     * @param list 用户想要释放的对象的ID列表.
     * 
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public int freeObjectList(String[] list);

    /**
     * 释放多个对象给对象池.
     * 
     * @param list 用户想要释放的对象的ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public int freeObjectList(String[] list, java.util.Map<String, String> __ctx);

    /**
     * 释放多个对象给对象池.
     * 
     * @param list 用户想要释放的对象的ID列表.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeObjectList(String[] list);

    /**
     * 释放多个对象给对象池.
     * 
     * @param list 用户想要释放的对象的ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeObjectList(String[] list, java.util.Map<String, String> __ctx);

    /**
     * 释放多个对象给对象池.
     * 
     * @param list 用户想要释放的对象的ID列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeObjectList(String[] list, Ice.Callback __cb);

    /**
     * 释放多个对象给对象池.
     * 
     * @param list 用户想要释放的对象的ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeObjectList(String[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 释放多个对象给对象池.
     * 
     * @param list 用户想要释放的对象的ID列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeObjectList(String[] list, Callback_ObjectMgr_freeObjectList __cb);

    /**
     * 释放多个对象给对象池.
     * 
     * @param list 用户想要释放的对象的ID列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_freeObjectList(String[] list, java.util.Map<String, String> __ctx, Callback_ObjectMgr_freeObjectList __cb);

    /**
     * 释放多个对象给对象池.
     * 
     * @param __result The asynchronous result object.
     * @return 如果成功，返回客户端对象的句柄，否则返回NULL.
     * 
     **/
    public int end_freeObjectList(Ice.AsyncResult __result);
}
