// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `VMXSystemPrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package vmxICE;

/**
 * [VMXSystem]是mmap6框架中对业务层系统的定义，描述了每个基于mmap6框架的系统的通用接口，如重置系统，设置配置项及系统之间的交互等，<b>接口定义还未完成</b>。
 **/
public interface VMXSystemPrx extends VMXObjectPrx
{
    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param ID 想要接收消息的对象的ID.
     * @param locator Ice locator.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int registerCallbackWithLocator(String ID, String locator);

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param ID 想要接收消息的对象的ID.
     * @param locator Ice locator.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int registerCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx);

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param ID 想要接收消息的对象的ID.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerCallbackWithLocator(String ID, String locator);

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param ID 想要接收消息的对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx);

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param ID 想要接收消息的对象的ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerCallbackWithLocator(String ID, String locator, Ice.Callback __cb);

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param ID 想要接收消息的对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param ID 想要接收消息的对象的ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerCallbackWithLocator(String ID, String locator, Callback_VMXSystem_registerCallbackWithLocator __cb);

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param ID 想要接收消息的对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx, Callback_VMXSystem_registerCallbackWithLocator __cb);

    /**
     * 注册一个ice对象到系统中，用于接收系统的消息， 注册的对象需要继承[Application]，消息类型参考[Message].
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_registerCallbackWithLocator(Ice.AsyncResult __result);

    /**
     * 取消注册.
     * 
     * @param ID 想要取消接收消息的对象的ID.
     * @param locator Ice locator.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int unregisterCallbackWithLocator(String ID, String locator);

    /**
     * 取消注册.
     * 
     * @param ID 想要取消接收消息的对象的ID.
     * @param locator Ice locator.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int unregisterCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx);

    /**
     * 取消注册.
     * 
     * @param ID 想要取消接收消息的对象的ID.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterCallbackWithLocator(String ID, String locator);

    /**
     * 取消注册.
     * 
     * @param ID 想要取消接收消息的对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx);

    /**
     * 取消注册.
     * 
     * @param ID 想要取消接收消息的对象的ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterCallbackWithLocator(String ID, String locator, Ice.Callback __cb);

    /**
     * 取消注册.
     * 
     * @param ID 想要取消接收消息的对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 取消注册.
     * 
     * @param ID 想要取消接收消息的对象的ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterCallbackWithLocator(String ID, String locator, Callback_VMXSystem_unregisterCallbackWithLocator __cb);

    /**
     * 取消注册.
     * 
     * @param ID 想要取消接收消息的对象的ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterCallbackWithLocator(String ID, String locator, java.util.Map<String, String> __ctx, Callback_VMXSystem_unregisterCallbackWithLocator __cb);

    /**
     * 取消注册.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_unregisterCallbackWithLocator(Ice.AsyncResult __result);

    /**
     * 设置配置项的值.
     * 
     * @param name 配置项的名称.
     * @param value 配置项的值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setConfigInfo(String name, String value);

    /**
     * 设置配置项的值.
     * 
     * @param name 配置项的名称.
     * @param value 配置项的值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setConfigInfo(String name, String value, java.util.Map<String, String> __ctx);

    /**
     * 设置配置项的值.
     * 
     * @param name 配置项的名称.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConfigInfo(String name, String value);

    /**
     * 设置配置项的值.
     * 
     * @param name 配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConfigInfo(String name, String value, java.util.Map<String, String> __ctx);

    /**
     * 设置配置项的值.
     * 
     * @param name 配置项的名称.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConfigInfo(String name, String value, Ice.Callback __cb);

    /**
     * 设置配置项的值.
     * 
     * @param name 配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConfigInfo(String name, String value, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置配置项的值.
     * 
     * @param name 配置项的名称.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConfigInfo(String name, String value, Callback_VMXSystem_setConfigInfo __cb);

    /**
     * 设置配置项的值.
     * 
     * @param name 配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConfigInfo(String name, String value, java.util.Map<String, String> __ctx, Callback_VMXSystem_setConfigInfo __cb);

    /**
     * 设置配置项的值.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setConfigInfo(Ice.AsyncResult __result);

    /**
     * 获取配置项的值.
     * 
     * @param name 配置项的名称.
     * @param value 配置项的值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getConfigInfo(String name, Ice.StringHolder value);

    /**
     * 获取配置项的值.
     * 
     * @param name 配置项的名称.
     * @param value 配置项的值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getConfigInfo(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx);

    /**
     * 获取配置项的值.
     * 
     * @param name 配置项的名称.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConfigInfo(String name);

    /**
     * 获取配置项的值.
     * 
     * @param name 配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConfigInfo(String name, java.util.Map<String, String> __ctx);

    /**
     * 获取配置项的值.
     * 
     * @param name 配置项的名称.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConfigInfo(String name, Ice.Callback __cb);

    /**
     * 获取配置项的值.
     * 
     * @param name 配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConfigInfo(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取配置项的值.
     * 
     * @param name 配置项的名称.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConfigInfo(String name, Callback_VMXSystem_getConfigInfo __cb);

    /**
     * 获取配置项的值.
     * 
     * @param name 配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConfigInfo(String name, java.util.Map<String, String> __ctx, Callback_VMXSystem_getConfigInfo __cb);

    /**
     * 获取配置项的值.
     * 
     * @param value 配置项的值.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getConfigInfo(Ice.StringHolder value, Ice.AsyncResult __result);

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param StringSeq 配置项的信息列表，格式为:名称,当前值,配置项描述,配置项的值的类型,默认值,范围(如果值类型为select，则以|为间隔枚举所有选择项，如果为int，则用a-b来设置范围)
     * </p>配置项的值的类型列表:
     * <ul>
     * <li> select - 列表中单选     </li> 
     * <li> string - 字符串         </li> 
     * <li> int - 数值              </li> 
     * <li> bool - 布尔值           </li> 
     * </ul> 
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getConfigInfoList(StringSeqHolder configInfoList);

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param StringSeq 配置项的信息列表，格式为:名称,当前值,配置项描述,配置项的值的类型,默认值,范围(如果值类型为select，则以|为间隔枚举所有选择项，如果为int，则用a-b来设置范围)
     * </p>配置项的值的类型列表:
     * <ul>
     * <li> select - 列表中单选     </li> 
     * <li> string - 字符串         </li> 
     * <li> int - 数值              </li> 
     * <li> bool - 布尔值           </li> 
     * </ul> 
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getConfigInfoList(StringSeqHolder configInfoList, java.util.Map<String, String> __ctx);

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConfigInfoList();

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConfigInfoList(java.util.Map<String, String> __ctx);

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConfigInfoList(Ice.Callback __cb);

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConfigInfoList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConfigInfoList(Callback_VMXSystem_getConfigInfoList __cb);

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConfigInfoList(java.util.Map<String, String> __ctx, Callback_VMXSystem_getConfigInfoList __cb);

    /**
     * 以列表形式获取所有配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getConfigInfoList(StringSeqHolder configInfoList, Ice.AsyncResult __result);

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param name 高级配置项的名称.
     * @param value 高级配置项的值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setAdvanceConfigInfo(String name, String value);

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param name 高级配置项的名称.
     * @param value 高级配置项的值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setAdvanceConfigInfo(String name, String value, java.util.Map<String, String> __ctx);

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param name 高级配置项的名称.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAdvanceConfigInfo(String name, String value);

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param name 高级配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAdvanceConfigInfo(String name, String value, java.util.Map<String, String> __ctx);

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param name 高级配置项的名称.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAdvanceConfigInfo(String name, String value, Ice.Callback __cb);

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param name 高级配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAdvanceConfigInfo(String name, String value, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param name 高级配置项的名称.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAdvanceConfigInfo(String name, String value, Callback_VMXSystem_setAdvanceConfigInfo __cb);

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param name 高级配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAdvanceConfigInfo(String name, String value, java.util.Map<String, String> __ctx, Callback_VMXSystem_setAdvanceConfigInfo __cb);

    /**
     * 设置高级配置项的值，高级配置项和配置项的区别在于高级配置项不对普通用户公开，需要由集成商或者生产厂商进行配置。
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setAdvanceConfigInfo(Ice.AsyncResult __result);

    /**
     * 获取高级配置项的值.
     * 
     * @param name 高级配置项的名称.
     * @param value 高级配置项的值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getAdvanceConfigInfo(String name, Ice.StringHolder value);

    /**
     * 获取高级配置项的值.
     * 
     * @param name 高级配置项的名称.
     * @param value 高级配置项的值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getAdvanceConfigInfo(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx);

    /**
     * 获取高级配置项的值.
     * 
     * @param name 高级配置项的名称.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfo(String name);

    /**
     * 获取高级配置项的值.
     * 
     * @param name 高级配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfo(String name, java.util.Map<String, String> __ctx);

    /**
     * 获取高级配置项的值.
     * 
     * @param name 高级配置项的名称.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfo(String name, Ice.Callback __cb);

    /**
     * 获取高级配置项的值.
     * 
     * @param name 高级配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfo(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取高级配置项的值.
     * 
     * @param name 高级配置项的名称.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfo(String name, Callback_VMXSystem_getAdvanceConfigInfo __cb);

    /**
     * 获取高级配置项的值.
     * 
     * @param name 高级配置项的名称.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfo(String name, java.util.Map<String, String> __ctx, Callback_VMXSystem_getAdvanceConfigInfo __cb);

    /**
     * 获取高级配置项的值.
     * 
     * @param value 高级配置项的值.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getAdvanceConfigInfo(Ice.StringHolder value, Ice.AsyncResult __result);

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param StringSeq 调试的信息列表，格式为:名称,当前值,高级配置项描述,高级配置项的值的类型,默认值,范围(如果值类型为select，则以|为间隔枚举所有选择项，如果为int，则用a-b来设置范围)
     * </p>高级配置项的值的类型列表:
     * <ul>
     * <li> select - 列表中单选     </li> 
     * <li> string - 字符串         </li> 
     * <li> int - 数值              </li> 
     * <li> bool - 布尔值           </li> 
     * </ul> 
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getAdvanceConfigInfoList(ConfigInfoSeqHolder configInfoSequence);

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param StringSeq 调试的信息列表，格式为:名称,当前值,高级配置项描述,高级配置项的值的类型,默认值,范围(如果值类型为select，则以|为间隔枚举所有选择项，如果为int，则用a-b来设置范围)
     * </p>高级配置项的值的类型列表:
     * <ul>
     * <li> select - 列表中单选     </li> 
     * <li> string - 字符串         </li> 
     * <li> int - 数值              </li> 
     * <li> bool - 布尔值           </li> 
     * </ul> 
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getAdvanceConfigInfoList(ConfigInfoSeqHolder configInfoSequence, java.util.Map<String, String> __ctx);

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfoList();

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfoList(java.util.Map<String, String> __ctx);

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfoList(Ice.Callback __cb);

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfoList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfoList(Callback_VMXSystem_getAdvanceConfigInfoList __cb);

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAdvanceConfigInfoList(java.util.Map<String, String> __ctx, Callback_VMXSystem_getAdvanceConfigInfoList __cb);

    /**
     * 以列表形式获取所有高级配置项的名称，值的类型，范围，当前值，默认值.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getAdvanceConfigInfoList(ConfigInfoSeqHolder configInfoSequence, Ice.AsyncResult __result);

    /**
     * 获取授权值
     * @param attrName  
     * @param value
     * 
     * @return 返回值为0代表成功, 否则为失败的错误码.
     * 
     **/
    public int getLicense(String attrName, Ice.StringHolder attrValue);

    /**
     * 获取授权值
     * @param attrName  
     * @param value
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功, 否则为失败的错误码.
     * 
     **/
    public int getLicense(String attrName, Ice.StringHolder attrValue, java.util.Map<String, String> __ctx);

    /**
     * 获取授权值
     * @param attrName  
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLicense(String attrName);

    /**
     * 获取授权值
     * @param attrName  
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLicense(String attrName, java.util.Map<String, String> __ctx);

    /**
     * 获取授权值
     * @param attrName  
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLicense(String attrName, Ice.Callback __cb);

    /**
     * 获取授权值
     * @param attrName  
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLicense(String attrName, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取授权值
     * @param attrName  
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLicense(String attrName, Callback_VMXSystem_getLicense __cb);

    /**
     * 获取授权值
     * @param attrName  
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLicense(String attrName, java.util.Map<String, String> __ctx, Callback_VMXSystem_getLicense __cb);

    /**
     * 获取授权值
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功, 否则为失败的错误码.
     * 
     **/
    public int end_getLicense(Ice.StringHolder attrValue, Ice.AsyncResult __result);
}
