// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_MediaNodeDisp.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package vmxICE;

/**
 * [MediaNode]是mmap6框架中的多媒体节点基类，提供了多媒体节点的通用接口。
 **/
public abstract class _MediaNodeDisp extends Ice.ObjectImpl implements MediaNode
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::vmxICE::MediaNode",
        "::vmxICE::VMXObject"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[1];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    addDeliverDst(String dst)
    {
        return addDeliverDst(dst, null);
    }

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * @param dstPadIndex 接收数据的节点的输入pad索引，如果为[InvalidPadIndex]则表示不指定.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex)
    {
        return addDeliverDstEx(dst, dstPadIndex, srcPadIndex, null);
    }

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourcePadIndex 上游节点的pad索引.
     * @param sourceName 上游节点的名称.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并通过输出参数[outDstPadIndex]返回给调用者。
     * @param outDstPadIndex 下游节点的pad索引。
     * @param dstNodeName 下游节点的名称，由下游节点返回给调用者.
     * @param dstMgrID 下游节点所在池的ice ID.
     * @param dstNodeIndex 下游节点所在池中节点自身的索引，用于通过池来传输数据.
     * @param mode 数据传输的模式
     * @param modeInfo 传输模式的附加信息，根据传输模式的参数来确定其中包含的信息，谁提供传输模式，谁就必须给出传输信息。例如如果调用者设定传输模式为共享内存，则需要调用者填充共享内存的名称.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, Ice.IntHolder outDstPadIndex, Ice.StringHolder dstNodeName, Ice.StringHolder dstMgrID, Ice.IntHolder dstNodeIndex)
    {
        return addSource(sourceID, sourcePadIndex, sourceName, dstPadIndex, mode, modeInfo, outDstPadIndex, dstNodeName, dstMgrID, dstNodeIndex, null);
    }

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param msgList 事件ID列表，在vmx_msg::CEvent类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    enumEventList(EventDescListHolder eventList)
    {
        return enumEventList(eventList, null);
    }

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param list Pad信息列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    enumPadList(PadListHolder list)
    {
        return enumPadList(list, null);
    }

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param list 下游节点的描述列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getDeliverList(LinkListHolder list)
    {
        return getDeliverList(list, null);
    }

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param capability 媒体流的详细描述.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getPadCapability(PadDirection dir, int index, Ice.StringHolder capability)
    {
        return getPadCapability(dir, index, capability, null);
    }

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param list 上游节点的描述列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getSourceList(LinkListHolder list)
    {
        return getSourceList(list, null);
    }

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param dir pad的输入输出类型.
     * @param list Pad列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    queryPadByDirection(PadDirection dir, PadListHolder list)
    {
        return queryPadByDirection(dir, list, null);
    }

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param dir pad的类型.
     * @param indexList index列表.
     * @param list Pad列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    queryPadByIndex(PadDirection dir, int[] indexList, PadListHolder list)
    {
        return queryPadByIndex(dir, indexList, list, null);
    }

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    recvEvent(PadDirection dir, int index, byte[] event)
    {
        return recvEvent(dir, index, event, null);
    }

    /**
     * 节点的接收数据函数。
     * 
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     * @param seq 传递的数据包，数据包的格式通过vmx_media::IMediaFrameBuffer的toVector()获取，同样，这种数据包可以通过vmx_media::IMediaFrameBuffer.fromVector()来解析.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final void
    recvMedia(int padIndex, byte[] seq)
    {
        recvMedia(padIndex, seq, null);
    }

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param dst 下游节点的ICE ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    removeDeliverDst(String dst)
    {
        return removeDeliverDst(dst, null);
    }

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param dst 下游节点的ICE ID.
     * @param dstPadIndex 接收数据的节点的输入pad索引，如果为[InvalidPadIndex]则表示不指定.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex)
    {
        return removeDeliverDstEx(dst, dstPadIndex, srcPadIndex, null);
    }

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourcePadIndex 上游节点的pad索引.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    removeSource(String sourceID, int sourcePadIndex, int dstPadIndex)
    {
        return removeSource(sourceID, sourcePadIndex, dstPadIndex, null);
    }

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param capability 媒体流的详细描述.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setPadCapability(PadDirection dir, int index, String capability)
    {
        return setPadCapability(dir, index, capability, null);
    }

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    enumMessageList(MsgDescListHolder msgList)
    {
        return enumMessageList(msgList, null);
    }

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param info 属性信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    enumProperty(String name, PropertyInfoHolder info)
    {
        return enumProperty(name, info, null);
    }

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param list 属性信息列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    enumPropertyList(PropertyInfoListHolder list)
    {
        return enumPropertyList(list, null);
    }

    /**
     * 获取对象的ICE ID.
     * 
     * @return 返回对象的ICE ID.
     * 
     **/
    public final String
    getID()
    {
        return getID(null);
    }

    /**
     * 获取对象名称.
     * 
     * @return 返回对象的名称.
     * 
     **/
    public final String
    getName()
    {
        return getName(null);
    }

    /**
     * 获取对象类型特征。
     * 
     * @return 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public final int
    getObjectType()
    {
        return getObjectType(null);
    }

    /**
     * 获取对象的所有者。
     * 
     * @return 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public final String
    getParent()
    {
        return getParent(null);
    }

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getProperty(String name, Ice.StringHolder value)
    {
        return getProperty(name, value, null);
    }

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getPropertyList(PropertyListHolder list)
    {
        return getPropertyList(list, null);
    }

    /**
     * 获取对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getState(ObjectStateHolder state)
    {
        return getState(state, null);
    }

    /**
     * 获取对象的统计信息.
     * 
     * @param info 格式化的统计信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    getStatistics(StatisticsListHolder info)
    {
        return getStatistics(info, null);
    }

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    recvMessage(byte[] msg)
    {
        return recvMessage(msg, null);
    }

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    registerMsg(int msgID, String ObjectID)
    {
        return registerMsg(msgID, ObjectID, null);
    }

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    registerMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return registerMsgWithLocator(msgID, ObjectID, locator, null);
    }

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setParent(String parent)
    {
        return setParent(parent, null);
    }

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setProperty(String name, String value)
    {
        return setProperty(name, value, null);
    }

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setPropertyList(java.util.Map<java.lang.String, java.lang.String> list)
    {
        return setPropertyList(list, null);
    }

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    setState(ObjectState state)
    {
        return setState(state, null);
    }

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要取消接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    unregisterMsg(int msgID, String ObjectID)
    {
        return unregisterMsg(msgID, ObjectID, null);
    }

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public final int
    unregisterMsgWithLocator(int msgID, String ObjectID, String locator)
    {
        return unregisterMsgWithLocator(msgID, ObjectID, locator, null);
    }

    public static Ice.DispatchStatus
    ___enumPadList(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        PadListHolder list = new PadListHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.enumPadList(list, __current);
        PadListHelper.write(__os, list.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___queryPadByIndex(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        PadDirection dir;
        dir = PadDirection.__read(__is);
        int[] indexList;
        indexList = IntSeqHelper.read(__is);
        __is.endReadEncaps();
        PadListHolder list = new PadListHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.queryPadByIndex(dir, indexList, list, __current);
        PadListHelper.write(__os, list.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___queryPadByDirection(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        PadDirection dir;
        dir = PadDirection.__read(__is);
        __is.endReadEncaps();
        PadListHolder list = new PadListHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.queryPadByDirection(dir, list, __current);
        PadListHelper.write(__os, list.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___setPadCapability(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        PadDirection dir;
        dir = PadDirection.__read(__is);
        int index;
        index = __is.readInt();
        String capability;
        capability = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.setPadCapability(dir, index, capability, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getPadCapability(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        PadDirection dir;
        dir = PadDirection.__read(__is);
        int index;
        index = __is.readInt();
        __is.endReadEncaps();
        Ice.StringHolder capability = new Ice.StringHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getPadCapability(dir, index, capability, __current);
        __os.writeString(capability.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___recvEvent(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        PadDirection dir;
        dir = PadDirection.__read(__is);
        int index;
        index = __is.readInt();
        byte[] event;
        event = ByteSeqHelper.read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.recvEvent(dir, index, event, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___enumEventList(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        EventDescListHolder eventList = new EventDescListHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.enumEventList(eventList, __current);
        EventDescListHelper.write(__os, eventList.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getSourceList(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        LinkListHolder list = new LinkListHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getSourceList(list, __current);
        LinkListHelper.write(__os, list.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getDeliverList(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        LinkListHolder list = new LinkListHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.getDeliverList(list, __current);
        LinkListHelper.write(__os, list.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___addDeliverDst(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String dst;
        dst = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.addDeliverDst(dst, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___addDeliverDstEx(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String dst;
        dst = __is.readString();
        int dstPadIndex;
        dstPadIndex = __is.readInt();
        int srcPadIndex;
        srcPadIndex = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.addDeliverDstEx(dst, dstPadIndex, srcPadIndex, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___removeDeliverDst(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String dst;
        dst = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.removeDeliverDst(dst, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___removeDeliverDstEx(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String dst;
        dst = __is.readString();
        int dstPadIndex;
        dstPadIndex = __is.readInt();
        int srcPadIndex;
        srcPadIndex = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.removeDeliverDstEx(dst, dstPadIndex, srcPadIndex, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___recvMedia(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int padIndex;
        padIndex = __is.readInt();
        byte[] seq;
        seq = ByteSeqHelper.read(__is);
        __is.endReadEncaps();
        __obj.recvMedia(padIndex, seq, __current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___addSource(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String sourceID;
        sourceID = __is.readString();
        int sourcePadIndex;
        sourcePadIndex = __is.readInt();
        String sourceName;
        sourceName = __is.readString();
        int dstPadIndex;
        dstPadIndex = __is.readInt();
        TransferMode mode;
        mode = TransferMode.__read(__is);
        String modeInfo;
        modeInfo = __is.readString();
        __is.endReadEncaps();
        Ice.IntHolder outDstPadIndex = new Ice.IntHolder();
        Ice.StringHolder dstNodeName = new Ice.StringHolder();
        Ice.StringHolder dstMgrID = new Ice.StringHolder();
        Ice.IntHolder dstNodeIndex = new Ice.IntHolder();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.addSource(sourceID, sourcePadIndex, sourceName, dstPadIndex, mode, modeInfo, outDstPadIndex, dstNodeName, dstMgrID, dstNodeIndex, __current);
        __os.writeInt(outDstPadIndex.value);
        __os.writeString(dstNodeName.value);
        __os.writeString(dstMgrID.value);
        __os.writeInt(dstNodeIndex.value);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___removeSource(MediaNode __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String sourceID;
        sourceID = __is.readString();
        int sourcePadIndex;
        sourcePadIndex = __is.readInt();
        int dstPadIndex;
        dstPadIndex = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.removeSource(sourceID, sourcePadIndex, dstPadIndex, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "addDeliverDst",
        "addDeliverDstEx",
        "addSource",
        "enumEventList",
        "enumMessageList",
        "enumPadList",
        "enumProperty",
        "enumPropertyList",
        "getDeliverList",
        "getID",
        "getName",
        "getObjectType",
        "getPadCapability",
        "getParent",
        "getProperty",
        "getPropertyList",
        "getSourceList",
        "getState",
        "getStatistics",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "queryPadByDirection",
        "queryPadByIndex",
        "recvEvent",
        "recvMedia",
        "recvMessage",
        "registerMsg",
        "registerMsgWithLocator",
        "removeDeliverDst",
        "removeDeliverDstEx",
        "removeSource",
        "setPadCapability",
        "setParent",
        "setProperty",
        "setPropertyList",
        "setState",
        "unregisterMsg",
        "unregisterMsgWithLocator"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___addDeliverDst(this, in, __current);
            }
            case 1:
            {
                return ___addDeliverDstEx(this, in, __current);
            }
            case 2:
            {
                return ___addSource(this, in, __current);
            }
            case 3:
            {
                return ___enumEventList(this, in, __current);
            }
            case 4:
            {
                return _VMXObjectDisp.___enumMessageList(this, in, __current);
            }
            case 5:
            {
                return ___enumPadList(this, in, __current);
            }
            case 6:
            {
                return _VMXObjectDisp.___enumProperty(this, in, __current);
            }
            case 7:
            {
                return _VMXObjectDisp.___enumPropertyList(this, in, __current);
            }
            case 8:
            {
                return ___getDeliverList(this, in, __current);
            }
            case 9:
            {
                return _VMXObjectDisp.___getID(this, in, __current);
            }
            case 10:
            {
                return _VMXObjectDisp.___getName(this, in, __current);
            }
            case 11:
            {
                return _VMXObjectDisp.___getObjectType(this, in, __current);
            }
            case 12:
            {
                return ___getPadCapability(this, in, __current);
            }
            case 13:
            {
                return _VMXObjectDisp.___getParent(this, in, __current);
            }
            case 14:
            {
                return _VMXObjectDisp.___getProperty(this, in, __current);
            }
            case 15:
            {
                return _VMXObjectDisp.___getPropertyList(this, in, __current);
            }
            case 16:
            {
                return ___getSourceList(this, in, __current);
            }
            case 17:
            {
                return _VMXObjectDisp.___getState(this, in, __current);
            }
            case 18:
            {
                return _VMXObjectDisp.___getStatistics(this, in, __current);
            }
            case 19:
            {
                return ___ice_id(this, in, __current);
            }
            case 20:
            {
                return ___ice_ids(this, in, __current);
            }
            case 21:
            {
                return ___ice_isA(this, in, __current);
            }
            case 22:
            {
                return ___ice_ping(this, in, __current);
            }
            case 23:
            {
                return ___queryPadByDirection(this, in, __current);
            }
            case 24:
            {
                return ___queryPadByIndex(this, in, __current);
            }
            case 25:
            {
                return ___recvEvent(this, in, __current);
            }
            case 26:
            {
                return ___recvMedia(this, in, __current);
            }
            case 27:
            {
                return _VMXObjectDisp.___recvMessage(this, in, __current);
            }
            case 28:
            {
                return _VMXObjectDisp.___registerMsg(this, in, __current);
            }
            case 29:
            {
                return _VMXObjectDisp.___registerMsgWithLocator(this, in, __current);
            }
            case 30:
            {
                return ___removeDeliverDst(this, in, __current);
            }
            case 31:
            {
                return ___removeDeliverDstEx(this, in, __current);
            }
            case 32:
            {
                return ___removeSource(this, in, __current);
            }
            case 33:
            {
                return ___setPadCapability(this, in, __current);
            }
            case 34:
            {
                return _VMXObjectDisp.___setParent(this, in, __current);
            }
            case 35:
            {
                return _VMXObjectDisp.___setProperty(this, in, __current);
            }
            case 36:
            {
                return _VMXObjectDisp.___setPropertyList(this, in, __current);
            }
            case 37:
            {
                return _VMXObjectDisp.___setState(this, in, __current);
            }
            case 38:
            {
                return _VMXObjectDisp.___unregisterMsg(this, in, __current);
            }
            case 39:
            {
                return _VMXObjectDisp.___unregisterMsgWithLocator(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type vmxICE::MediaNode was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type vmxICE::MediaNode was not generated with stream support";
        throw ex;
    }
}
