// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `VMXObjectPrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package vmxICE;

/**
 * [VMXObject]是mmap6框架中所有对象的基类，提供了mmap6框架中对象的基本接口定义。
 **/
public interface VMXObjectPrx extends Ice.ObjectPrx
{
    /**
     * 枚举对象的属性信息列表.
     * 
     * @param list 属性信息列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int enumPropertyList(PropertyInfoListHolder list);

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param list 属性信息列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int enumPropertyList(PropertyInfoListHolder list, java.util.Map<String, String> __ctx);

    /**
     * 枚举对象的属性信息列表.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumPropertyList();

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx);

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumPropertyList(Ice.Callback __cb);

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumPropertyList(Callback_VMXObject_enumPropertyList __cb);

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumPropertyList(java.util.Map<String, String> __ctx, Callback_VMXObject_enumPropertyList __cb);

    /**
     * 枚举对象的属性信息列表.
     * 
     * @param list 属性信息列表
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_enumPropertyList(PropertyInfoListHolder list, Ice.AsyncResult __result);

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param info 属性信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int enumProperty(String name, PropertyInfoHolder info);

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param info 属性信息
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int enumProperty(String name, PropertyInfoHolder info, java.util.Map<String, String> __ctx);

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumProperty(String name);

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx);

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, Ice.Callback __cb);

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, Callback_VMXObject_enumProperty __cb);

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumProperty(String name, java.util.Map<String, String> __ctx, Callback_VMXObject_enumProperty __cb);

    /**
     * 枚举对象的单个属性信息.
     * 
     * @param info 属性信息
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_enumProperty(PropertyInfoHolder info, Ice.AsyncResult __result);

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setPropertyList(java.util.Map<java.lang.String, java.lang.String> list);

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx);

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list);

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx);

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, Ice.Callback __cb);

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, Callback_VMXObject_setPropertyList __cb);

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param list 属性名称和对应的值的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setPropertyList(java.util.Map<java.lang.String, java.lang.String> list, java.util.Map<String, String> __ctx, Callback_VMXObject_setPropertyList __cb);

    /**
     * 以列表的形式设置指定属性的值.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setPropertyList(Ice.AsyncResult __result);

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getPropertyList(PropertyListHolder list);

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getPropertyList(PropertyListHolder list, java.util.Map<String, String> __ctx);

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertyList();

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx);

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertyList(Ice.Callback __cb);

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertyList(Callback_VMXObject_getPropertyList __cb);

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertyList(java.util.Map<String, String> __ctx, Callback_VMXObject_getPropertyList __cb);

    /**
     * 以列表的形式获取指定属性的值.
     * 
     * @param list 输入为属性名称列表，输出为名称和值对应的列表
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getPropertyList(PropertyListHolder list, Ice.AsyncResult __result);

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setProperty(String name, String value);

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setProperty(String name, String value, java.util.Map<String, String> __ctx);

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value);

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx);

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, Ice.Callback __cb);

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, Callback_VMXObject_setProperty __cb);

    /**
     * 设置属性值.
     * 
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setProperty(String name, String value, java.util.Map<String, String> __ctx, Callback_VMXObject_setProperty __cb);

    /**
     * 设置属性值.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setProperty(Ice.AsyncResult __result);

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getProperty(String name, Ice.StringHolder value);

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param value 属性值
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getProperty(String name, Ice.StringHolder value, java.util.Map<String, String> __ctx);

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String name);

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx);

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String name, Ice.Callback __cb);

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String name, Callback_VMXObject_getProperty __cb);

    /**
     * 获取属性值.
     * 
     * @param name 属性名称
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String name, java.util.Map<String, String> __ctx, Callback_VMXObject_getProperty __cb);

    /**
     * 获取属性值.
     * 
     * @param value 属性值
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getProperty(Ice.StringHolder value, Ice.AsyncResult __result);

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int enumMessageList(MsgDescListHolder msgList);

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int enumMessageList(MsgDescListHolder msgList, java.util.Map<String, String> __ctx);

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumMessageList();

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx);

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumMessageList(Ice.Callback __cb);

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumMessageList(Callback_VMXObject_enumMessageList __cb);

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumMessageList(java.util.Map<String, String> __ctx, Callback_VMXObject_enumMessageList __cb);

    /**
     * 枚举节点在运行过程中会发送的所有消息的ID及其描述。
     * 
     * @param msgList 消息ID列表，在vmx_msg::CMessage类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_enumMessageList(MsgDescListHolder msgList, Ice.AsyncResult __result);

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setParent(String parent);

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setParent(String parent, java.util.Map<String, String> __ctx);

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setParent(String parent);

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx);

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setParent(String parent, Ice.Callback __cb);

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setParent(String parent, Callback_VMXObject_setParent __cb);

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param parent 父亲的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setParent(String parent, java.util.Map<String, String> __ctx, Callback_VMXObject_setParent __cb);

    /**
     * 给对象设置所有者，对象的大部分消息都会给所有者发送.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setParent(Ice.AsyncResult __result);

    /**
     * 获取对象的所有者。
     * 
     * @return 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String getParent();

    /**
     * 获取对象的所有者。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String getParent(java.util.Map<String, String> __ctx);

    /**
     * 获取对象的所有者。
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getParent();

    /**
     * 获取对象的所有者。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx);

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getParent(Ice.Callback __cb);

    /**
     * 获取对象的所有者。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取对象的所有者。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getParent(Callback_VMXObject_getParent __cb);

    /**
     * 获取对象的所有者。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getParent(java.util.Map<String, String> __ctx, Callback_VMXObject_getParent __cb);

    /**
     * 获取对象的所有者。
     * 
     * @param __result The asynchronous result object.
     * @return 返回对象的所有者的ICE ID，如果没有所有者，则返回空字符串.
     * 
     **/
    public String end_getParent(Ice.AsyncResult __result);

    /**
     * 获取对象类型特征。
     * 
     * @return 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int getObjectType();

    /**
     * 获取对象类型特征。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int getObjectType(java.util.Map<String, String> __ctx);

    /**
     * 获取对象类型特征。
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectType();

    /**
     * 获取对象类型特征。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx);

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectType(Ice.Callback __cb);

    /**
     * 获取对象类型特征。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取对象类型特征。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectType(Callback_VMXObject_getObjectType __cb);

    /**
     * 获取对象类型特征。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getObjectType(java.util.Map<String, String> __ctx, Callback_VMXObject_getObjectType __cb);

    /**
     * 获取对象类型特征。
     * 
     * @param __result The asynchronous result object.
     * @return 返回对象的类型，有[ObjectTypeMediaNode],[ObjectTypeContainer],[ObjectTypeHasAPI],[ObjectTypeApplication]四种，这四种类型可以并存.
     * 
     **/
    public int end_getObjectType(Ice.AsyncResult __result);

    /**
     * 获取对象名称.
     * 
     * @return 返回对象的名称.
     * 
     **/
    public String getName();

    /**
     * 获取对象名称.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的名称.
     * 
     **/
    public String getName(java.util.Map<String, String> __ctx);

    /**
     * 获取对象名称.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getName();

    /**
     * 获取对象名称.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx);

    /**
     * 获取对象名称.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getName(Ice.Callback __cb);

    /**
     * 获取对象名称.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取对象名称.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getName(Callback_VMXObject_getName __cb);

    /**
     * 获取对象名称.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Callback_VMXObject_getName __cb);

    /**
     * 获取对象名称.
     * 
     * @param __result The asynchronous result object.
     * @return 返回对象的名称.
     * 
     **/
    public String end_getName(Ice.AsyncResult __result);

    /**
     * 获取对象的ICE ID.
     * 
     * @return 返回对象的ICE ID.
     * 
     **/
    public String getID();

    /**
     * 获取对象的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回对象的ICE ID.
     * 
     **/
    public String getID(java.util.Map<String, String> __ctx);

    /**
     * 获取对象的ICE ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getID();

    /**
     * 获取对象的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx);

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getID(Ice.Callback __cb);

    /**
     * 获取对象的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取对象的ICE ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getID(Callback_VMXObject_getID __cb);

    /**
     * 获取对象的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, Callback_VMXObject_getID __cb);

    /**
     * 获取对象的ICE ID.
     * 
     * @param __result The asynchronous result object.
     * @return 返回对象的ICE ID.
     * 
     **/
    public String end_getID(Ice.AsyncResult __result);

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setState(ObjectState state);

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setState(ObjectState state, java.util.Map<String, String> __ctx);

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setState(ObjectState state);

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, java.util.Map<String, String> __ctx);

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, Ice.Callback __cb);

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, Callback_VMXObject_setState __cb);

    /**
     * 设置对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setState(ObjectState state, java.util.Map<String, String> __ctx, Callback_VMXObject_setState __cb);

    /**
     * 设置对象的状态。
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setState(Ice.AsyncResult __result);

    /**
     * 获取对象的状态。
     * 
     * @param state 状态值.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getState(ObjectStateHolder state);

    /**
     * 获取对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getState(ObjectStateHolder state, java.util.Map<String, String> __ctx);

    /**
     * 获取对象的状态。
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getState();

    /**
     * 获取对象的状态。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx);

    /**
     * 获取对象的状态。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getState(Ice.Callback __cb);

    /**
     * 获取对象的状态。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取对象的状态。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getState(Callback_VMXObject_getState __cb);

    /**
     * 获取对象的状态。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Callback_VMXObject_getState __cb);

    /**
     * 获取对象的状态。
     * 
     * @param state 状态值.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getState(ObjectStateHolder state, Ice.AsyncResult __result);

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int recvMessage(byte[] msg);

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int recvMessage(byte[] msg, java.util.Map<String, String> __ctx);

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg);

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx);

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, Ice.Callback __cb);

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, Callback_VMXObject_recvMessage __cb);

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param msg 消息的内容，通过vmx_msg::CMessage类来解析，该类描述在基础库libmessage的mmap_libmessage.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvMessage(byte[] msg, java.util.Map<String, String> __ctx, Callback_VMXObject_recvMessage __cb);

    /**
     * 接收消息的回调函数，由框架触发，而不是使用者.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_recvMessage(Ice.AsyncResult __result);

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int registerMsg(int msgID, String ObjectID);

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx);

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID);

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx);

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, Ice.Callback __cb);

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, Callback_VMXObject_registerMsg __cb);

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Callback_VMXObject_registerMsg __cb);

    /**
     * 消息注册函数，将ICE ID为参数ObjectID的对象注册到被调用的对象上，当被调用的对象抛出了ID为msgID的消息时，ICE ID为ObjectID的对象将会收到该消息.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_registerMsg(Ice.AsyncResult __result);

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要取消接收消息的对象的ICE ID。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int unregisterMsg(int msgID, String ObjectID);

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要取消接收消息的对象的ICE ID。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx);

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID);

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx);

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, Ice.Callback __cb);

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, Callback_VMXObject_unregisterMsg __cb);

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterMsg(int msgID, String ObjectID, java.util.Map<String, String> __ctx, Callback_VMXObject_unregisterMsg __cb);

    /**
     * 消息取消注册函数，将ICE ID为参数ObjectID的对象取消在被调用对象上针对ID为msgID的消息的关注，如果msgID为CMessage::MSG_ID_NULL，
     * 则取消ICE ID为objectID对象在被调用对象上所有消息的注册.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_unregisterMsg(Ice.AsyncResult __result);

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int registerMsgWithLocator(int msgID, String ObjectID, String locator);

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx);

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator);

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx);

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, Ice.Callback __cb);

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, Callback_VMXObject_registerMsgWithLocator __cb);

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Callback_VMXObject_registerMsgWithLocator __cb);

    /**
     * 消息注册函数，和[registerMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要获取消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_registerMsgWithLocator(Ice.AsyncResult __result);

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int unregisterMsgWithLocator(int msgID, String ObjectID, String locator);

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param ObjectID 要接收消息的对象的ICE ID。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx);

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator);

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx);

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, Ice.Callback __cb);

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, Callback_VMXObject_unregisterMsgWithLocator __cb);

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param msgID 消息的ID, ID类型描述在基础库libmessage的mmap_libmessage.h头文件中，或者在某个项目对消息类的扩展的头文件定义中。
     * @param locator 对应ice框架中的locator。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterMsgWithLocator(int msgID, String ObjectID, String locator, java.util.Map<String, String> __ctx, Callback_VMXObject_unregisterMsgWithLocator __cb);

    /**
     * 消息取消注册函数，和[unregisterMsg]不同之处在于这个函数支持通过ice的locator来进行注册，也即是说想要取消注册消息的对象可以和目标对象不在同一个icegrid中.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_unregisterMsgWithLocator(Ice.AsyncResult __result);

    /**
     * 获取对象的统计信息.
     * 
     * @param info 格式化的统计信息
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getStatistics(StatisticsListHolder info);

    /**
     * 获取对象的统计信息.
     * 
     * @param info 格式化的统计信息
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getStatistics(StatisticsListHolder info, java.util.Map<String, String> __ctx);

    /**
     * 获取对象的统计信息.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getStatistics();

    /**
     * 获取对象的统计信息.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx);

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getStatistics(Ice.Callback __cb);

    /**
     * 获取对象的统计信息.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取对象的统计信息.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getStatistics(Callback_VMXObject_getStatistics __cb);

    /**
     * 获取对象的统计信息.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getStatistics(java.util.Map<String, String> __ctx, Callback_VMXObject_getStatistics __cb);

    /**
     * 获取对象的统计信息.
     * 
     * @param info 格式化的统计信息
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getStatistics(StatisticsListHolder info, Ice.AsyncResult __result);
}
