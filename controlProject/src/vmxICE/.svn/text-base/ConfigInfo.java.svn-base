// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ConfigInfo.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package vmxICE;

public class ConfigInfo implements java.lang.Cloneable, java.io.Serializable
{
    public String ItemName;

    public String ItemValue;

    public String ItemInfo;

    public ConfigType ItemType;

    public String ItemDefaultValue;

    public String ItemValueRange;

    public ConfigInfo()
    {
    }

    public ConfigInfo(String ItemName, String ItemValue, String ItemInfo, ConfigType ItemType, String ItemDefaultValue, String ItemValueRange)
    {
        this.ItemName = ItemName;
        this.ItemValue = ItemValue;
        this.ItemInfo = ItemInfo;
        this.ItemType = ItemType;
        this.ItemDefaultValue = ItemDefaultValue;
        this.ItemValueRange = ItemValueRange;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ConfigInfo _r = null;
        try
        {
            _r = (ConfigInfo)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(ItemName != _r.ItemName)
            {
                if(ItemName == null || _r.ItemName == null || !ItemName.equals(_r.ItemName))
                {
                    return false;
                }
            }
            if(ItemValue != _r.ItemValue)
            {
                if(ItemValue == null || _r.ItemValue == null || !ItemValue.equals(_r.ItemValue))
                {
                    return false;
                }
            }
            if(ItemInfo != _r.ItemInfo)
            {
                if(ItemInfo == null || _r.ItemInfo == null || !ItemInfo.equals(_r.ItemInfo))
                {
                    return false;
                }
            }
            if(ItemType != _r.ItemType)
            {
                if(ItemType == null || _r.ItemType == null || !ItemType.equals(_r.ItemType))
                {
                    return false;
                }
            }
            if(ItemDefaultValue != _r.ItemDefaultValue)
            {
                if(ItemDefaultValue == null || _r.ItemDefaultValue == null || !ItemDefaultValue.equals(_r.ItemDefaultValue))
                {
                    return false;
                }
            }
            if(ItemValueRange != _r.ItemValueRange)
            {
                if(ItemValueRange == null || _r.ItemValueRange == null || !ItemValueRange.equals(_r.ItemValueRange))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(ItemName != null)
        {
            __h = 5 * __h + ItemName.hashCode();
        }
        if(ItemValue != null)
        {
            __h = 5 * __h + ItemValue.hashCode();
        }
        if(ItemInfo != null)
        {
            __h = 5 * __h + ItemInfo.hashCode();
        }
        if(ItemType != null)
        {
            __h = 5 * __h + ItemType.hashCode();
        }
        if(ItemDefaultValue != null)
        {
            __h = 5 * __h + ItemDefaultValue.hashCode();
        }
        if(ItemValueRange != null)
        {
            __h = 5 * __h + ItemValueRange.hashCode();
        }
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(ItemName);
        __os.writeString(ItemValue);
        __os.writeString(ItemInfo);
        ItemType.__write(__os);
        __os.writeString(ItemDefaultValue);
        __os.writeString(ItemValueRange);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        ItemName = __is.readString();
        ItemValue = __is.readString();
        ItemInfo = __is.readString();
        ItemType = ConfigType.__read(__is);
        ItemDefaultValue = __is.readString();
        ItemValueRange = __is.readString();
    }
}
