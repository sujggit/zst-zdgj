// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `MediaNodePrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package vmxICE;

/**
 * [MediaNode]是mmap6框架中的多媒体节点基类，提供了多媒体节点的通用接口。
 **/
public interface MediaNodePrx extends VMXObjectPrx
{
    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param list Pad信息列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int enumPadList(PadListHolder list);

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param list Pad信息列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int enumPadList(PadListHolder list, java.util.Map<String, String> __ctx);

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumPadList();

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumPadList(java.util.Map<String, String> __ctx);

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumPadList(Ice.Callback __cb);

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumPadList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumPadList(Callback_MediaNode_enumPadList __cb);

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumPadList(java.util.Map<String, String> __ctx, Callback_MediaNode_enumPadList __cb);

    /**
     * 枚举节点中所有Pad的信息。
     * 
     * @param list Pad信息列表.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_enumPadList(PadListHolder list, Ice.AsyncResult __result);

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param dir pad的类型.
     * @param indexList index列表.
     * @param list Pad列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int queryPadByIndex(PadDirection dir, int[] indexList, PadListHolder list);

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param dir pad的类型.
     * @param indexList index列表.
     * @param list Pad列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int queryPadByIndex(PadDirection dir, int[] indexList, PadListHolder list, java.util.Map<String, String> __ctx);

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param dir pad的类型.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_queryPadByIndex(PadDirection dir, int[] indexList);

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param dir pad的类型.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_queryPadByIndex(PadDirection dir, int[] indexList, java.util.Map<String, String> __ctx);

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param dir pad的类型.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_queryPadByIndex(PadDirection dir, int[] indexList, Ice.Callback __cb);

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param dir pad的类型.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_queryPadByIndex(PadDirection dir, int[] indexList, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param dir pad的类型.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_queryPadByIndex(PadDirection dir, int[] indexList, Callback_MediaNode_queryPadByIndex __cb);

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param dir pad的类型.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_queryPadByIndex(PadDirection dir, int[] indexList, java.util.Map<String, String> __ctx, Callback_MediaNode_queryPadByIndex __cb);

    /**
     * 枚举节点中指定index的Pad的信息。
     * 
     * @param list Pad列表.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_queryPadByIndex(PadListHolder list, Ice.AsyncResult __result);

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param dir pad的输入输出类型.
     * @param list Pad列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int queryPadByDirection(PadDirection dir, PadListHolder list);

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param dir pad的输入输出类型.
     * @param list Pad列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int queryPadByDirection(PadDirection dir, PadListHolder list, java.util.Map<String, String> __ctx);

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param dir pad的输入输出类型.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_queryPadByDirection(PadDirection dir);

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param dir pad的输入输出类型.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_queryPadByDirection(PadDirection dir, java.util.Map<String, String> __ctx);

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param dir pad的输入输出类型.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_queryPadByDirection(PadDirection dir, Ice.Callback __cb);

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param dir pad的输入输出类型.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_queryPadByDirection(PadDirection dir, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param dir pad的输入输出类型.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_queryPadByDirection(PadDirection dir, Callback_MediaNode_queryPadByDirection __cb);

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param dir pad的输入输出类型.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_queryPadByDirection(PadDirection dir, java.util.Map<String, String> __ctx, Callback_MediaNode_queryPadByDirection __cb);

    /**
     * 枚举节点中的输入或者输出pad的信息。
     * 
     * @param list Pad列表.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_queryPadByDirection(PadListHolder list, Ice.AsyncResult __result);

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param capability 媒体流的详细描述.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setPadCapability(PadDirection dir, int index, String capability);

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param capability 媒体流的详细描述.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int setPadCapability(PadDirection dir, int index, String capability, java.util.Map<String, String> __ctx);

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param capability 媒体流的详细描述.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setPadCapability(PadDirection dir, int index, String capability);

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param capability 媒体流的详细描述.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setPadCapability(PadDirection dir, int index, String capability, java.util.Map<String, String> __ctx);

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param capability 媒体流的详细描述.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setPadCapability(PadDirection dir, int index, String capability, Ice.Callback __cb);

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param capability 媒体流的详细描述.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setPadCapability(PadDirection dir, int index, String capability, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param capability 媒体流的详细描述.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setPadCapability(PadDirection dir, int index, String capability, Callback_MediaNode_setPadCapability __cb);

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param capability 媒体流的详细描述.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setPadCapability(PadDirection dir, int index, String capability, java.util.Map<String, String> __ctx, Callback_MediaNode_setPadCapability __cb);

    /**
     * 设置节点中指定index的Pad的媒体流描述信息。
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_setPadCapability(Ice.AsyncResult __result);

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param capability 媒体流的详细描述.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getPadCapability(PadDirection dir, int index, Ice.StringHolder capability);

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param capability 媒体流的详细描述.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getPadCapability(PadDirection dir, int index, Ice.StringHolder capability, java.util.Map<String, String> __ctx);

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPadCapability(PadDirection dir, int index);

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPadCapability(PadDirection dir, int index, java.util.Map<String, String> __ctx);

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPadCapability(PadDirection dir, int index, Ice.Callback __cb);

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPadCapability(PadDirection dir, int index, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPadCapability(PadDirection dir, int index, Callback_MediaNode_getPadCapability __cb);

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param dir pad的类型.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPadCapability(PadDirection dir, int index, java.util.Map<String, String> __ctx, Callback_MediaNode_getPadCapability __cb);

    /**
     * 获取节点中指定index的Pad的媒体流描述信息。
     * 
     * @param capability 媒体流的详细描述.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getPadCapability(Ice.StringHolder capability, Ice.AsyncResult __result);

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int recvEvent(PadDirection dir, int index, byte[] event);

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param dir pad的类型.
     * @param index pad的索引.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int recvEvent(PadDirection dir, int index, byte[] event, java.util.Map<String, String> __ctx);

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param dir pad的类型.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvEvent(PadDirection dir, int index, byte[] event);

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param dir pad的类型.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvEvent(PadDirection dir, int index, byte[] event, java.util.Map<String, String> __ctx);

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param dir pad的类型.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvEvent(PadDirection dir, int index, byte[] event, Ice.Callback __cb);

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param dir pad的类型.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvEvent(PadDirection dir, int index, byte[] event, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param dir pad的类型.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvEvent(PadDirection dir, int index, byte[] event, Callback_MediaNode_recvEvent __cb);

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param dir pad的类型.
     * @param event 事件的内容，通过vmx_event::CEvent类来解析，该类描述在基础库libevent的mmap_libevent.h头文件中。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvEvent(PadDirection dir, int index, byte[] event, java.util.Map<String, String> __ctx, Callback_MediaNode_recvEvent __cb);

    /**
     * 接收事件的回调函数，由框架触发，而不是使用者.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_recvEvent(Ice.AsyncResult __result);

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param msgList 事件ID列表，在vmx_msg::CEvent类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int enumEventList(EventDescListHolder eventList);

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param msgList 事件ID列表，在vmx_msg::CEvent类中有基础定义，另外在各项目中可能会有扩展定义.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int enumEventList(EventDescListHolder eventList, java.util.Map<String, String> __ctx);

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumEventList();

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumEventList(java.util.Map<String, String> __ctx);

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumEventList(Ice.Callback __cb);

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumEventList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumEventList(Callback_MediaNode_enumEventList __cb);

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_enumEventList(java.util.Map<String, String> __ctx, Callback_MediaNode_enumEventList __cb);

    /**
     * 枚举节点在运行过程中会发送的所有事件的ID及其描述。
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_enumEventList(EventDescListHolder eventList, Ice.AsyncResult __result);

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param list 上游节点的描述列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getSourceList(LinkListHolder list);

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param list 上游节点的描述列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getSourceList(LinkListHolder list, java.util.Map<String, String> __ctx);

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSourceList();

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSourceList(java.util.Map<String, String> __ctx);

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSourceList(Ice.Callback __cb);

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSourceList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSourceList(Callback_MediaNode_getSourceList __cb);

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSourceList(java.util.Map<String, String> __ctx, Callback_MediaNode_getSourceList __cb);

    /**
     * 获取和节点相连的上游节点列表。
     * 
     * @param list 上游节点的描述列表.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getSourceList(LinkListHolder list, Ice.AsyncResult __result);

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param list 下游节点的描述列表.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getDeliverList(LinkListHolder list);

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param list 下游节点的描述列表.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int getDeliverList(LinkListHolder list, java.util.Map<String, String> __ctx);

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDeliverList();

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDeliverList(java.util.Map<String, String> __ctx);

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDeliverList(Ice.Callback __cb);

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDeliverList(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDeliverList(Callback_MediaNode_getDeliverList __cb);

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDeliverList(java.util.Map<String, String> __ctx, Callback_MediaNode_getDeliverList __cb);

    /**
     * 获取和节点相连的下游节点列表。
     * 
     * @param list 下游节点的描述列表.
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_getDeliverList(LinkListHolder list, Ice.AsyncResult __result);

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addDeliverDst(String dst);

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addDeliverDst(String dst, java.util.Map<String, String> __ctx);

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addDeliverDst(String dst);

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addDeliverDst(String dst, java.util.Map<String, String> __ctx);

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addDeliverDst(String dst, Ice.Callback __cb);

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addDeliverDst(String dst, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addDeliverDst(String dst, Callback_MediaNode_addDeliverDst __cb);

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addDeliverDst(String dst, java.util.Map<String, String> __ctx, Callback_MediaNode_addDeliverDst __cb);

    /**
     * 添加节点的下一个数据传输节点。
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addDeliverDst(Ice.AsyncResult __result);

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * @param dstPadIndex 接收数据的节点的输入pad索引，如果为[InvalidPadIndex]则表示不指定.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex);

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * @param dstPadIndex 接收数据的节点的输入pad索引，如果为[InvalidPadIndex]则表示不指定.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx);

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex);

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx);

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, Ice.Callback __cb);

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, Callback_MediaNode_addDeliverDstEx __cb);

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param dst 接收数据的节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx, Callback_MediaNode_addDeliverDstEx __cb);

    /**
     * 添加节点的下一个数据传输节点，和[addDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex，用于指定传输源节点的哪条数据流到目标节点的哪个接收Pad上。
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addDeliverDstEx(Ice.AsyncResult __result);

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param dst 下游节点的ICE ID.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeDeliverDst(String dst);

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param dst 下游节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeDeliverDst(String dst, java.util.Map<String, String> __ctx);

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param dst 下游节点的ICE ID.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeDeliverDst(String dst);

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param dst 下游节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeDeliverDst(String dst, java.util.Map<String, String> __ctx);

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param dst 下游节点的ICE ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeDeliverDst(String dst, Ice.Callback __cb);

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param dst 下游节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeDeliverDst(String dst, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param dst 下游节点的ICE ID.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeDeliverDst(String dst, Callback_MediaNode_removeDeliverDst __cb);

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param dst 下游节点的ICE ID.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeDeliverDst(String dst, java.util.Map<String, String> __ctx, Callback_MediaNode_removeDeliverDst __cb);

    /**
     * 删除与操作节点相连的下一个节点。
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeDeliverDst(Ice.AsyncResult __result);

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param dst 下游节点的ICE ID.
     * @param dstPadIndex 接收数据的节点的输入pad索引，如果为[InvalidPadIndex]则表示不指定.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex);

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param dst 下游节点的ICE ID.
     * @param dstPadIndex 接收数据的节点的输入pad索引，如果为[InvalidPadIndex]则表示不指定.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx);

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param dst 下游节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex);

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param dst 下游节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx);

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param dst 下游节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, Ice.Callback __cb);

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param dst 下游节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param dst 下游节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, Callback_MediaNode_removeDeliverDstEx __cb);

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param dst 下游节点的ICE ID.
     * @param srcPadIndex 传输数据的节点的输出pad索引，如果为[InvalidPadIndex]则表示不指定.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeDeliverDstEx(String dst, int dstPadIndex, int srcPadIndex, java.util.Map<String, String> __ctx, Callback_MediaNode_removeDeliverDstEx __cb);

    /**
     * 删除与操作节点相连的下一个节点，和[removeDeliverDst]的区别在于可以设置源节点和目标节点的PadIndex。
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeDeliverDstEx(Ice.AsyncResult __result);

    /**
     * 节点的接收数据函数。
     * 
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     * @param seq 传递的数据包，数据包的格式通过vmx_media::IMediaFrameBuffer的toVector()获取，同样，这种数据包可以通过vmx_media::IMediaFrameBuffer.fromVector()来解析.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public void recvMedia(int padIndex, byte[] seq);

    /**
     * 节点的接收数据函数。
     * 
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     * @param seq 传递的数据包，数据包的格式通过vmx_media::IMediaFrameBuffer的toVector()获取，同样，这种数据包可以通过vmx_media::IMediaFrameBuffer.fromVector()来解析.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public void recvMedia(int padIndex, byte[] seq, java.util.Map<String, String> __ctx);

    /**
     * 节点的接收数据函数。
     * 
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvMedia(int padIndex, byte[] seq);

    /**
     * 节点的接收数据函数。
     * 
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvMedia(int padIndex, byte[] seq, java.util.Map<String, String> __ctx);

    /**
     * 节点的接收数据函数。
     * 
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvMedia(int padIndex, byte[] seq, Ice.Callback __cb);

    /**
     * 节点的接收数据函数。
     * 
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvMedia(int padIndex, byte[] seq, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 节点的接收数据函数。
     * 
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvMedia(int padIndex, byte[] seq, Callback_MediaNode_recvMedia __cb);

    /**
     * 节点的接收数据函数。
     * 
     * @param padIndex 数据到达的节点的pad的索引，索引的值需要和调用[addDeliverDstEx]时设定的index相同.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_recvMedia(int padIndex, byte[] seq, java.util.Map<String, String> __ctx, Callback_MediaNode_recvMedia __cb);

    /**
     * 节点的接收数据函数。
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public void end_recvMedia(Ice.AsyncResult __result);

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourcePadIndex 上游节点的pad索引.
     * @param sourceName 上游节点的名称.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并通过输出参数[outDstPadIndex]返回给调用者。
     * @param outDstPadIndex 下游节点的pad索引。
     * @param dstNodeName 下游节点的名称，由下游节点返回给调用者.
     * @param dstMgrID 下游节点所在池的ice ID.
     * @param dstNodeIndex 下游节点所在池中节点自身的索引，用于通过池来传输数据.
     * @param mode 数据传输的模式
     * @param modeInfo 传输模式的附加信息，根据传输模式的参数来确定其中包含的信息，谁提供传输模式，谁就必须给出传输信息。例如如果调用者设定传输模式为共享内存，则需要调用者填充共享内存的名称.
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, Ice.IntHolder outDstPadIndex, Ice.StringHolder dstNodeName, Ice.StringHolder dstMgrID, Ice.IntHolder dstNodeIndex);

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourcePadIndex 上游节点的pad索引.
     * @param sourceName 上游节点的名称.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并通过输出参数[outDstPadIndex]返回给调用者。
     * @param outDstPadIndex 下游节点的pad索引。
     * @param dstNodeName 下游节点的名称，由下游节点返回给调用者.
     * @param dstMgrID 下游节点所在池的ice ID.
     * @param dstNodeIndex 下游节点所在池中节点自身的索引，用于通过池来传输数据.
     * @param mode 数据传输的模式
     * @param modeInfo 传输模式的附加信息，根据传输模式的参数来确定其中包含的信息，谁提供传输模式，谁就必须给出传输信息。例如如果调用者设定传输模式为共享内存，则需要调用者填充共享内存的名称.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, Ice.IntHolder outDstPadIndex, Ice.StringHolder dstNodeName, Ice.StringHolder dstMgrID, Ice.IntHolder dstNodeIndex, java.util.Map<String, String> __ctx);

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourceName 上游节点的名称.
     * @param mode 数据传输的模式
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo);

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourceName 上游节点的名称.
     * @param mode 数据传输的模式
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, java.util.Map<String, String> __ctx);

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourceName 上游节点的名称.
     * @param mode 数据传输的模式
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, Ice.Callback __cb);

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourceName 上游节点的名称.
     * @param mode 数据传输的模式
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourceName 上游节点的名称.
     * @param mode 数据传输的模式
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, Callback_MediaNode_addSource __cb);

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourceName 上游节点的名称.
     * @param mode 数据传输的模式
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addSource(String sourceID, int sourcePadIndex, String sourceName, int dstPadIndex, TransferMode mode, String modeInfo, java.util.Map<String, String> __ctx, Callback_MediaNode_addSource __cb);

    /**
     * 节点的连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param outDstPadIndex 下游节点的pad索引。
     * @param dstMgrID 下游节点所在池的ice ID.
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_addSource(Ice.IntHolder outDstPadIndex, Ice.StringHolder dstNodeName, Ice.StringHolder dstMgrID, Ice.IntHolder dstNodeIndex, Ice.AsyncResult __result);

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourcePadIndex 上游节点的pad索引.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeSource(String sourceID, int sourcePadIndex, int dstPadIndex);

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param sourcePadIndex 上游节点的pad索引.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int removeSource(String sourceID, int sourcePadIndex, int dstPadIndex, java.util.Map<String, String> __ctx);

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeSource(String sourceID, int sourcePadIndex, int dstPadIndex);

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeSource(String sourceID, int sourcePadIndex, int dstPadIndex, java.util.Map<String, String> __ctx);

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeSource(String sourceID, int sourcePadIndex, int dstPadIndex, Ice.Callback __cb);

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeSource(String sourceID, int sourcePadIndex, int dstPadIndex, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeSource(String sourceID, int sourcePadIndex, int dstPadIndex, Callback_MediaNode_removeSource __cb);

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param sourceID 上游节点的ID.
     * @param dstPadIndex 下游节点的pad索引，如果为[InvalidPadIndex]则表示由下游节点选择并作为输出参数返回给调用者。
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeSource(String sourceID, int sourcePadIndex, int dstPadIndex, java.util.Map<String, String> __ctx, Callback_MediaNode_removeSource __cb);

    /**
     * 节点的断开连接函数，由内部框架调用，不应该由应用调用。
     * 
     * @param __result The asynchronous result object.
     * @return 返回值为0代表成功，否则为失败的错误码.
     * 
     **/
    public int end_removeSource(Ice.AsyncResult __result);
}
