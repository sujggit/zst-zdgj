// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ResourceNodeDesc.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package vmxICE;

/**
 * 命令结构，包含了命令的类型，及以字符串形式表现的附加值。
 * 
 **/
public class ResourceNodeDesc implements java.lang.Cloneable, java.io.Serializable
{
    /**
     * 媒体流节点的ICE ID.
     **/
    public String ID;

    /**
     * 媒体流节点的类型.
     **/
    public NodeMediaType type;

    /**
     * 媒体流节点的序号，标明这是同一种媒体流中的第几个节点.
     **/
    public int index;

    public ResourceNodeDesc()
    {
    }

    public ResourceNodeDesc(String ID, NodeMediaType type, int index)
    {
        this.ID = ID;
        this.type = type;
        this.index = index;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ResourceNodeDesc _r = null;
        try
        {
            _r = (ResourceNodeDesc)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(ID != _r.ID)
            {
                if(ID == null || _r.ID == null || !ID.equals(_r.ID))
                {
                    return false;
                }
            }
            if(type != _r.type)
            {
                if(type == null || _r.type == null || !type.equals(_r.type))
                {
                    return false;
                }
            }
            if(index != _r.index)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(ID != null)
        {
            __h = 5 * __h + ID.hashCode();
        }
        if(type != null)
        {
            __h = 5 * __h + type.hashCode();
        }
        __h = 5 * __h + index;
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(ID);
        type.__write(__os);
        __os.writeInt(index);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        ID = __is.readString();
        type = NodeMediaType.__read(__is);
        index = __is.readInt();
    }
}
