// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `LinkNode.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package vmxICE;

/**
 * 连接的节点描述
 **/
public class LinkNode implements java.lang.Cloneable, java.io.Serializable
{
    /**
     * 连接的节点的ICE ID。
     **/
    public String nodeID;

    /**
     * 连接的节点中pad的索引。
     **/
    public int nodePadIndex;

    /**
     * 连接的节点的名称。
     **/
    public String nodeName;

    /**
     * 用于和对方节点连接的pad的索引。
     **/
    public int selfPadIndex;

    public LinkNode()
    {
    }

    public LinkNode(String nodeID, int nodePadIndex, String nodeName, int selfPadIndex)
    {
        this.nodeID = nodeID;
        this.nodePadIndex = nodePadIndex;
        this.nodeName = nodeName;
        this.selfPadIndex = selfPadIndex;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LinkNode _r = null;
        try
        {
            _r = (LinkNode)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(nodeID != _r.nodeID)
            {
                if(nodeID == null || _r.nodeID == null || !nodeID.equals(_r.nodeID))
                {
                    return false;
                }
            }
            if(nodePadIndex != _r.nodePadIndex)
            {
                return false;
            }
            if(nodeName != _r.nodeName)
            {
                if(nodeName == null || _r.nodeName == null || !nodeName.equals(_r.nodeName))
                {
                    return false;
                }
            }
            if(selfPadIndex != _r.selfPadIndex)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(nodeID != null)
        {
            __h = 5 * __h + nodeID.hashCode();
        }
        __h = 5 * __h + nodePadIndex;
        if(nodeName != null)
        {
            __h = 5 * __h + nodeName.hashCode();
        }
        __h = 5 * __h + selfPadIndex;
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(nodeID);
        __os.writeInt(nodePadIndex);
        __os.writeString(nodeName);
        __os.writeInt(selfPadIndex);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        nodeID = __is.readString();
        nodePadIndex = __is.readInt();
        nodeName = __is.readString();
        selfPadIndex = __is.readInt();
    }
}
