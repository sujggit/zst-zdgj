// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Message.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package vmxICE;

/**
 * 消息结构，包含了消息的名称，所有者及消息内容.
 * 
 **/
public class Message implements java.lang.Cloneable, java.io.Serializable
{
    /**
     * 消息的关键字，用于判断消息类型.
     * 目前有的消息类型:
     * <ul> MessageError - 报告出错的消息，可以从[MessageContent]中通过[MessageErrorKeyInfo]获取到出错的信息.   </ul>
     * <ul> MessageClientDisconnect - 客户端断开连接. 从owner中获取客户端的ID,从content中的[MessageClientKeyType]中获取client的类型, 从MessageClientKeyOwner中获取会议的ID</ul>
     * <ul> MessageClientConnect - 客户端连接成功. 从owner中获取客户端的ID,从content中的[MessageClientKeyType]中获取client的类型, 从MessageClientKeyOwner中获取会议的ID  </ul>
     * <ul> MessageClientVideoExtStart - 客户端辅流开始发送.从owner中获取客户端的ID,从content中的[MessageClientKeyType]中获取client的类型   </ul>
     * <ul> MessageClientVideoExtStop - 客户端辅流停止发送.从owner中获取客户端的ID,从content中的[MessageClientKeyType]中获取client的类型   </ul>
     * <ul> MessageSystemStart - 后台启动完成的消息 </ul> 
     * <ul> MessageSystemStartFailed - 后台启动失败的消息，从content中的[MessageSystemKeyFailedModule]中获取失败的进程名称，以逗号分隔 </ul> 
     * <ul> MessageSystemLicenseExpire - 授权过期的消息 </ul>
     * 
     **/
    public String name;

    /**
     * 消息的所有者，通过所有者可以判断这个消息是属于是哪个对象的，这个ID是ICE indentify.
     * 
     **/
    public String owner;

    /**
     * 消息的内容，以name对应value的形式提供，根据消息类型不一样，name也不一样，具体需要参考消息说明.
     * 
     **/
    public java.util.Map<java.lang.String, java.lang.String> content;

    public Message()
    {
    }

    public Message(String name, String owner, java.util.Map<java.lang.String, java.lang.String> content)
    {
        this.name = name;
        this.owner = owner;
        this.content = content;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Message _r = null;
        try
        {
            _r = (Message)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(owner != _r.owner)
            {
                if(owner == null || _r.owner == null || !owner.equals(_r.owner))
                {
                    return false;
                }
            }
            if(content != _r.content)
            {
                if(content == null || _r.content == null || !content.equals(_r.content))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(name != null)
        {
            __h = 5 * __h + name.hashCode();
        }
        if(owner != null)
        {
            __h = 5 * __h + owner.hashCode();
        }
        if(content != null)
        {
            __h = 5 * __h + content.hashCode();
        }
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(name);
        __os.writeString(owner);
        MessageContentHelper.write(__os, content);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        name = __is.readString();
        owner = __is.readString();
        content = MessageContentHelper.read(__is);
    }
}
